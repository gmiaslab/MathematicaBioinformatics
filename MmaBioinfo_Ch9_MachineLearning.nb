(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1038323,      20128]
NotebookOptionsPosition[   1027292,      19930]
NotebookOutlinePosition[   1027842,      19950]
CellTagsIndexPosition[   1027799,      19947]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Mathematica for Bioinformatics", "Title",
 CellChangeTimes->{{3.716505231034802*^9, 3.7165052399525843`*^9}, {
  3.7189700660987*^9, 3.718970066321953*^9}, {3.719671162174827*^9, 
  3.719671169138997*^9}, {3.719918559461687*^9, 3.719918616051854*^9}, {
  3.719918720054628*^9, 3.719918725308221*^9}, {3.7199190461734447`*^9, 
  3.719919048693425*^9}},ExpressionUUID->"3414ea2f-4509-4c5a-a02d-\
dd9b81320855"],

Cell[TextData[{
 StyleBox["by George I. Mias, PhD\n",
  FontColor->RGBColor[
   0.1573052567330434, 0.15793087663080796`, 0.4541237506675822]],
 Cell[BoxData[
  TemplateBox[{"\"http://georgemias.org\"", "http://georgemias.org"},
   "HyperlinkURL"]], "Output",
  CellChangeTimes->{3.719919204810491*^9, 3.719919290636554*^9},
  FontFamily->"Source Code Pro",
  FontSize->18,ExpressionUUID->"906277dd-33a5-436a-be7f-c6f68b4e467c"]
}], "Text",
 CellChangeTimes->{{3.7199190500652037`*^9, 3.719919115146494*^9}, 
   3.7199191833934107`*^9, {3.7199192683634*^9, 3.719919303306136*^9}, 
   3.719919352773055*^9},
 FontSize->24,
 FontWeight->"Bold",ExpressionUUID->"50c8a2f2-ad95-43e1-a8cf-800daf0992cd"],

Cell["\<\
Cite this chapter as:
Mias G. (2018) Machine Learning. In: Mathematica for Bioinformatics. \
Springer, Cham. https://doi.org/10.1007/978-3-319-72377-8_9\
\>", "Text",
 CellChangeTimes->{
  3.83156060824817*^9},ExpressionUUID->"bd483a19-90ff-4f12-9212-b4d732c3b75e"],

Cell[CellGroupData[{

Cell["Chapter 9:  Machine Learning", "Chapter",
 CellChangeTimes->{{3.716505231034802*^9, 3.7165052399525843`*^9}, {
  3.7189700660987*^9, 3.718970066321953*^9}, {3.719671162174827*^9, 
  3.719671169138997*^9}, {3.719918559461687*^9, 3.7199185831615763`*^9}, {
  3.719919425090145*^9, 3.71991942946268*^9}, {3.71991948546815*^9, 
  3.719919500276846*^9}, {3.719919555917303*^9, 
  3.7199195564090433`*^9}},ExpressionUUID->"2e5798e6-0771-4291-bfad-\
92143ba4a306"],

Cell[CellGroupData[{

Cell["A taste of clustering", "Section",
 CellChangeTimes->{{3.7199491448906507`*^9, 
  3.719949150435939*^9}},ExpressionUUID->"c99be4af-e9ce-49ed-b93c-\
760a3d79a93b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7198503609882317`*^9, 3.719850370736845*^9}, 
   3.720906042507864*^9},
 CellLabel->
  "In[243]:=",ExpressionUUID->"bcc29e56-62f9-410e-9d03-0887477854de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"golubAssociation", "=", 
   RowBox[{"<<", "\"\<golubAssociation\>\""}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7198501613490353`*^9, 3.719850167682922*^9}, {
  3.719850359747254*^9, 3.719850379432122*^9}, {3.720906049141327*^9, 
  3.720906050219523*^9}, {3.721743731358945*^9, 3.72174373320129*^9}, {
  3.730038657578101*^9, 3.7300386644714327`*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"24769630-b8d7-46e1-9eec-5dba21b7a066"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hu6800IDtoAnnotation", "=", 
   RowBox[{"<<", "\"\<hu6800IDtoAnnotation\>\""}]}], ";"}]], "Input",
 CellChangeTimes->{{3.719850398954671*^9, 3.7198504038584137`*^9}, 
   3.7209060532373466`*^9, {3.721743736352775*^9, 3.721743739243112*^9}},
 CellLabel->
  "In[245]:=",ExpressionUUID->"f1c582a7-65af-480f-ac4c-b7bfcfb81599"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myosinExample", "=", 
  RowBox[{
   RowBox[{"Query", "[", 
    RowBox[{"All", ",", "\"\<M31211_s_at\>\""}], "]"}], "@", 
   "golubAssociation"}]}]], "Input",
 CellChangeTimes->{{3.719947281707796*^9, 3.719947301603002*^9}, 
   3.719947906280883*^9, {3.719947936643196*^9, 3.719947937439789*^9}, {
   3.71994804642179*^9, 3.719948047319502*^9}, {3.719948126478077*^9, 
   3.7199481309860687`*^9}},
 CellLabel->
  "In[246]:=",ExpressionUUID->"563b6c8e-be78-470a-b05c-6bdcb1929298"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"AML\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.9296977608501635`"}], ",", 
      RowBox[{"-", "1.2143853831506357`"}], ",", 
      RowBox[{"-", "1.3655872827319675`"}], ",", 
      RowBox[{"-", "1.0305435037652275`"}], ",", 
      RowBox[{"-", "1.2991495586323216`"}], ",", 
      RowBox[{"-", "0.4011217902697098`"}], ",", 
      RowBox[{"-", "0.2632450585388963`"}], ",", 
      RowBox[{"-", "1.2724061258095911`"}], ",", 
      RowBox[{"-", "0.6511764709485812`"}], ",", 
      RowBox[{"-", "0.32312484357444404`"}], ",", 
      RowBox[{"-", "1.4347270114342876`"}], ",", 
      RowBox[{"-", "0.20351794588868766`"}], ",", 
      RowBox[{"-", "1.043356063382701`"}], ",", 
      RowBox[{"-", "1.2270212041465278`"}], ",", 
      RowBox[{"-", "1.2807126429115745`"}], ",", "0.2602067426742524`", ",", 
      RowBox[{"-", "1.0580099078120297`"}], ",", 
      RowBox[{"-", "0.7203310732505191`"}], ",", 
      RowBox[{"-", "0.8099045693124726`"}], ",", 
      RowBox[{"-", "0.5882081614242479`"}], ",", 
      RowBox[{"-", "0.5136317002987141`"}], ",", 
      RowBox[{"-", "0.2472963459658415`"}], ",", 
      RowBox[{"-", "1.4203608388573667`"}], ",", 
      RowBox[{"-", "1.4816276584804704`"}], ",", 
      RowBox[{"-", "1.3110958098343686`"}]}], "}"}]}], ",", 
   RowBox[{"\<\"ALL\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.21672955027100788`", ",", 
      RowBox[{"-", "0.05120115895569135`"}], ",", "0.051219581522963735`", 
      ",", "0.06582984659939808`", ",", "0.355841853944418`", ",", 
      RowBox[{"-", "0.07641561285915632`"}], ",", 
      RowBox[{"-", "0.2989317933653348`"}], ",", 
      RowBox[{"-", "0.46566980206515224`"}], ",", "0.4903721549236263`", ",", 
      "0.651372581833078`", ",", "0.7152124889848497`", ",", 
      "0.14814887759898335`", ",", "0.3543626691363583`", ",", 
      RowBox[{"-", "0.4661932944500926`"}], ",", "0.5761752444431527`", ",", 
      "0.41746108466459714`", ",", 
      RowBox[{"-", "0.40758602579889913`"}], ",", "0.3881376387798891`", ",", 
      "0.26681742576525735`", ",", "0.6349129669283509`", ",", 
      "0.7078976451369176`", ",", 
      RowBox[{"-", "0.7758709659645383`"}], ",", "0.07653314699875012`", ",", 
      "0.10865802494564528`", ",", "0.2247036454783714`", ",", 
      "0.4668979162482864`", ",", 
      RowBox[{"-", "0.87136046796972`"}], ",", "0.19309658826712045`", ",", 
      RowBox[{"-", "0.37864986968992315`"}], ",", 
      RowBox[{"-", "0.08961188950957222`"}], ",", "0.28486558881337476`", ",",
       "0.5199495112520192`", ",", 
      RowBox[{"-", "0.20494844176144664`"}], ",", "0.5609265292777812`", ",", 
      
      RowBox[{"-", "0.07587433139763333`"}], ",", "0.7267730187822518`", ",", 
      "0.3370381890554236`", ",", "0.37495397039013934`", ",", 
      "0.14678166771436427`", ",", 
      RowBox[{"-", "0.47457395405299724`"}], ",", "0.17077678644332647`", ",",
       "0.13699115419938196`", ",", "0.10743804367560046`", ",", 
      RowBox[{"-", "0.5506896455663939`"}], ",", "0.27912091767633085`", ",", 
      
      RowBox[{"-", "0.6657575701974796`"}], ",", "0.5458818217752643`"}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.719947302095689*^9, 3.7199480478332443`*^9, 
  3.719948131537043*^9, 3.7202912596417294`*^9, 3.7209060553057327`*^9, 
  3.720907388885*^9, 3.720911313711656*^9, 3.72091135543154*^9, 
  3.720912255803228*^9, 3.7217437471378403`*^9, 3.7217440550447206`*^9, 
  3.721744408804841*^9, 3.7217451934686737`*^9, 3.721750043334738*^9, 
  3.7217501478238173`*^9, 3.721750209778242*^9, 3.831560860782016*^9},
 CellLabel->
  "Out[246]=",ExpressionUUID->"5d662d6a-528e-4f84-b80a-6b5b424b1aa8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"labelsMYL6BAML", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[Rule]", " ", "\"\<AML\>\""}], "&"}], "@", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "25"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.719949380538043*^9, 3.719949388263859*^9}},
 CellLabel->
  "In[247]:=",ExpressionUUID->"28270b7d-94f8-4ffc-9056-45e0b6c6df14"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"10", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"11", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"12", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"13", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"14", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"15", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"16", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"17", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"18", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"19", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"20", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"21", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"22", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"23", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"24", "\[Rule]", "\<\"AML\"\>"}], ",", 
   RowBox[{"25", "\[Rule]", "\<\"AML\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.719949317836801*^9, 3.719949388812193*^9, 
  3.720291262099395*^9, 3.72090605738375*^9, 3.720912255855089*^9, 
  3.721743766906806*^9, 3.721744055329088*^9, 3.721744408887293*^9, 
  3.721745193531967*^9, 3.7217500446220007`*^9, 3.7217501479221077`*^9, 
  3.721750209874764*^9, 3.8315608627112913`*^9},
 CellLabel->
  "Out[247]=",ExpressionUUID->"9a317586-f4e3-4310-a5ef-ab96d9d7f305"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"labelsMYL6BALL", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[Rule]", " ", "\"\<ALL\>\""}], "&"}], "@", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "47"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.719949392609466*^9, 3.719949399187126*^9}, 
   3.721746130169169*^9},
 CellLabel->
  "In[248]:=",ExpressionUUID->"eb3b2857-2ee9-47ad-8501-8cd42b96d802"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"10", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"11", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"12", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"13", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"14", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"15", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"16", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"17", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"18", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"19", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"20", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"21", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"22", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"23", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"24", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"25", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"26", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"27", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"28", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"29", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"30", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"31", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"32", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"33", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"34", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"35", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"36", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"37", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"38", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"39", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"40", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"41", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"42", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"43", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"44", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"45", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"46", "\[Rule]", "\<\"ALL\"\>"}], ",", 
   RowBox[{"47", "\[Rule]", "\<\"ALL\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.719949322534738*^9, 3.719949399758478*^9, 
  3.720291264316786*^9, 3.720906058434719*^9, 3.720912255928636*^9, 
  3.721743767837474*^9, 3.721744055695372*^9, 3.7217444089818707`*^9, 
  3.7217451936096773`*^9, 3.721750044853001*^9, 3.721750148039555*^9, 
  3.721750209992959*^9, 3.8315608659233227`*^9},
 CellLabel->
  "Out[248]=",ExpressionUUID->"68ae34b3-4941-48e1-8cc6-5691ae5b6423"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindClusters"}]], "Input",
 CellChangeTimes->{{3.719949349426771*^9, 3.719949352751893*^9}},
 CellLabel->
  "In[249]:=",ExpressionUUID->"fe947f65-1070-4c2f-a29d-d5424a600a3c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/FindClusters",
              ButtonNote->"paclet:ref/FindClusters"],
             "\"paclet:ref/FindClusters\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", \
RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}], \\\"]\\\"}]\\) partitions the \
\\!\\(\\*StyleBox[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \\\"i\\\"], \
\\\"TI\\\"]\\) into clusters of similar elements. \
\\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\
\\\"}], \\\"]\\\"}]\\) returns the \\!\\(\\*StyleBox[SubscriptBox[\\\"v\\\", \
\\\"i\\\"], \\\"TI\\\"]\\) corresponding to the \
\\!\\(\\*StyleBox[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \\\"i\\\"], \
\\\"TI\\\"]\\) in each cluster. \\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}], \\\"\[Rule]\\\", RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) gives the same result. \
\\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", RowBox[{\\\"\
\[LeftAssociation]\\\", RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"label\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"label\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"\
\[RightAssociation]\\\"}], \\\"]\\\"}]\\) returns the \
\\!\\(\\*SubscriptBox[StyleBox[\\\"label\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) corresponding to the \
\\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\) in each cluster.\\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\
\", \\\"TI\\\"]}], \\\"]\\\"}]\\) partitions \\!\\(\\*StyleBox[\\\"data\\\", \
\\\"TI\\\"]\\) into at most \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\) \
clusters. \"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/FindClusters", 
                    "paclet:ref/FindClusters", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/FindClusters.\
html"], None}, "http://reference.wolfram.com/language/ref/FindClusters.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Protected", ",", "ReadProtected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`FindClusters\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/FindClusters",
              ButtonNote->"paclet:ref/FindClusters"],
             "\"paclet:ref/FindClusters\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", \
RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}], \\\"]\\\"}]\\) partitions the \
\\!\\(\\*StyleBox[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \\\"i\\\"], \
\\\"TI\\\"]\\) into clusters of similar elements. \
\\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\
\\\"}], \\\"]\\\"}]\\) returns the \\!\\(\\*StyleBox[SubscriptBox[\\\"v\\\", \
\\\"i\\\"], \\\"TI\\\"]\\) corresponding to the \
\\!\\(\\*StyleBox[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \\\"i\\\"], \
\\\"TI\\\"]\\) in each cluster. \\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}], \\\"\[Rule]\\\", RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) gives the same result. \
\\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\\\", RowBox[{\\\"\
\[LeftAssociation]\\\", RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"label\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"label\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"\
\[RightAssociation]\\\"}], \\\"]\\\"}]\\) returns the \
\\!\\(\\*SubscriptBox[StyleBox[\\\"label\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) corresponding to the \
\\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\) in each cluster.\\n\\!\\(\\*RowBox[{\\\"FindClusters\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\
\", \\\"TI\\\"]}], \\\"]\\\"}]\\) partitions \\!\\(\\*StyleBox[\\\"data\\\", \
\\\"TI\\\"]\\) into at most \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\) \
clusters. \"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"FindClusters\", \"[\", RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \"]\"}]\) partitions the \
\!\(\*StyleBox[SubscriptBox[StyleBox[\"e\", \"TI\"], \"i\"], \"TI\"]\) into \
clusters of similar elements. \n\!\(\*RowBox[{\"FindClusters\", \"[\", \
RowBox[{\"{\", RowBox[{RowBox[{SubscriptBox[StyleBox[\"e\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \"\[Rule]\", SubscriptBox[StyleBox[\"v\", \"TI\"], \
StyleBox[\"1\", \"TR\"]]}], \",\", RowBox[{SubscriptBox[StyleBox[\"e\", \
\"TI\"], StyleBox[\"2\", \"TR\"]], \"\[Rule]\", SubscriptBox[StyleBox[\"v\", \
\"TI\"], StyleBox[\"2\", \"TR\"]]}], \",\", StyleBox[\"\[Ellipsis]\", \
\"TR\"]}], \"}\"}], \"]\"}]\) returns the \!\(\*StyleBox[SubscriptBox[\"v\", \
\"i\"], \"TI\"]\) corresponding to the \
\!\(\*StyleBox[SubscriptBox[StyleBox[\"e\", \"TI\"], \"i\"], \"TI\"]\) in \
each cluster. \n\!\(\*RowBox[{\"FindClusters\", \"[\", RowBox[{RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \"\[Rule]\", RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"v\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"v\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]}], \"]\"}]\) gives the same \
result. \n\!\(\*RowBox[{\"FindClusters\", \"[\", RowBox[{\"\[LeftAssociation]\
\", RowBox[{RowBox[{SubscriptBox[StyleBox[\"label\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \"\[Rule]\", SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"1\", \
\"TR\"]]}], \",\", RowBox[{SubscriptBox[StyleBox[\"label\", \"TI\"], \
StyleBox[\"2\", \"TR\"]], \"\[Rule]\", SubscriptBox[StyleBox[\"e\", \"TI\"], \
StyleBox[\"2\", \"TR\"]]}], \",\", StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"\
\[RightAssociation]\"}], \"]\"}]\) returns the \
\!\(\*SubscriptBox[StyleBox[\"label\", \"TI\"], StyleBox[\"i\", \"TI\"]]\) \
corresponding to the \!\(\*SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"i\
\", \"TI\"]]\) in each cluster.\n\!\(\*RowBox[{\"FindClusters\", \"[\", \
RowBox[{StyleBox[\"data\", \"TI\"], \",\", StyleBox[\"n\", \"TI\"]}], \"]\"}]\
\) partitions \!\(\*StyleBox[\"data\", \"TI\"]\) into at most \!\(\*StyleBox[\
\"n\", \"TI\"]\) clusters. ", "Documentation" -> 
    Association[
     "Local" -> "paclet:ref/FindClusters", "Web" -> 
      "http://reference.wolfram.com/language/ref/FindClusters.html"], 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected, ReadProtected}, "FullName" -> 
    "System`FindClusters"], False]]], "Output",
 CellChangeTimes->{3.831560867167605*^9},
 CellLabel->
  "Out[249]=",ExpressionUUID->"f24249be-098c-496d-a25a-22af4cf4b27f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Flatten", "@", 
    RowBox[{"Values", "@", "myosinExample"}]}], "\[Rule]", " ", 
   RowBox[{"Values", "@", 
    RowBox[{"Join", "[", 
     RowBox[{"labelsMYL6BAML", ",", "labelsMYL6BALL"}], "]"}]}]}], "//", 
  "Short"}]], "Input",
 CellChangeTimes->{{3.720906362574407*^9, 3.720906363399784*^9}, {
  3.720906411735346*^9, 3.720906412925961*^9}, {3.721743781498493*^9, 
  3.721743782656762*^9}},
 CellLabel->
  "In[250]:=",ExpressionUUID->"5ee5a5d3-a855-4f40-926b-fbf8e2b0e6c3"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.9296977608501635`"}], ",", 
     RowBox[{"\[LeftSkeleton]", "70", "\[RightSkeleton]"}], ",", 
     "0.5458818217752643`"}], "}"}], "\[Rule]", 
   RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}],
  Short]], "Output",
 CellChangeTimes->{
  3.720906350186502*^9, {3.7209064067868567`*^9, 3.72090641329495*^9}, 
   3.720912256277524*^9, 3.721743783133142*^9, 3.721744057219839*^9, 
   3.7217444104740953`*^9, 3.721745193876542*^9, 3.72175004551822*^9, 
   3.721750148305806*^9, 3.7217502102912197`*^9, 3.831560869214983*^9},
 CellLabel->
  "Out[250]//Short=",ExpressionUUID->"ba442ed0-879e-41ca-b0e8-8d63b82bf46e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindClusters", "[", 
  RowBox[{
   RowBox[{"Flatten", "@", 
    RowBox[{"Values", "@", "myosinExample"}]}], "\[Rule]", 
   RowBox[{"Join", "[", 
    RowBox[{"labelsMYL6BAML", ",", "labelsMYL6BALL"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.719948400615478*^9, 3.719948473589197*^9}, {
   3.719948524283929*^9, 3.71994854829758*^9}, {3.719948604324085*^9, 
   3.719948652540882*^9}, {3.7199488072780046`*^9, 3.719948833003683*^9}, {
   3.719948868468054*^9, 3.7199489684435663`*^9}, {3.719949014875228*^9, 
   3.7199490592208776`*^9}, {3.719949408753607*^9, 3.719949421125079*^9}, 
   3.720906344823141*^9, 3.720906425631287*^9, 3.720906586393407*^9},
 CellLabel->
  "In[253]:=",ExpressionUUID->"c09aa857-247b-4e5d-8784-803ddc9674d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"2", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"3", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"4", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"5", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"8", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"11", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"13", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"14", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"15", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"17", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"23", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"24", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"25", "\[Rule]", "\<\"AML\"\>"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"6", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"7", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"9", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"10", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"12", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"18", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"19", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"20", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"21", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"22", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"7", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"8", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"14", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"17", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"22", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"27", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"29", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"33", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"40", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"44", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"46", "\[Rule]", "\<\"ALL\"\>"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"16", "\[Rule]", "\<\"AML\"\>"}], ",", 
     RowBox[{"1", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"2", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"3", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"4", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"5", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"6", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"9", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"10", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"11", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"12", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"13", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"15", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"16", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"18", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"19", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"20", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"21", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"23", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"24", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"25", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"26", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"28", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"30", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"31", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"32", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"34", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"35", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"36", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"37", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"38", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"39", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"41", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"42", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"43", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"45", "\[Rule]", "\<\"ALL\"\>"}], ",", 
     RowBox[{"47", "\[Rule]", "\<\"ALL\"\>"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.719948881480345*^9, 3.719948925999628*^9, {3.719949025617646*^9, 
   3.7199490609693947`*^9}, 3.719949422900172*^9, 3.720291271111186*^9, 
   3.720906064789874*^9, 3.720906165516487*^9, 3.720906216874586*^9, {
   3.7209064270813913`*^9, 3.720906505089641*^9}, 3.7209065874520063`*^9, 
   3.720906619699946*^9, 3.7209122578798122`*^9, 3.721743794354972*^9, 
   3.721744060189702*^9, 3.721744412942628*^9, 3.721745197385722*^9, 
   3.721750047937182*^9, 3.721750151902001*^9, 3.7217502139120493`*^9, 
   3.831560878170315*^9, 3.831560910986685*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"f56f74ef-dae3-4ca3-8e4d-3455af7e8a0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Counts", "[", 
    RowBox[{"Values", "@", "#"}], "]"}], "&"}], "/@", "%"}]], "Input",
 CellChangeTimes->{{3.7209064366179113`*^9, 3.720906441524323*^9}, {
  3.720906487329821*^9, 3.720906502658503*^9}, {3.7209065962674713`*^9, 
  3.7209066166495934`*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"6241b91f-ce7c-49c4-9ec8-1a9b7940756e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"AML\"\>", "\[Rule]", "14"}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"AML\"\>", "\[Rule]", "10"}], ",", 
     RowBox[{"\<\"ALL\"\>", "\[Rule]", "11"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"AML\"\>", "\[Rule]", "1"}], ",", 
     RowBox[{"\<\"ALL\"\>", "\[Rule]", "36"}]}], "\[RightAssociation]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7209064421576233`*^9, 3.720906454735982*^9}, {
   3.720906491420968*^9, 3.720906506359229*^9}, 3.7209065921073112`*^9, 
   3.720906623580151*^9, 3.720912258126038*^9, 3.7217440605901937`*^9, 
   3.721744413305032*^9, 3.72174519772292*^9, 3.721750048341585*^9, 
   3.721750152254887*^9, 3.721750214289936*^9, {3.8315608862693653`*^9, 
   3.831560912804468*^9}},
 CellLabel->
  "Out[254]=",ExpressionUUID->"22c48852-e2be-4ec6-aa91-b869a277c1d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dimensional Reduction", "Section",
 CellChangeTimes->{{3.720291298968231*^9, 3.7202913089121103`*^9}, {
  3.7202971230059853`*^9, 3.720297140856202*^9}, {3.720906663382515*^9, 
  3.720906677238063*^9}, {3.72091073385343*^9, 3.7209107482577763`*^9}, {
  3.7209125060913467`*^9, 3.720912521596134*^9}, {3.720912615050737*^9, 
  3.720912618635829*^9}},ExpressionUUID->"5f1de410-1edd-46bf-bd2b-\
9604d41f545a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"golubOmicsObject", "=", 
   RowBox[{"<<", "golubOmicsObject"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.720908487001389*^9, 3.720908489417066*^9}, 
   3.720908910360442*^9, {3.7209093340318336`*^9, 3.720909334699264*^9}, {
   3.720909455817265*^9, 3.7209094691143713`*^9}, {3.720909640967506*^9, 
   3.7209096521356583`*^9}, {3.720909685985281*^9, 3.720909686663754*^9}, {
   3.72091138609146*^9, 3.7209113914508553`*^9}},
 CellLabel->
  "In[255]:=",ExpressionUUID->"ccd5d70e-aa8a-4c04-abff-346993ae793f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"golubPhenotypeData", "=", 
   RowBox[{"<<", "golubPhenotypeData"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7209096988828773`*^9, 3.720909700002708*^9}, {
  3.7209114042742558`*^9, 3.7209114206462812`*^9}},
 CellLabel->
  "In[256]:=",ExpressionUUID->"dca8e5f0-e27d-4338-8174-fe5d5a9c9e3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"golubPhenotypeData", "//", "Short"}]], "Input",
 CellChangeTimes->{{3.720909703544075*^9, 3.7209097083133907`*^9}},
 CellLabel->
  "In[257]:=",ExpressionUUID->"f8358b46-c6d6-4eb9-9ed6-7ea9de75bf67"],

Cell[BoxData[
 TagBox[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Samples\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\<\"ALL/AML\"\>", ",", 
       RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}], 
       ",", "\<\"Source\"\>"}], "}"}]}], ",", 
    RowBox[{"\[LeftSkeleton]", "71", "\[RightSkeleton]"}], ",", 
    RowBox[{"72", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}]}], 
   "\[RightAssociation]"}],
  Short]], "Output",
 CellChangeTimes->{
  3.7209097087675447`*^9, {3.720911327407995*^9, 3.720911333343759*^9}, 
   3.720911367077434*^9, {3.7209114113649693`*^9, 3.720911422464113*^9}, 
   3.7209125764105463`*^9, 3.720922872712612*^9, 3.721744062047825*^9, 
   3.721744414892277*^9, 3.7217451992005587`*^9, 3.7217500508431883`*^9, 
   3.721750153754765*^9, 3.721750215796067*^9, 3.8315609278604307`*^9},
 CellLabel->
  "Out[257]//Short=",ExpressionUUID->"a4c7fc80-e7b0-462e-a51a-912f3d0b6947"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"sampleToCondition", "=", 
   RowBox[{
    RowBox[{"Query", "[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "1"}], "]"}], "@", "golubPhenotypeData"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"sampleToCondition", "//", "Short"}]}], "Input",
 CellChangeTimes->{{3.720909732656064*^9, 3.720909772135419*^9}, {
  3.72091016196579*^9, 3.720910162359254*^9}},
 CellLabel->
  "In[258]:=",ExpressionUUID->"9c311f28-9300-4fde-8333-77d19ebd6398"],

Cell[BoxData[
 TagBox[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "\<\"ALL\"\>"}], ",", 
    RowBox[{"2", "\[Rule]", "\<\"ALL\"\>"}], ",", 
    RowBox[{"\[LeftSkeleton]", "68", "\[RightSkeleton]"}], ",", 
    RowBox[{"71", "\[Rule]", "\<\"ALL\"\>"}], ",", 
    RowBox[{"72", "\[Rule]", "\<\"ALL\"\>"}]}], "\[RightAssociation]"}],
  Short]], "Output",
 CellChangeTimes->{3.7209097724338017`*^9, 3.720910162884555*^9, 
  3.720911425697701*^9, 3.720912578576477*^9, 3.720922874539283*^9, 
  3.7217440621104803`*^9, 3.7217444149583387`*^9, 3.721745199280108*^9, 
  3.721750050909149*^9, 3.7217501538443813`*^9, 3.721750215883157*^9, 
  3.831560929764578*^9},
 CellLabel->
  "Out[259]//Short=",ExpressionUUID->"809b481b-c208-4443-b1e6-0529c3cf6885"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"genesAllGolub", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "\[Rule]", " ", 
      RowBox[{"sampleToCondition", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "&"}], "/@", 
    RowBox[{"Normal", "@", 
     RowBox[{
      RowBox[{"Query", "[", 
       RowBox[{"All", ",", 
        RowBox[{"Values", "/*", "Flatten"}]}], "]"}], "@", 
      "golubOmicsObject"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.720909336149933*^9, 3.720909338080997*^9}, {
   3.7209093686133623`*^9, 3.720909421797514*^9}, {3.7209095137224894`*^9, 
   3.720909523635729*^9}, 3.720909658037395*^9, {3.72091046454839*^9, 
   3.720910502169986*^9}, {3.720910555362893*^9, 3.720910559716893*^9}, {
   3.720913030001932*^9, 3.7209130487360773`*^9}},
 CellLabel->
  "In[260]:=",ExpressionUUID->"3678d35b-12c7-407e-81ec-d6d38d4b101e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"genesAllGolub", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "3"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.7209106071048927`*^9, 3.720910609625464*^9}, {
  3.72091303573833*^9, 3.720913055472844*^9}, {3.721744094309613*^9, 
  3.721744103610941*^9}},
 CellLabel->
  "In[261]:=",ExpressionUUID->"65f41110-8c9a-40ca-9b99-598b76245d4d"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.7883499372274219`"}], ",", 
     RowBox[{"-", "0.7569129882611255`"}], ",", 
     RowBox[{"\[LeftSkeleton]", "3567", "\[RightSkeleton]"}], ",", 
     RowBox[{"-", "0.3311788752968684`"}], ",", 
     RowBox[{"-", "0.8256612410907971`"}]}], "}"}], "\[Rule]", "\<\"ALL\"\>"}],
  Short[#, 3]& ]], "Output",
 CellChangeTimes->{
  3.720910609982828*^9, 3.7209114314923*^9, 3.720912585395598*^9, 
   3.720913056593441*^9, 3.721744062217576*^9, {3.721744095025333*^9, 
   3.721744104272717*^9}, 3.7217444152595263`*^9, 3.72174519938415*^9, 
   3.7217500510097857`*^9, 3.721750153945764*^9, 3.721750215995591*^9, 
   3.831560942649474*^9},
 CellLabel->
  "Out[261]//Short=",ExpressionUUID->"ee8d2231-63e6-4d58-aeaf-fb89ce630d51"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"golub2Dimensions", "=", 
   RowBox[{"DimensionReduce", "[", 
    RowBox[{
     RowBox[{"Keys", "@", "genesAllGolub"}], ",", "2", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<PrincipalComponentsAnalysis\>\""}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.720912685090377*^9, 3.7209126899344*^9}, {
   3.720912771127935*^9, 3.720912826377695*^9}, {3.7209129213117228`*^9, 
   3.720912923751368*^9}, 3.720913001375201*^9, {3.7209130618100348`*^9, 
   3.720913079778411*^9}},
 CellLabel->"In[262]:=",
 CellID->1529498239,ExpressionUUID->"0ec78ae9-45b2-4233-90c5-3301f50e1deb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"golub2Dimensions", "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "5"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.720913135006481*^9, 3.72091313922933*^9}, {
  3.721744114266798*^9, 3.721744125235969*^9}},
 CellLabel->
  "In[263]:=",ExpressionUUID->"b823e353-9194-4f6d-8251-b16bcdedcc50"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.251831628929848`", ",", "23.218382840948216`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7.236566992866689`"}], ",", 
      RowBox[{"-", "8.710775194175664`"}]}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "68", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"35.16943542270661`", ",", "14.821671799324577`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"11.988815777678331`", ",", 
      RowBox[{"-", "15.58586736534664`"}]}], "}"}]}], "}"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{
  3.7209130890189*^9, {3.720913132723633*^9, 3.7209131395209827`*^9}, 
   3.7217440629976387`*^9, {3.721744116867654*^9, 3.721744125472405*^9}, 
   3.721744416027769*^9, 3.7217452002250557`*^9, 3.721750156741789*^9, 
   3.721750216679749*^9, 3.831560951236607*^9},
 CellLabel->
  "Out[263]//Short=",ExpressionUUID->"6fe2acc3-72ba-4614-9cd4-dbda83181bda"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"golubByDisease", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{"golub2Dimensions", "\[Rule]", "\[IndentingNewLine]", 
       RowBox[{"Values", "@", "genesAllGolub"}]}], "]"}], ",", 
     RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "golubByDisease", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "golubByDisease", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
   "PlotLabel", "\[Rule]", " ", "\[IndentingNewLine]", 
    "\"\<Dimensional Reduction of ALL/AML Data\nUsing Principal Component \
Analysis\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.720912833283065*^9, 3.7209128919973927`*^9}, {
   3.720912928416827*^9, 3.720912928637125*^9}, {3.720913009974002*^9, 
   3.720913025206306*^9}, {3.720913150486865*^9, 3.720913226922867*^9}, {
   3.721743915106069*^9, 3.721743921843315*^9}, {3.7217441316152*^9, 
   3.721744131928132*^9}, {3.721749422306711*^9, 3.721749433059011*^9}, 
   3.721749607282325*^9, 3.721750190949216*^9},
 CellLabel->"In[264]:=",
 CellID->201935119,ExpressionUUID->"91a801f7-737f-4d5a-a80c-fb9cc30d2090"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.9, 0.36, 0.054], 
         CapForm["Butt"], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJwBAQP+/CFib1JlAgAAAC8AAAACAAAAjmiJJuABEUBS4Rfw5zc3QLWzJp4+
8hzAxpXrueprIcCAN0cgpZ0hQI/CFjFcdDhAH1UKKMp6A0AM0vjR5lc0QGzO
mluzTEPAAM0jamgtiD8iXODwjkAcQO8sPj5EeSxALrvEhe0QLkAy9wg1Qec1
QL/iHZE0STpAB/AkySntO0C5qtQMP1wowOREcJM4DSBALQydkewI+7+WOKvi
McUJQC6qUCd+kCrA1OapcWp5A0ChH1tHpmIUQHPQACX65CbA+q4GF1RCQsD5
NWZNjGAiQDgbtJPkSSnALNPDAIzZGUDMg/ipCQxFwI+1HvxysBNAREaj1JHl
J8DtNhhswdMxQAPyBifsKyDAsrn01bbMJUAEHOwtMvvTv4Vt5Fr5nRhARbHd
+XTXKcAVvUiBjCQbQB+BXlgBdEbA0O4rGW/jH0Dbh2n6RrBCwL+CWr4Lmts/
5cy6Uyb7L0CFaOmsPmQiQOpdJy/mriJAmXqiJkMBMkDVtRtsd7o2wKnKWN2Y
6DBAnhpoEaEdE0Cdl4/ZeiTpv/LvDnfgShjAyjwCCTBtJUDP+bVj6/0+QPoi
e+Wkwj9AN6NyYy12MEBQj/RjrFA0QCCLTWJXaDBAyCiRsK1xMkCBSnTYm1oi
wMJUDoxZgCTAq1IuCpXJM8D5rA5oYy/bvzxsQnHUbkHAhiKI3sRfIUCnd7EJ
7ao8QJkE7QiNvj5AcDLhaXgQRMBYW/nGn3cHQFUasC1kijDAdwGyyPNOHcCR
EeSmbVI5wNV9xc70KxdA+MniIOoVOMCvMdkmoOoPwEtgpzYbZDPAglBTbw3C
4786W4wUh2kdwFc+Q/gJ5PW/4dV983PWB8Cz2STqK6wKwMfuNJ8qMR/Ap5Ip
2W2cAkBLa7SqJtxFwJpOtQBptRfANW1j7SHIQMAW5qkmjiMVwHLFAHZ7vyXA
GQorSmSVMsDA7UhFgcQJQMubbqOA0B5A905gho90MEAcfIFPT7Q5QPWoFBxY
GR7AhF4jmUJqAUCHVlp0
         "]]}, {
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.365248, 0.427802, 0.758297], 
         CapForm["Butt"], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAA7z2O8RD7OEChAfLB7sD4v0LNKLgm
Nz1AOF9NIAgHIUCfb8+EHW41QI81+HJp4zvA23ahrPLFNUDF5ZZgAYpAwM9F
tUbF2DZA6XLLgquQJcD4nXAmnFkwQHKRh7HQcyfAfjY0I3jBKMCHp8Dk8fxC
wOOneS7wFiVAFSZpIxh2QcCLRNj270oyQL5fyG4JoSHAFTSguzLVNEB/eRb5
AxIXwBWc2laYrkRAZ1i2cMQSLcCzDYjp3e8PQDk+/GiJJUDAwoEnDnXnNEDr
/3KzCncpwHwRJdahjTlAdQSE2oTlM8DxwfEkTck1QO2gEJ3WNjjAOmWt817H
GsCJFbaI8EAkwF0hwxe66ydA24n54Ot1IcAvu3NC6/FCQE4A6bp2auO/3e+l
HFOD1z8RiJxbT98mwLHQ5kCiUzVASh04ByZSuj/7hs/TKDosQI+BnZnEzirA
uaXUdsE+PMD/W13xRK43wMFhrL1TGy5APjkvhzzxKsCIp1cPsJVBQABKhCqy
pC1AY8vFD0b6J0A+6qvO9isvwIqHxE8=
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {{0}, {0}}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], LabelStyle -> {FontFamily -> "Times"}, 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Dimensional Reduction of ALL/AML Data\\nUsing Principal \
Component Analysis\"", TraditionalForm], 
     PlotRange -> {{-44.906291052002636`, 
      41.364024025671974`}, {-37.97613200575784, 31.760328619539884`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"ALL\"", "\"AML\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.9, 0.36, 0.054], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.9, 0.36, 0.054], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.365248, 0.427802, 0.758297], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.365248, 0.427802, 0.758297], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Times"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9, 0.36, 0.054], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6000000000000001, 0.24, 0.036000000000000004`],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.9`", ",", "0.36`", ",", "0.054`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9, 0.36, 0.054]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9, 0.36, 0.054], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.365248, 0.427802, 0.758297], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.2434986666666667, 0.28520133333333336`, 
                    0.5055313333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.365248`", ",", "0.427802`", ",", "0.758297`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.365248, 0.427802, 0.758297]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.365248, 0.427802, 0.758297], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"FontFamily", "\[Rule]", "\"Times\""}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.720912893757753*^9, 3.7209129295098743`*^9, {3.720913172247713*^9, 
   3.720913182987508*^9}, 3.7209132278367443`*^9, 3.721744063518317*^9, 
   3.721744134072445*^9, 3.721744416278181*^9, 3.721745201839485*^9, 
   3.7217501569871187`*^9, 3.72175021694033*^9, 3.8315609655184727`*^9},
 ImageSize->{330, 150},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->
  "Out[265]=",ExpressionUUID->"9c1fce81-2171-4df6-a4ab-6a5ff7fb8b7f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"golub2DimensionsTSNE", "=", 
   RowBox[{"DimensionReduce", "[", 
    RowBox[{
     RowBox[{"Keys", "@", "genesAllGolub"}], ",", "2", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<TSNE\>\""}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.720913321693218*^9, 3.720913380210038*^9}, {
   3.720913422091778*^9, 3.720913532258566*^9}, {3.721743927626568*^9, 
   3.721743944771161*^9}, 3.721749927008617*^9, 3.721749976506836*^9},
 CellLabel->
  "In[274]:=",ExpressionUUID->"9f0b704d-1513-4118-b091-37c6f16dc55c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"golubByDiseaseTSNE", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{"golub2DimensionsTSNE", "\[Rule]", 
       RowBox[{"Values", "@", "genesAllGolub"}]}], "]"}], ",", 
     RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "golubByDiseaseTSNE", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "golubByDiseaseTSNE", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
   "PlotLabel", "\[Rule]", " ", "\[IndentingNewLine]", 
    "\"\<Dimensional Reduction of ALL/AML Data\nUsing t-distributed \
Stochastic Neighbor Embedding Algorithm\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.720913321693218*^9, 3.720913380210038*^9}, {
   3.720913422091778*^9, 3.720913532258566*^9}, {3.721743927626568*^9, 
   3.721743944771161*^9}, 3.721749927008617*^9, 3.721749976506836*^9, {
   3.721750064976667*^9, 3.7217500854744473`*^9}},
 CellLabel->
  "In[275]:=",ExpressionUUID->"9f4f8c18-18fa-46cd-a7cc-743a2ee60557"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.9, 0.36, 0.054], 
         CapForm["Butt"], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJwlUktIG1EUfckYNTGxGokFUZmCi3RR2iykDZiaRUHxgyKIgp+EYDXUiv1Q
KVJkunCjXSilC6mLWSh+4xehrjJU3SgoUrQ0NWWIH/wEP9E6prWf3DMDw+G8
d9+55573bnlaKx5rGWN3Yz8hfcdtl/4Y8KsvOWcMhYYmJT+Gku4kSij4Hvwl
5PVjN2iftz9nEmFxn5642BBKJe58NhimOuaPY9CZ0KcAZ+/8I3138sMk4qzK
ewTe/sQIXvQO+nJVkYG4HLkNH+JYtkH1Y9cAzUvox1dY9+Bn17ROOlJdThL6
/+yO0LozN/8SvhsL4qHvtcGffHF2jPWNIPyImT2oc9cGTbQvTPtUf8uOCPZ7
y39D795NzCvcnzxCLvbdZOJimwLf4qLXQtzt86u+R7/LOJ/1KhF6Yg/yEE0B
5MF/bjbDb/r2FfSftmwCBzwzmKd3RSGUWeUJ/Ja8OEde2mszcuh3hYgLysIf
nPugCyI/bg336MwInEInfWETPlrG4zB/18dD1O01Iy++PnAB/S8d0Bf6pqDv
7jCq/tqjP6Bf4Fd1OyfC6jvxGWhf4jYOcM71FXoyN7SPvpmWBOSx6tjBHBpF
g7zKrNuot1slrNe8x3uROkeQl8TmMC97PZeG/lOl33A/w2lG4uzR2y3UF+Yh
Nzn05hR8fj6KfGwOHeps1l+Ye1jDgX9yqVharZX+A14g5GA=
         "]]}, {
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.365248, 0.427802, 0.758297], 
         CapForm["Butt"], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQQKeSIMDiB6rhbDASDdkF7xwx5IO8iI/toPpBO2
n+EDyScc5OMCyT+oXCYE4jfMYP0Dkj+w4x6Yn1Cb/BHEV2CZzwE274krmO+g
0scP4jNoPTwG4jfUtIHNO+C0nxNk3gHhV8xg/bcqwPY/SK5hAavv4gXrX9B5
HGz+g1mR/8HmaR3iAvEXhLsKg9Q7tJfwgu27GPAXbH64BzfYvMK6f2D3L7kG
Vt/w9zYTWP2bZQfA5qySETwAdu/PayD/KjzIEwDLZ/WC/Z9gJgqRX+p+Euwv
kR9g+YYncf9A8gu6wzjA7tcMZQKZ7zDxFDtYf64CxH9qfM9B6g50fWADu+c0
hxBYfkPzJ7D5L5zB7mG4/AIszxB/UegAAFzvcGE=
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {{0}, {0}}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], LabelStyle -> {FontFamily -> "Times"}, 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Dimensional Reduction of ALL/AML Data\\nUsing t-distributed \
Stochastic Neighbor Embedding Algorithm\"", TraditionalForm], 
     PlotRange -> {{-5.3523125648498535`, 
      4.717501640319824}, {-4.8177170753479, 4.746102809906006}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"ALL\"", "\"AML\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.9, 0.36, 0.054], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.9, 0.36, 0.054], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.365248, 0.427802, 0.758297], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.365248, 0.427802, 0.758297], 
                    CapForm["Butt"], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Times"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9, 0.36, 0.054], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6000000000000001, 0.24, 0.036000000000000004`],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.9`", ",", "0.36`", ",", "0.054`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9, 0.36, 0.054]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9, 0.36, 0.054], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.365248, 0.427802, 0.758297], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.2434986666666667, 0.28520133333333336`, 
                    0.5055313333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.365248`", ",", "0.427802`", ",", "0.758297`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.365248, 0.427802, 0.758297]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.365248, 0.427802, 0.758297], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"FontFamily", "\[Rule]", "\"Times\""}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.720913377558753*^9, 3.720913381234201*^9}, 
   3.720913466744475*^9, 3.72091349944119*^9, 3.720913536369038*^9, 
   3.721744063817848*^9, 3.721744144581193*^9, 3.721744416593482*^9, 
   3.721745202331534*^9, 3.72175015731658*^9, 3.7217502174056187`*^9, {
   3.83156097988544*^9, 3.831560991489313*^9}, {3.8315610495087976`*^9, 
   3.8315610530203*^9}},
 CellLabel->
  "Out[276]=",ExpressionUUID->"b4290c9b-77d9-43db-8fb5-ba2592848722"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification", "Section",
 CellChangeTimes->{{3.720912608424761*^9, 
  3.720912610753604*^9}},ExpressionUUID->"babb5ab9-f3ba-4d7e-8a88-\
882238d5bf1f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "3333", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomGolub", "=", 
   RowBox[{"RandomSample", "[", "genesAllGolub", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.720295152797858*^9, 3.720295164395281*^9}, {
   3.720295314497216*^9, 3.720295358135592*^9}, {3.720907055817181*^9, 
   3.7209070709022923`*^9}, {3.720909527932309*^9, 3.720909533923662*^9}, {
   3.720912588063452*^9, 3.720912589619031*^9}, {3.7209145755564957`*^9, 
   3.72091457659377*^9}, {3.720914609647909*^9, 3.7209146104860783`*^9}, 
   3.7217442011759233`*^9},
 CellLabel->
  "In[277]:=",ExpressionUUID->"f9c6ac91-8848-477d-a459-ec712eaeff9b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainGolub", "=", 
   RowBox[{"randomGolub", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "51"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testGolub", "=", 
   RowBox[{"randomGolub", "[", 
    RowBox[{"[", 
     RowBox[{"52", ";;"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7202952317665358`*^9, 3.720295236699635*^9}, {
  3.72029536912582*^9, 3.720295402650655*^9}, {3.720907148024599*^9, 
  3.720907183769063*^9}},
 CellLabel->
  "In[279]:=",ExpressionUUID->"b72fc511-007a-4fc4-851d-e78315f5214a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"golubClassifier", "=", " ", 
   RowBox[{"Classify", "[", 
    RowBox[{"trainGolub", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.720295863976836*^9, 3.720295924358357*^9}, {
   3.720295980300219*^9, 3.72029598948816*^9}, {3.720910660906094*^9, 
   3.72091066856833*^9}, 3.720911580531336*^9, {3.720913724204266*^9, 
   3.720913741972673*^9}, {3.720913784646017*^9, 3.720913788893153*^9}, 
   3.72091383545195*^9, {3.72091445022689*^9, 3.720914456497699*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"fc0a81d6-f16f-4a10-a9e2-195b8ed9aef1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", "golubClassifier"}]], "Input",
 CellChangeTimes->{{3.720913825902323*^9, 3.720913832584638*^9}, 
   3.720914344489389*^9},
 CellLabel->
  "In[282]:=",ExpressionUUID->"d7132f79-2685-4415-aa4e-63d3a9105797"],

Cell[BoxData["ClassifierFunction"], "Output",
 CellChangeTimes->{3.7209138331579514`*^9, 3.720914344878961*^9, 
  3.7209144606075583`*^9, 3.720914585468096*^9, 3.720914618735586*^9, 
  3.7217440648337*^9, 3.7217442079013233`*^9, 3.721744421375654*^9, 
  3.721745207781795*^9, 3.721750162384486*^9, 3.721750222145035*^9, 
  3.831561086441427*^9},
 CellLabel->
  "Out[282]=",ExpressionUUID->"583da4eb-3af4-4ca7-95cd-f07b9079a776"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testGolub", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "5"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{
  3.720296808598095*^9, {3.720914026331595*^9, 3.720914036955926*^9}, 
   3.720914111648376*^9, 3.720914346424734*^9, {3.721744216889229*^9, 
   3.721744219408326*^9}},
 CellLabel->
  "In[283]:=",ExpressionUUID->"735ce9d8-c6dc-4da3-aa44-6e21eeaa85f6"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.3142578252805668`"}], ",", 
     RowBox[{"-", "1.3142578252805668`"}], ",", 
     RowBox[{"-", "1.3142578252805668`"}], ",", 
     RowBox[{"-", "0.7727434232463032`"}], ",", 
     RowBox[{"\[LeftSkeleton]", "3563", "\[RightSkeleton]"}], ",", 
     RowBox[{"-", "1.0164758407198877`"}], ",", "0.6037720162565817`", ",", 
     "0.23874396068225434`", ",", 
     RowBox[{"-", "0.2210221297796484`"}]}], "}"}], "\[Rule]", "\<\"AML\"\>"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{
  3.720296580556226*^9, 3.720296809152946*^9, {3.72091402961279*^9, 
   3.720914037292213*^9}, 3.720914351345845*^9, 3.720914462129527*^9, 
   3.7209145868877487`*^9, 3.720914620450224*^9, 3.7217440649006147`*^9, {
   3.7217442079721403`*^9, 3.721744220125037*^9}, 3.7217444214333982`*^9, 
   3.721745207855485*^9, 3.721750162467298*^9, 3.721750222234617*^9, 
   3.831561087747211*^9},
 CellLabel->
  "Out[283]//Short=",ExpressionUUID->"b2926aba-a6c0-4646-97fd-55b63f01964d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"golubClassifier", "[", 
  RowBox[{"testGolub", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.720914086738277*^9, 3.720914116721356*^9}, 
   3.720914354708359*^9},
 CellLabel->
  "In[284]:=",ExpressionUUID->"3feb4dcd-9b15-42ec-82a2-f0395f251575"],

Cell[BoxData["\<\"AML\"\>"], "Output",
 CellChangeTimes->{{3.720914088244458*^9, 3.720914117273321*^9}, 
   3.720914355420463*^9, 3.720914463831067*^9, 3.720914590311275*^9, 
   3.720914622342359*^9, 3.721744064967155*^9, 3.721744208058173*^9, 
   3.72174442150139*^9, 3.721745207937954*^9, 3.721750162552322*^9, 
   3.721750222334485*^9, 3.831561095408478*^9},
 CellLabel->
  "Out[284]=",ExpressionUUID->"db779aef-631c-4cda-abeb-4b302f75f893"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"golubClassifier", "[", 
  RowBox[{
   RowBox[{"testGolub", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<Properties\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.720913907812648*^9, 3.720913949748217*^9}, 
   3.720914066615196*^9, {3.720914181057077*^9, 3.72091418118454*^9}, 
   3.720914357522128*^9},
 NumberMarks->False,
 CellLabel->
  "In[285]:=",ExpressionUUID->"01f2ed6a-f712-4da5-b482-96b5189112d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Decision\"\>", ",", "\<\"Distribution\"\>", 
   ",", "\<\"ExpectedUtilities\"\>", ",", "\<\"LogProbabilities\"\>", 
   ",", "\<\"Probabilities\"\>", ",", "\<\"Properties\"\>", 
   ",", "\<\"RarerProbability\"\>", ",", "\<\"SHAPValues\"\>", 
   ",", "\<\"TopProbabilities\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.720913921240686*^9, 3.720913950379435*^9}, 
   3.7209140687381372`*^9, 3.720914145125695*^9, 3.720914181571259*^9, 
   3.7209143579401073`*^9, 3.720914466162796*^9, 3.720914592165901*^9, 
   3.7209146239302473`*^9, 3.721744065019643*^9, 3.721744208137442*^9, 
   3.721744421568864*^9, 3.7217452080218773`*^9, 3.721750162652413*^9, 
   3.721750222435976*^9, 3.831561096597973*^9},
 CellLabel->
  "Out[285]=",ExpressionUUID->"400a1d0e-5069-4b84-ab1d-63e7a7204ba6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"golubClassifier", "[", 
  RowBox[{
   RowBox[{"testGolub", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<Probabilities\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.72091396366667*^9, 3.720913973551201*^9}, {
   3.7209141633693027`*^9, 3.7209142102458897`*^9}, 3.7209143598433943`*^9},
 CellLabel->
  "In[286]:=",ExpressionUUID->"466f1684-5252-4af4-af69-2891c1ed5531"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"ALL\"\>", "\[Rule]", "4.241375138911603`*^-16"}], ",", 
   RowBox[{"\<\"AML\"\>", "\[Rule]", "0.9999999999999996`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.720913967229444*^9, 3.720913975038061*^9}, {
   3.7209141675667887`*^9, 3.720914210896592*^9}, 3.7209143603446207`*^9, 
   3.720914468044437*^9, 3.720914593796212*^9, 3.720914626050873*^9, 
   3.721744065083961*^9, 3.721744208237653*^9, 3.72174442164826*^9, 
   3.721745208105402*^9, 3.721750162796979*^9, 3.721750222536084*^9, 
   3.831561111748139*^9},
 CellLabel->
  "Out[286]=",ExpressionUUID->"2c186d46-e88f-4b1a-9cbc-a93daeae12c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"golubClassifier", ",", "testGolub", ",", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.720296934234393*^9, 3.720296985515051*^9}, {
  3.7209142978180523`*^9, 3.720914337930179*^9}, {3.720914369874875*^9, 
  3.7209143848061132`*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"40fec9c0-5b24-433b-892e-766be1a17346"],

Cell[BoxData["0.9523809523809523`"], "Output",
 CellChangeTimes->{{3.7202969754415607`*^9, 3.7202969862200003`*^9}, 
   3.720914385535595*^9, 3.720914471983498*^9, 3.720914597857375*^9, 
   3.720914628676146*^9, 3.7217440652056417`*^9, 3.721744208452944*^9, 
   3.721744421861883*^9, 3.7217452083254223`*^9, 3.721750163012971*^9, 
   3.7217502227528267`*^9, 3.831561127238348*^9},
 CellLabel->
  "Out[287]=",ExpressionUUID->"bf05fdf8-2b46-4d3e-a76f-92e02ad381f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "golubClassifier", ",", "testGolub", ",", "\"\<ConfusionMatrix\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.720296934234393*^9, 3.720296985515051*^9}, {
  3.7202970507337*^9, 3.7202970536291*^9}, {3.720297374818345*^9, 
  3.72029738954698*^9}, {3.720914502847309*^9, 3.720914533999004*^9}},
 CellLabel->
  "In[288]:=",ExpressionUUID->"738e0ec5-190d-4aab-b1c8-510087ac1d21"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "6", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.720297054234769*^9, {3.720297377492043*^9, 3.72029739021903*^9}, 
   3.720914534937661*^9, {3.720914601693199*^9, 3.720914630555735*^9}, 
   3.7217440652889843`*^9, 3.721744208678192*^9, 3.721744422081421*^9, 
   3.7217452085497932`*^9, 3.72175016323141*^9, 3.7217502229742117`*^9, 
   3.831561133416198*^9},
 CellLabel->
  "Out[288]=",ExpressionUUID->"b2a727de-cbbd-4f03-b4f6-a67342ea5507"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "golubClassifier", ",", "testGolub", ",", "\"\<ConfusionMatrixPlot\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.720296934234393*^9, 3.720296985515051*^9}, {
  3.7202970507337*^9, 3.720297065367021*^9}, {3.720297183273781*^9, 
  3.72029730595408*^9}, {3.720297397194706*^9, 3.720297398135745*^9}, {
  3.7209145505216846`*^9, 3.720914566341072*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"0e2cbd80-14f3-4e97-9a54-ae7cd05d6bf7"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {0.8791747554233074, 0.6416219389623273, 
   0.16977173878244967`}}, {{1., 0.42, 0.}, {0.9305763717792014, 
   0.8561103451273806, 0.6331154051204777}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["14", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "14", "\" examples of \"", "\"ALL\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9333333333333333`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9655172413793104`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{14, " examples of ", "ALL", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 0.9333333333333333}], 
         Row[{"FScore = ", 0.9655172413793104}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"AML\"", "\" misclassified as \"", 
             "\"ALL\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "AML", " misclassified as ", "ALL"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"ALL\"", "\" misclassified as \"", 
             "\"AML\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14285714285714285`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.06666666666666667`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "ALL", " misclassified as ", "AML"}], 
         Row[{"Column fraction = ", 0.14285714285714285`}], 
         Row[{"Row fraction = ", 0.06666666666666667}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"AML\"", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "AML", " correctly classified"}], 
         Row[{"Precision = ", 0.8571428571428571}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "15", "\" example\"", "\"s\"", "\" of class \"", "\"ALL\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9333333333333333`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{15, " example", "s", " of class ", "ALL"}], 
        Row[{"Recall = ", 0.9333333333333333}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "6", "\" example\"", "\"s\"", "\" of class \"", "\"AML\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{6, " example", "s", " of class ", "AML"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "14", "\" example\"", "\"s\"", "\" classified as \"", "\"ALL\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{14, " example", "s", " classified as ", "ALL"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" classified as \"", "\"AML\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " classified as ", "AML"}], 
        Row[{"Precision = ", 0.8571428571428571}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"ALL\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"AML\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["15", TraditionalForm]}, {0.5, 
       FormBox["6", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["14", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["7", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"ALL\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"AML\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->181.2,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.720297218256145*^9, 3.720297307222332*^9}, 
   3.720297398694873*^9, {3.7209145624390707`*^9, 3.720914567003635*^9}, {
   3.720914604337064*^9, 3.72091463280401*^9}, 3.721744065371636*^9, 
   3.721744209152029*^9, 3.721744422338558*^9, 3.7217452088102016`*^9, 
   3.721750163574108*^9, 3.721750223233735*^9, 3.831561140667879*^9},
 CellLabel->
  "Out[289]=",ExpressionUUID->"62388e88-9b6e-48d3-82f3-f164bf26c867"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Iris Data Classified Across Methods", "Section",
 CellChangeTimes->{{3.720291298968231*^9, 3.7202913089121103`*^9}, {
  3.7202971230059853`*^9, 
  3.720297140856202*^9}},ExpressionUUID->"c3e63878-b2fc-42b6-9425-\
eb411103f028"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", "\"\<MachineLearning\>\"", "]"}]], "Input",
 CellLabel->
  "In[290]:=",ExpressionUUID->"37f7f79b-6197-45ee-95d5-f132effdb422"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"BostonHomes\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"FisherIris\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"MNIST\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"MovieReview\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"Mushroom\"\>"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"Satellite\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"Titanic\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"UCILetter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"WineQuality\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7202920627344723`*^9, 3.720292094525632*^9, 
  3.721744066086369*^9, 3.721744422987671*^9, 3.7217452094361477`*^9, 
  3.7217501642696943`*^9, 3.72175022396404*^9, 3.831561171252228*^9},
 CellLabel->
  "Out[290]=",ExpressionUUID->"f1e3bbe8-f065-4605-8a84-d4f5e718c752"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
   ",", "\"\<Properties\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.720291320354249*^9, 3.720291416177327*^9}, {
  3.7202920751927137`*^9, 3.7202921210457697`*^9}},
 CellLabel->
  "In[291]:=",ExpressionUUID->"208298d0-a7ed-4c21-bb85-3f926bd60b01"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Data\"\>", ",", "\<\"Description\"\>", ",", "\<\"Data\"\>", 
   ",", "\<\"Dimensions\"\>", ",", "\<\"LearningTask\"\>", 
   ",", "\<\"LongDescription\"\>", ",", "\<\"MissingData\"\>", 
   ",", "\<\"Name\"\>", ",", "\<\"Source\"\>", ",", "\<\"TestData\"\>", 
   ",", "\<\"TrainingData\"\>", ",", "\<\"VariableDescriptions\"\>", 
   ",", "\<\"VariableTypes\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7202921216236067`*^9, 3.72174406615184*^9, 
  3.721744423044063*^9, 3.7217452095061007`*^9, 3.721750164368746*^9, 
  3.7217502240520163`*^9, 3.831561171440341*^9},
 CellLabel->
  "Out[291]=",ExpressionUUID->"fec2aa2e-5688-45eb-9608-7874a03cf20b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
   ",", "\"\<Source\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7202915461333647`*^9, 3.72029155469352*^9}, 
   3.72029213876649*^9},
 CellLabel->
  "In[292]:=",ExpressionUUID->"9ac6749b-a5a0-488f-93b5-ad4c680b7dd0"],

Cell[BoxData["\<\"Fisher,R.A. \\\"The use of multiple measurements in \
taxonomic problems\\\" Annual Eugenics, 7, Part II, 179-188 (1936); \\nalso \
in \\\"Contributions to Mathematical Statistics\\\" (John Wiley, NY, 1950). \
\"\>"], "Output",
 CellChangeTimes->{{3.720291547550109*^9, 3.720291554984832*^9}, 
   3.720292140103148*^9, 3.721744066285076*^9, 3.721744423116521*^9, 
   3.7217452095729227`*^9, 3.721750164436318*^9, 3.721750224136999*^9, 
   3.831561171565618*^9},
 CellLabel->
  "Out[292]=",ExpressionUUID->"a87e18e7-29e7-4172-a5a3-05ed75c1d1ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
   ",", "\"\<LongDescription\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.720292162008459*^9, 3.7202921698141623`*^9}},
 CellLabel->
  "In[293]:=",ExpressionUUID->"e2da36e1-f709-48ef-941f-fee7aa2c3725"],

Cell[BoxData["\<\"\\tThe data set consists of 50 samples from each of three \
species of iris flowers (setosa, versicolor and virginica). Four features \
were measured from each flower, \\n\\tthe length and the width of the sepal \
and petal.\\n\\n\\tThe test and training sets were constructed by stratified \
random sampling, using 30% of the data for the test set and the rest for the \
training set.\"\>"], "Output",
 CellChangeTimes->{{3.720292163264064*^9, 3.720292170220056*^9}, 
   3.721744066352091*^9, 3.721744423182344*^9, 3.721745209636447*^9, 
   3.721750164503029*^9, 3.721750224220298*^9, 3.831561176771929*^9},
 CellLabel->
  "Out[293]=",ExpressionUUID->"8e674596-b604-491f-8006-1d2da55b5ca8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
   ",", "\"\<Dimensions\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7202915461333647`*^9, 3.72029155469352*^9}, {
   3.720291597330969*^9, 3.720291599698011*^9}, 3.7202922028928003`*^9},
 CellLabel->
  "In[294]:=",ExpressionUUID->"ea260498-47f1-4bba-b708-3745f1a129d9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NumberClasses\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"NumberFeatures\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"NumberExamples\"\>", "\[Rule]", "150"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.7202916001285477`*^9, 3.720292153927156*^9, {3.720292193900436*^9, 
   3.720292203955687*^9}, 3.721744066418336*^9, 3.721744423249433*^9, 
   3.721745209707808*^9, 3.721750164570055*^9, 3.721750224303705*^9, 
   3.831561178297171*^9},
 CellLabel->
  "Out[294]=",ExpressionUUID->"451d8b40-c13c-4ea2-b3bf-7e579a004647"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Iris", "WolframAlphaLong",
 CellChangeTimes->{{3.720291785719426*^9, 3.720291813321268*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"f42f8e14-039c-406d-b1c2-6294d4ade54a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Iris", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Entity[\"Plant\", \"Family:Iridaceae\"]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               TemplateBox[{
                 TagBox[
                  TagBox["\"iris family\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Iridaceae"}]], Identity], 
                 "\"  \"", 
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"plant\"", "\[NoBreak]", 
                    "\")\""}], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Scientific name", "scanner" -> "Data", "id" -> 
     "ScientificName:PlantData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlantData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CatalogueOfLife"}], "\n    ", 
         XMLElement["datasource", {}, {"PLANTSDatabase"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Plant\", \"Family:Iridaceae\"][EntityProperty[\"Plant\", \
\"ScientificName\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox["\"Iridaceae\"", 
               $CellContext`TagBoxWrapper[
               "Entity" -> {PlantData, "Family:Iridaceae"}]], Identity], {
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Image", "scanner" -> "Data", "id" -> "Image:PlantData",
      "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "imagesource", {}, {
        "http://en.wikipedia.org/wiki/File:Iris_versicolor_3.jpg"}], 
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"PlantData"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Plant\", \"Family:Iridaceae\"][EntityProperty[\"Plant\", \
\"Image\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1: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
/Ebll6dLP2zU/bjS92VyRnV6dU7lcF7rUkn9dHZBW2re8cKyiv6M2JHSmHPN
wfs9vkdD1r1x/d68/uGS9eW0/4sB/7vz9X87WfR8tObO0tidwdGFhoHmwu6M
jjMnxu82pPXZnScQf4O0aDq640xuWr1Z52cQJYAsxSAOsjNLklyjilQp5VFY
kR3H1sNUYpy/Xbu4V9F6LjBwM3lyu3jyzvGS0Wi+D9BMgKIH4iimOiwUeehs
M45pxkAQ2Q4CLIYVS9YCLvzVhGXqYREhcGwDjSYC0E/yDTS1X6gOCoVuBtuK
59hIbDOBrsUTUIBhQucGmBwqh8tgs2gMNoHNJXB4ZDYDjzDJFpk41mwM6TQa
OlHDwNql5CgLy2TCWbyE2r7QnbeTywfVJ5/WLz1uXTjoWng4uHAwMrs7OLPd
t/xwACaL0/tDixc6BCqMXMUWIsxQtDcx7LGZJW6XQqflMjhApWM6o8R6K1tu
IkkNBJEJK7eTlD6qLsiyJvJhxo8qlQarxPXr4ZbTgdZT3qFT5dW1I2ONh0u1
3y4UfLGc/els0sNL5V+eTHtzufKPy7k/1Af2GxN2BwsejRUeNMVdzFHPjaS/
LFRfqdDvdkZ91mR50qQ7aNPsdcj3htSH3ZL9SefLYdv+XPhwNf2LtZy/XSr6
ca7u1frs7bHFxqHTeeM3KoZvVRRNx9gq2ME2btPZYMtqWJ9I4ugJOARw9Rhj
DDOUL04/blb72UI7SRwF6hai5/ZT2i/Y+2+m917NG35QtnLYFV9jFDoIGi9f
6xTqXCJES0JtJLoB0K3Q2GAhdhQNoKmJTJhH7DQoiHwPFRYkVfgapidABVge
DJtMqQdV+sXKIHpU0XyxgykwUSQmFjQqCg1XImdAS0+EboEBGCwMnQE4LJxS
xDLK+XohS0oHYjKQsYFBhlcpMToTPpJv6JjJuf1+dv5Bw8Zh3+qj3pmdjpOP
h2A2XHkyvLjft/5w5OzDsasP5+t7c4Qwy/CAUstwx4q1TropmiOzEugyIHcQ
nEkILHuE405HvLnCYJE8XKlMqtGlNZozWmzxDWooQxk96sGr6b1b8X0LFYU5
3YPlT6YKvpiOfJyIfTYRfbCe8XY24eWpvF9Np309nPaqI27vYtuPEzkvinWb
zVH3ZrM/FCsv15p3eqJeNpv2m3U7XbqHvZrHQ9qnnZKdUdPTIdPhnO+rpdBX
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
K1MGZYpoidQnRJ08vo0NIaAjWK6EyJeRaSgGxwIEDmCIcCIdS2kVGJwynV0i
VnFoXCyWfLR/BoMBZAIgETEcNk0qQ/k8JpdLNhuldDIg4mDkB3IV3hcSphQY
j9X6KruiawY9XQuh+jH/wo0TN9/NLu10zG53rDwdXDrsX3jUPXfQubDXvXk4
cvJB3423q5sHAy3LsXVz9uZlT8OC88SkpXRYl9+nrpywFg0aSkfM5eMOWKWj
9qIhS36/8VgfpFlzfL04WCsVhYE5F+tKR9bPXfzmzX+7Nff9TMGLRuvdE+I7
VeKddv3rBtXTdsvbGs2LFteLfP1SdXj1m4N/313/u2zDVgr/So32bYvqQ5/h
LZzBdsVBu/JFLfqqWfVllfLlSPyX52u+Xat8PJi11ZNzpqfgynDD1bq6LktA
SdcBeRjYckTaVFZsraj3UkbLmRTfcUHZTLBlM9uUzxYn4lzlAn4YBBuQ2lP+
0gVj1oj4xJqp+bynYctaPmfgugDqAamNtqwuv7tUwYvGC/zkoyAvBng+oAoB
R0FkyvEwmxDlR9vzSBIsXU7mKGlsBZUuIZJRLEfAYnBpDITKETEZCBFPP1oJ
JXMAIqfAkhlYOgeqsfCESjIiI0hVDIggEQsIeCyfxzFqdUqxVCLguUx6hYAh
YEF3CgxGcnqhuXEw0jqX3jgTbpq0tkzb68fd7YuR5QedF17Prz+dnNnuWXjS
O7ndvPy0e3G/6+R+/6m9idUHU3c+25i9XdK65qudt52YNpVN6GFBLi0a1ucO
qDO7lamdipQOeXyLJFiHRNfwYmtRdzHdXczWZZDEiUCaAmTx4FhN4dvXP33/
yX+/Pvz9UNKTStnNUuROlehRCXfnuOxpufKwPfy6v/DGm/s//a//8z9WRvdS
zfOJwvNV2jcNiveQM1sl263yu+3qg+OCp3Xq19Pp3y4UfblY9r4j+e6JmAu1
6evFWfUZOfHOJIEtncVxA4YTmLIZ1mM0VxGtYMg2ce9E+WxsUpuu7Uxu8WSc
rQhVZZDhGGYN6Zq3YnLGpHmT0vozjiMzs2VL70bU8cCVJYo02tK7vP4qjSEH
EYZIOCUAgqOAQBEApvAonjOkBJIcC7gAOhYSF8MSU9gSKlNAonCw8DOQOSGX
QjJkCYhHSkfDEfAA5bPCMVFSERvhkaB1UajoOgPHYuGpZRQ5SpDyKTopEnQ6
DDI5HYuzqlUes0YjYUv4mGi3uKzQ396UPjZUODSQ2zec2zOc1TeW0dQV2zwQ
d/5e+87nM6vbjcsHrdCUzuy1n3w+OvWgd/XJ9PrTxdOP52+/Xm6bTk2pkkdO
yOLLlP48kTeb588RROco/KkaGJf0dlRvoyu1OI2OYbKz1VE4qQ8YQ3y1hyOz
UdQ2msbOPHVm/sXTb1/s/XTz3PvJrt3BqpcjtW/vbfx8f+vH5ZGnZxZfXTrz
7NuPf/nis9+tTu9W5Vydb//u/sl/aojfyVPfrzZ92mx7W4TcaNbd38z7ZiHv
zXHvmaLAXNhd7Q+lx+TECH0Urhfw3EAaAGIflqU/Woxw54qUSThtGjZ/xDx1
p6xuIf34eEL7ehqE1ZJH9deglWvRhUvG+GFK+Yam5oy/dj2mZs2jyTjayBSq
loeKJLEZouIKt8vFYvMAlQ2w7KNxw8nwsKgqEkWIOeJGFIb3v/pVBqAIcTQx
iYziRRIxjUHHHd1jwXM4JDYHx2YCDhuIRXivR+5wSQUoQSSnao2oVMNT6/hG
A89hRo1qrlLM9Np0LrNWwqWZlKhOyrBo2BYtNSlWWXLMlZGsTY6RpiaqU9OM
8SnqSKYuIU3ujefmnbAsXK69925+Ybt5/dnAytP+md3ujVfTs9sDK48nTh9O
X/5kemW7ObVJ6i1g+AuUUj+doQc4EeAascZomcQg4opZWNrRrVQ6B/I/0Ebj
9CGKyEqHbCM2UXVOps5FyytK+Pabn188/M37l//47vE/vNz50/tH//Tj5//3
271/eb/3/9xe/9PS4OuR1luP7/3QWbc+3nnj091/uLX+ze3lH6+O/rHAcqXY
fOVC009n677qTrl6zDuUHWotLqwJp8cYw2JdIlccS9VEeGQTwGkAyw4QH1Ak
Y8zHuNIkOj8G6ypmN68lj14uq5+PtG2kl09GOcsYJbPuExve3DlF9oK4YlNf
c9ZbtepO6kDRMIA+x1MskEUBXRQ2p8iSkqaRqbEsIeCpCVw9laoj4hUASABG
BFhKAFsUix5thkTMGF2Qo/azxQ6y2abl8GlHa/EwFJKOlh7IlKPVB5WG6fLI
OQhAJXiNkcPgAp4ErzPzZVKSQctRK5gSIcVtVUa79To5UyelIQxgUZEdWnJK
jOx4rjvJJzaIgFaMgZ3AF2IEQsBFAJEBUDUobYm98mT6xruFyVtNp1+Ow1ix
sN+38nho5dHI2uO+1WfNFz5vaT5jD9XTEuvMea2pOfXZSUVxKq/Q5JcLtUKh
QshGWQwegYUCvhIo3UBsA2QB4CqYRp9EbWMYvWyDVTA2Pn376qs7l7/98OIf
Pn365bVzt7/65DcPzn17cfKntY6fFlt/GKx8uTb89tnd3/z47R/uXNnevfH2
0e1f3j373fmZzz8/+Pe1wRc5/rZEX67RqYvNdTRNFzcvFvor5NCZ8GMBw3e0
OIjVAaAELCdGm46YCySqHIalmKNIxQSOo71bGaNXCmsXEprXUyNdkpJF44nT
1owptHTDULFhrj1jr1g0m/IAEgTyCNaYxSKqAGIA/mRhaq5R56AK1ICuBETF
UY4g6I92mDPMQOInaUJMkQePurCqaLouli1yEpk6UD3kyKiR+dKpxiBRZoUE
C3BwSElAKGVabEoeQrJYxdnZPoOBxuYAuQJodCwYCUUoGUXIZr3Ya1cbVByt
hKoU4iwKipIPrFJcxCfPiNaGzCKDiI7ySBweEfYGBguwRIBIQFSivLQl7ubr
lbXdwaXd7s0XY9P3W9YPByF8y3sw6U+cOpy+9Haqajwvq+LExNyDuelPpocP
Z8ce9LedP567khWazE+ZD3tbnKZMFFFCpZaYyGwpnsLHoUqaUEW3eOQ8MTU1
I+HShbvL0092r/34xdtf7dza//zFL7fPfRwq311p/K417UVf/qdLHV99/ez/
+M23P758+ujsqbunV/bv3fjwdP+XY8PnVAqv0epANFRh9BHRaTLxBaP+ydu1
RaN+QyZOkQQ0SVh9MlMYTUGiaPoMqT5bIEkHlhKqKYdizCKmdyqn7pb0Xsiv
Xk44vuIoWlaUbSjSZzllm+bKTWvNaUveuEybArTJBHuhyJTFF3iBMopkiKb5
k0XBFLkjjBgCLKEDJ4oiapO5+nQe/Iwxna0M09VhhG+n0bR4khIL/ro/uWCB
WrTAyp/h5A0jaZ1ofDXqy+Hb4rk6L8Ps4UfS7Wo11WHj56a7RHzAY4CoaI3N
oRKJ6SwGRiJk2Q0Ku0GmFNA9ZkmUSaQXEYUkIKaAWJOkIOT26+UGFSKXc+lU
QCYCtYrhcIm0FrrEgKsZzHzw4fTK3uDG09HTL0fndtqX99tXDvqW96eXt6fu
f9havDDf1rY+2HzYUfR8pPzDROXhme6vb0/+ea3lV482/v3O0p+3pr6ozBoR
CrQEEhaVUKVKlkTB4SJMhUqu1Eg1el5Dfe3c6IOFgWfXNj7/ZOd3n2z/+Nne
n15f//3jzT/O1XzWnn6w3PLV1uiHzx59991nP/zw5X9/svu7gZ6t+9sfQkm5
SovBGKOg6YA0Huc7jkojgOUF/hJm52pm11KJKU7Is+LVMRxTCtOUSjFkEmBp
U0mSEFAnk6y5DH0mKByxjN+qKJn2lixpT2xpj63y8laRklP66i039KKhBoYm
EVjTeZ4yJbQu8liqKoaGmoHchk0vdWSWOCxwxKwAsQFpNEEag5XE4sRhDM8L
6KajJzuACOCkAC8BBClwt4OYAZA0iouM4jOmaMWLgsolacWMvKBfklqLVPW7
zNE4Gh+EE9R+vwzhA62eabDwUSGRRAY8NsltM/jdVgGDqJPyoszysFtrV3EE
RGCR0LKC1qBNplEyJGIinwcMOnZSgjkhwQTth1SPN8cK+lZO3Pt4eu1g+PSz
0dWH/fP3Wzae9kKHc+Zpz9p22439U9cvPe6puNISubpU8Xoq/8FG1fNLrV8N
Z26faXu32vJ8b/0XV+fe+A3FQobNpLWoZGIWk8rlsMRiodUO2wzNzU6YHDgz
3/uwv2r/wam//PrT/+9PH//X7z/8z3/6+j+uT3/XmnHj2tRPZwe/urP65YOz
35yf+/R4zsLi1M7y8l1PMJmnQJRejj7EsqaLVGEmywKO1sQlUK3otf0Zg6u1
CaVmGMDJBmBKoxsiJE08sGfSZAGgjMdAS6NLx9iOkY6NWnPH9Pmz0uI1afYS
s+SMuGRDWXfelT+l1WUA+GFzMt+SLSabAcsBBG4MSwcQPYDwHav0ZhZYgxGZ
M8Q1BZlyL07kxahCVGMKV+Inoh6sNIqkDB7ttZBGUSJ9oki/MLGXFd9NTewn
pI4QMyaImePEshX+8ZPiygVZxaQ6XE2Pr+DntRndEYbKBox2slgBODwgFFGi
fdakcLSEz+RQsdCLBl3K5FiD18yxaykJUeL4gFShAFIZMFto6Wmm4gJvQrwq
yo+GIxpLkAcN5OTl1rXd4bVHI1svp5a2u9YfDy4/Gtx8Pjt/dfzGg53b57/p
zt/uSj5YLf5uOvLpSvZXF0/87YXqn651/na27JMzXb+4OvGHjb5vNkc+rAxv
5ydVGxTWSHxsRrovMVGfnm6LJHoqCitOTd6bbn5xY/ZPP774j4/b//bjJ//v
4eU/zTQeLLY+P937frP74+2Zn1c73/WUnfv6+b9cXfvk/tV3blecyW42+RRC
A9EYRkMFDp6OBu2fyMCmS6CnAgVd3s7TubHVSm4AyJNYulS+PJZoSMCrYoAp
nSoNY2y5PEMG2VwI8ibk5ev6jFle5iKzaFNYelZWuWGMaxUjXiD0AFuqGKZ4
xI9nOIAwCi9x4+UOQlSiGHq/7BxrVpY5JcOQmKb1JUiUTgrfghG5yTwzYBsA
1wQ4RkBRApIcWHPwtlyct4Ke3CbMHlXAwJIxIcic4iUMkbJm2enTlPyT3IYr
msoz4mNLrOpV9bEGeVqezOalqo1ElYYR5TdkpMVajQqEQ+AzgQzFhKPlaYnK
KCc91s/KyVQbLcDuIqamq2prY8tKXIEA4o8WZOXbYzI0SjdVHk1bvN1768PG
6v7QxuMROIlT+23TOz3nHp++cn93Yeygt2S7L31vNOXZcvbHjfzvl3O+PlX6
zWrVu5nyw5mq94sNv1hr+82Z3p/urfzx3ua3ndVDWZEYj4fhj6Yb9FSFiFaY
nbS1cHGt7+Xpvm/PDX5+e/GHm0t/2N74x/H6xxM1e1env1vveH9l8O+ujf68
d+b72uzBB+ferk3esup8Ho+PzaPCgIzjYxE9T+0WiowUlgIIzViJj8z34uIa
bb03TqSNusQZwFLIduWLjEkCfRwCGU+dTBYG8OJYoMoEWaNowaIiZZKTtQRZ
lFe6Jc5fFDtKmCwbELtw0fka1E9QR1hHCPoIch9JbMHAACiSAQEP6FW4aC+a
lWnLK/J7YmVs1REJMFW4o62hOipqYQvMHMTEpuiAJSJwZcoVPpI5nqULYgI5
lNIuWf2svHSUXjJNzp8ip48TM2e4WQvSvJPysjOymvPKqg1V3jCa3MhNq5JE
ihVxaTKTmeywMMMBaVy0JDlG7DBgQ15Kfo4KXsyMdFlzlbciR+szEqI8/NTC
YHxpfExZKKE6DJvKkcRdvdF+9XDq8ovFhd2hlRcjJ5+Mr92dvnL93sWZL9uT
9vqTHnfH3JvN21kvfzGd+2ap8LvxzHcLBV8tFHw+e+zdRtM35zq/P9f57bWx
r68tvDTIfDKtjKOkSWw8k1fjdfgebD29MvV6pfXF5bHv7y79fvfMn+8s/7TW
9XGz84sz7Z9d6f/6bNdXV4Z/rEu52VNx9+X+bysr6hQaLk+CE0iZAAdwhKOl
bb1dpHeLTWGZKVliz5NpMxiqLEKgDu24mNa4HvaW0XQRoAwDcQDAgCBLpPMs
JKkXm9rMKJxmJYySkueYmau8Y6vsyhVGdjdZFQIcK0aVxrLmilArAaY8DAtg
WQDHI5NQOgElAc7RPisiCkMfkBlBSpaxrj6Snx902hVUOulo6ycRQ+ZS8FwM
XUIOVXCkfgDdSzBHJrIQ4J8wJUCgxen9jPhCRX6H/viUqWpJWziLQGrNmqRF
RrlpY4LiFXntGXXTWWXPJUPHaUPJAFI3ai5p0meWq8KpwtiIWAMDiwV4Yuie
EDmYyMnN1CcHFXol1euV5laH89sjWV2R0PGotJoEW7wyKlN788XC2cPejWed
k3uN688m1m5Nb21dn2t/2hS+P535djz5cCTl3nzeUwjZqYpfj2e9mcp+N5P3
diLr5XrDN1vtf7Na/+FC/xf31j5W5neIFDKtR6nzKwQqjllnvTB/98Hax2sT
X92e+/W95Z8Pr/7zg/W/PdP75Vb319dGf3lr7JcX+r+6MfmLM8Mfzky9eHrw
RVFRkUjJFMhoQpkIR8aojCSFGThDHKhHmmgGzwZEPrwkQNKmspgu4CxS1C3k
184V+grNXCdVHseHqVCaSIK6posQ07pZWRPUyCwjaZ6ZOEst3hBXrQqjSoEs
CBAX0KRxlQnco9ssVIDjHN14oUgwVCmWLsfDIxkFRP7RPRmOGAjlWJ2RFpek
LimPUVvoVOToeSuFnaH0wa/EiavgaGJBXIkkUmJQOxnQjZMYGDbConNoOosC
JixPsjCpXFAxpOy/4GjbkjdfkpSs0o/N09LHqHHduJwpQeM5R+slT+NZc+Om
uW5NXzWrPTFtTa4WODMozjSmL4NjjaU5giyLi6EwYF0hUWp1dGpDXFZnZl5P
YV5LYXoVzPzSuHLDxZc9F950nnzSvPF46Or+mSsXtqfqDgbTno0kvxpPetUT
e3cwaXcm9/2Zmt9OZL8dSXs+l/92OvfVmZZfbzT+zcWeX57r/eLKzLsrG4c5
xWWuBC9q4smNsvqa9ntbLw7OfXtz7sv7Kz89v/yvz6/+/f7pn+8t/u7WxG/v
TP/26tDXF0c+uzz5ydXVl6szl3u7e1QagVjFkShFFJrQbs9w2PID/qqcrP7y
0qmysrFAsFhnjVXbXDyNUOERi70MYzL/+GSkdS3XXSxge4E4nsAPAmEIBOpY
acP8+EEixC5pjpa7hhatyPPHxepkoIwDyhBOn4miPhZVQibzCGQEQxMBsghQ
xEc7kOlSDE2IJ3JwJC4eJl8iExBpQKwEUXH81BKzOyK0J/Dt8QJVFEPiJOn8
DGhiNV5SdJrIFmKafTS+HCj1dL1JoFDxhFKayY5qbGRPHKN5ONg86WtYtDWt
WZvPGlsvmRrOq4qWudDBZs/wcuYkVaedzZdj2i/Fdl+PaT5jhUaoeklWOqFM
rOG4s4mqABBYgCVOk9NwrGKwDsKX0pZYNJZYNhGf0myFSadysOD849Wzz0fm
rnVcuXd56+TOSPn2YvHHdt/+cOyL3tj9jsD2eMYnp2t+PZnzZijlcLnk/WLR
u7OtP67Xf3el94etzo+XJj/uXvt+fvVcZsUxd8SdlJNycevezoW3b+7+9s3N
v3t64U8HZ//04urf7az96unZv+yt/PH+3E/XJ7+9NPGyp3KuuqjBYtBi8UCu
5mn0CocjMDZw4crpr1YnP55f+Ony0s8Ptv7Ls+v/4876Xy7M/mJr7uvpvp2K
wsmiwr78ktbskpq20anO6elQfroiIGfYgDYbJPfx4oYZUQO44DgmeZ6etyIu
WzaWTTtMGThRABoesj1Pzncz6XIyjn10lwzHA0QBoEGlkx091ciSkqkInsA+
egICVZDVFrbRwTzavRAUGEIitV/IUBGPFgSZICrFBEGHwdCdzPVGmDrYRdDn
yIArwDU5OQoN1R/U6Y1sDB5YnazjjTEnur25DVpLhOjIZFaORbeuJdatOQdu
+mq3RMc3GQVLoHCJXHtaMXg7YfRWfv/lY6O38rovJjZtegvG1DE19JgqUX53
7Inx4pKBsrTW3Nz+/MLRgoyu5OyOZHeWoW688NqrhRuPT928ub8+9qg/5x6k
zaHQ896op/2hZ82eB0ORZ6dOfD9X8AHO4FLxh5m8T5ervt5q/9V85XM4TQ9W
f3du6c3q6RudE4NVPTVdo4NPDr64f+6zzw9+/vrRP728/vePLv759e2/v7Hw
1cOzPz86/ceHm394dvmPl+Yf+c1hm1lns0tVei6WAMRC3fTI5Ud3frqx/u3N
5a/2T//22tTXl0e+uzX1u3vTf9mf/+eDhf+yt/zPeyv/9Ojsv7659z8f3/yv
q1NfTw28WVl6k1PUoI1ReSr40Z10dw8xeozsHQbpi6y4fmrZgrXnfF5Wl43t
AzD1W7PlCCQ9J52nJyI6msSMSE1CsV4o1PDYEiqJd7Tkh6rxEj1ZaeNAFVZY
EK6SQpYCmppAluIA5a+L8mTgSRU4k3kMFdAHCdHZiMoHUBNgygGqB9GJSp2d
ZbRyXFFCOgtwuCAp3dA5ml/eFiezYzA8YAoT4wpFnixa9DFGzYSned4/cCFp
7FpK+Yy2ZEp+Yllbf8rccSm6+1r8yHbWxN6xgbtpnZfiW9cD1bPRx6eSjs8W
p3bn5wxXZ/aVRppT0xp8nkxJ92zp7uO7VzZfbfS9G8t/Op728mzpDwOB50Oh
V82enYHkRysVH1fKvx5Newl1cDDydPnEF5d7fr1Y9fjF6T9fn/3VxZNfXLn1
pGd6rHmic/Pq5a8+/v3bh7///pN/ePvgdw8v/u7D/v/16NLvb6999+rmnz+5
9ZfD679/v/+XzbkbUkTmdGmsDqlGK9WpbUPtW4+v/3x64g3k26tj37068687
M7+/OfSbC23fXev5cXvsD7f6f317+JdPVv64v/zDrdkvb859vLX0xb31b68t
v7+y8ba5fTirPeSsZ1k78bEzdN8giEwyEroY8U382sX4nq08VznTeoyORlN4
DgpDD+gqAO0lTUzCMDBHDxzRMQQG4EhwiBIrMRFVDvrRo3BCDJRLCNnR3mw5
wPABFFA8DxD4gG0EgWOoLkwS2IE9gir9NJg7YOggSYErSeSIFxg8DE+cyGBn
0LmAIQTJlezSPnVCmURqJejd8vjUeF/QK1EhoVSrzAb7gdy5HO47FzdxK334
ZlrblhfOY81pzfEz0Y0Xjw3cbjq6BbrbMnu7ePByfP2mq/5KuHA1WLySldKV
lNueHSlJsAWN46MLi32H89XvF0s+TKW8vFD+64XUzwdjn7f6dnoTt2cLX65V
fjuW/noq+31/4pNzbb8+2/bFjZEvXm394czgx/1rP+88/FDV2dI1P7D38uXH
z/7+u7f/9udf/I+vn/9l/+JvXt//tzubP7y8909fHf63j0/+5e3Bn94/+Xli
cFkulUUHrdGx9mB00tz49ac3/3x37Xf/P0lvGdVWu3UNb1ySQCBuJCEhBIIm
AUKQ4O4uheLuxbUtFCta3N1KS4FSaEtxKO5OS6neft/nPOc5j3wyvvNtzjvG
Ghn7Rwb8mGPONefOutY13fy5JWOpK299qvq6O2e7LW2rImK2OWVz8P55Y9La
06Lzxbbfe/O2WtOWZ57cTFZ+6Mvf6X9wPNnwc3v16p17oewgskayNDdHhJch
bJIqaRYjx7QFBKG4hHr7oDIj0yhlmAboSKWkaIAYHhDB3qro7cgZ5Pa8LUYB
SmEi5PFikkgAghECXY0IiBdGSJYmLY4HhFC3B0PEUIA0HpBAAQgWQOAIqVnh
bk98mOEoBvJkPkxOHQALqQ6omkppmcnT2BBFVXkCFSFHECboATZRZK9EHU0z
lDIb6eQusHM0RGPE3L2NsWQAp3I7CW/oSzYLU/Z/aB5f55XWFpLVE5LS7xzW
yrtTrxzZqJbeZpzXYVcyFFg4GpbQ6x3T7x3R6R7e5OKVaRCS4SCw04+LzK9M
X33gt1but1Fg9SbLcALM8hlG0/G8Z0km/dkOL0AO5touPHR+n2s3151+VRY8
M/RwvT1rtqtwb7znY23T0J3YsOTijJX9/dXFbxuzv16s/77+6nqs9fTNwG/9
DWfrb/57bea35VdfNud+rLy+iI/OoJIpNGWcMpNW9KBxqGVnrOnHcPnn+pSF
sbLztoy9oYdf6hJ2OzIvahMPOnOv+x7cFIXODxXfgKLalrX/7NGn/ryzlqS9
4dzrgZyb2qij3orTO7Ep3EA1rRQZVhJgnCNukiyp4QYo2wCGgXLuWWqxDfY+
903xBlA4SxrPxiIYcBmaKBj3YCRAjgggyUIIgqiUrJColDAgJSQCEwNTgyga
AKkHp0sBsmCvhMspICEYmARCQkxWVFoeRWHhCdoAzxVQswXoAkDRQA6hKqOo
i5ehCkmSAAQNYAtoKKI0TYXAUCVSVOWc/NUDEglWPuLGViRjM46Lu4MyC2/r
pWDuiuRZEA1tFHkOcsbu8mZ+ChZeis5+mgHhhg+ehFf0pzzsicofCEtp94hr
to1rsUhot0jptskccMl56pczEpjaF5DYFhhS6pnyMKOneqUtaavEezbBoD/X
7XWey5tUwUSK/lgaf+yBzdwjt+0HTmv3Hd4Wu7/riDt/fHepr+DsYeiL1kfv
u2pX2xqf29t61z7p39m+3t/9cLz97WLjf2YHfkw0fxyrO5vqPl0a/7i98G13
7bfV+T/WVr/FxIeYmuvwOZblOYOjjYe9JTsv6i8bM5fr09ZaM/fbUg+bE/dB
gNrvHT4Om+vLPW1P362NXZ6q+jb04Kz/wWlz2mZ71u545ZfBh5fN6bsNuQeV
Ja94d3jasRitVFnteJhlDEngjmbqAER1gCwAbO6pORXqBFZam0XoQpQAOZao
rJKQNAkgqsLBwjNkKBpIKdztGRZpyu1aDHHy7QOcBgb5WxxB8RRGCYugRcQQ
wiCy4ghheSJSQRUpzwC8E1Q9kxlk/u3bHqy2BIkDVRVgidridB0I14IkgwMg
KEBdl0Bny5l7UKLzmJ7RSD1zhLGVhoOblba+oqkT1itMmcG+fWutbQE1ckUa
u5EsPZka+rKKqiJaArTVHY3AbNuczojC0bjiibjc4YD0Xs/EVrvoesvoBpvE
VrfUPv/swcj7g2mVHXU1+ZPF/q8aI3buO7xOsnqW4zRT6r6WZfIqVf95utFk
iuB1vv1yiftSvv1UU8RhRdByacib9rzNhoLF8d7T+KgCJZp2b9+r05Ofzk+/
nex8v1z/n9ddtyFiqOLwRfPO/vwvG+++Xh7+7/b7v62vf/O948lSo8eH53VV
zz+tP2m7vz7X+2ttynxXwVFDyk5tzHp3xjmIYGvyfmXE0tPCTyCCPTlHww/P
e3IOuvMOe/KPXlb/9Lr+dzCetGbu9Jaf5WW1833VudGyWoniuvGSNlEkbRMJ
Ag3AKQFITYDrR7JKU79bbnmvPkDTlojTlJRWuA3vskRhDF0aT4filWEMHSyV
i1TkIUl6cIy2NFJNUl5ZHGQTKJ7iWECKIAbB3waQ27kmeYCmiUFSJUBTKkUA
dB1RPklsnieCbiICVQZQmgBWU0TbGqfvQtSxRSvpSWCYAFFD1D6Iee+xnl8K
kWcH55opqHKJBpaq5m64uwkcPAOQVwC0TGEmrnjHAA1HP01dQ7SyupQKT45r
RTHx43im2gU/8ox9EpA3EJ0/GFkwGJrbH5jW7ZvU5hHT5Bbb4JXcFHW/urQm
b6os8G1lwMpgyqeOe5dpNhPFris5ZjN5ZtMggmHaTzMt31X4vM+zfdUYflDg
NpPnPdaS/X74yfFk/6mPR6y8vMLUq/UPV398uvr1dPv75dr/jjdcDJYedT/c
mOo4Pl39a2/5l6vj/9rd/O39+kcLK0tNDU5d2ehA/fZw1Wld6vJK/9+Lw6f7
H17WJ+5UhK02Jew9L/paenfu2aPP7WkHoGb2ZB8PP7wcK73pzT8Fa7bpr2el
NxVRi225OxV5r7PzKiLLXRwfkLhxgCARYh2KBQM4mnQ7UQagAKIhzP4e1zSa
5p/DiyqyA40HlAJgVaQITBmwlDQxIA1JLDkFbTmKrryCPpzEkyXz5agGSIXb
33NlQCbCKWKyJBFJNADGELCUdZBYJQhaESmBFJGlgSDiDLzkbMNIqlZQWRUA
dEpKAnmaoYiqhQTPBW3gRtSxJyoZinqn0HKazC3voGl6wnhVMW1T4p0Ebly+
hbYJTpWH1BTI6FojnAM5PAsFfQFBYEmzctW28NATeOtZBJvZx9u5pbt4ZDkG
FLol1AXk9kY+GIktGIpK7wtJ6wyLqw2v7mypzZ8u9J7OthtPNxvLcZ3pz/hc
5rlaZD9fYPEa1FIQwVTT1yXuy49c3lUHbuc6vqyImGvP3Vga/eP18KWXWzSJ
pDK/cHh1+fvnj3+ebf44Wfyv0crj7rzdzvz1paeftma/Xu7/43Dnt6ODH2/f
bTo7e4eHpA23bbaXbPUUnZRHzc+1/a00bLYj/bgqYh00um0pRz2ZZw1xW/15
F2CBQjr84Gqu8W8d6fsjj67HK77XxL0HqyvntCp1Liury8jd2iKB7l1BCWhg
+JUz/DI1jF2IMnhAVA6QponLakrzQxjmcQzjMFzsYxv3eCM6D0FlwxkcDEEJ
SlWRp2ugiSqyZC04iQPD60CxOlJEfdjtXiZTLEOAJeshQGSJbBkUSwLOEAZL
i4+hqyHFoKLyWKQsSRyjDFjfpXIdIfZhqgbuNAJXGsABaG1A015Oy0GWbiJO
YIsqGUF0XaUDslUDs9Ssg4jKRlB1c6SlHzU0U2DppaYpwIIc1LGSt/FWA0VV
Ww9hZE7l2ygbOmia3xG4xLt6pPk4p7hZRluaRwmsYgzdMizulrjFNQSk90Tf
H07P682q6+mpyn5VHrjwJHirzHMJVNFsx6mW8JPGgAMQwXjOaIzeeILBVI71
dI3fZq7NdJnPUkP82tvWHytP/9h884uNpR+Xa/J+7fTy7NcvV39cbv26N/Nn
f9FuW+p6T+7m6sTN6psP18f/dXr4y8frr/XNbRnpRa3101MDnxryNnsKL0tC
58bLvjYnbtfHbleGrj8r/NYYv9sQt9ORegL2xOEHn0AmTlX+8rTw40D+eWf2
SWv6AUhVsDqzzpofrbsEJaq4aqiHQjSiAIschF+pxr1654zqAHVz4u18C0mI
aEygOMgZRtN5kThBJCW+ytvsjiaJDVHWRano4vF0CFkFTtNCKmjKErRhOLY0
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
GkX3vkfW9xNRtga4rrI6DmgQRKKeqI472TJOxyRWxyyRdyuhMfomscbGkQaC
KGPrJCuwLBLNLEF6ZhjZ5lqAVsch0ispu7i6fLKlbKvz0dnb1r+9afytK3Md
JNRY7mnDnZV0necPTObDtXr9VJ5E6NRk2Lc2Jk8N1bxTJNHtHZy2Nz4crf96
8vbn0UfLZX6j2TY9tSHj811XW4tfj8+/Tc7NmNpZPmnqqHk8mh7cu9zzf3cm
n6VZvOhNuGqPOu9O/FoXcl7ss/rQfSXbab3U76Q16rIj5hjEqyFyqyP1avjh
z4MFV33ZZ80JR2WhGw+jViKCajhO6krOIsYxKEVbAKkNKPGE+OZIe1dqQJhG
fKahR6SyjjOcbiUtDDYvAxHbFL5uIEWMBXB8KThDcTEmIKMJWISxPZJMyDoy
MmRA+nZvmLAcThSlACEy5cmaKAoHQ9ZH4gykCGYQsFCGYgi+CMZYwstGKcpP
Jy6A62amoEoAOEqSdlY4Hh9iak0zcaCrmEoYeWNppmLKllKmgUQlM0DPG23o
r0g0kKUIUCwntHEwWRCMNAlEa1mhiOpSOpZUnIqwuQ/FwANMLgDTTIipD1Pl
o1lmWL63slmktnki1yKZZxjLNY7RM40zBuEziTYFCWidYm2WZGqWYmacZGSa
amiRrOuUZuyd7hiQGJyeV9PbttdUvt+Qf9CSv99XcNaZvt8QvtkSetQXf51k
MeinWRao8TBSvyjFoWygdIqvbuxo6bK9dHUw/33v+dfWpMlC555ko5q68LHZ
9tPlueu9k6+9fcNuzn7dDa/q7r9O9x1Z7/tXgcfcfeflJ/7HlW4HraFfE/jT
RZ6bmQ5zj4MPK0N268KWOxNWx4uO39V+e178pfne0UT5D9DPdN772J75sb30
2tUrXdkBqxMuq2gvhueJKnCk1fQwmhwshSpMUQI09SWs/SleKTqGAXS4LgDQ
AJYH1vu+Md0eqmgjq2yLvj3twgCY9iifdAuuE1UEc3sYUBZzu8pPEgpIygII
ohQop1gmDM+WoRjIg4XWlpRVFYKzhGkEwMVaIT5Yz8eeaqkn72KhEOSjYmeD
0WSL2bpTbe5Q+W5ILTuYAh8w8sPreEJ1A4QFkXIkCzGskRTZEmoaQbWIkrMK
waobKXL1DYODUtycw7Izi3Oy79u72GrqsKgMMpaCYvIVbUNNHBONDMNZBpGq
FilcQZyOeaKhaZzAJNYE7IOgmTFJMTVNMjOMNTKM1RMkqFqlsqzT1KwT9DxT
vOILHhRWjDbUrU09/Wmm75eWhxst2e9HSi+HisAgtpnu1OSvleHJjHZn3S2L
rnETuN91Ddl5c7o7+WG187IiYOC+fUsiv7QtYWKu63hx9vLTzX/kpt/PiX4w
VLFQFDJWE78ONrIU24kyn+1M06U0/YV47qt8u/f3PdYrIw7rE/f6885mHn+d
rfrysuRoOG+nI+ugPescBLEs9H1N5H5RyFJFwZqlS5iaF0Y9EEo2R6DUZAlq
0lr6eBNzBl0RIikNCEvcIqLrSLOJVOMF4Gn2onR7SaNgulOyAdlChuNDxwok
IVoAxkjUMIDpEmdI1ZUFIIC4DABHisBkhUQlAQkIcHsOFyEMxYoiyFIYGgy0
OjCcCAQjpK0lrMIAdLUlLI1kA7wUXa3lfd2p8TF6Vg4yAluoe4iymSfJ3Jeg
ZiGpyAcEfhijYAmzaBllBwm6NUzJGmIWRNFzlxI4U2JjsptKF8bbPo5Unjfn
rQ6WHvQVb3aVLCVFlxsJnDT0dcw8Te2iTSxiuabxGlapHOMEtnmKIWhpTOLN
LNJsrNIdjFPNTZLNQG9jEKqpG0bTjSDqJyhYZqpbpPIMQ/RdknyjcrOzQFmt
HhgYWJp//XF98de9+T9nuo47sqdy3at9WCF2NOdAwwAPQzd/mzsrzzaWerdf
lm3k2tRlW9Um8It6MqYX+0821z6urR0Gut2pzXhSH/8s0by5NmYt2WE00Xo4
1Wqy2HkvVvNlEu/lfael0uCd/offJmt/GS76AOb6/vTL5w+uxh99GnjwoT3z
qj3tpjPja0vKx5LopcLsCRvvO7xwumogBM0Tk1USQikJsdhyZpaqKgwEUl5M
Vk5UBArIKQozzGSZ1hBBiKJlGJNuLs3zouv5MngBqqAkQjmAlCZAFEg5x/Lt
g/SksIAoFIDBARRKCgYTkZISgsiIgSUmcbuEGQITloGLgQU+CKwQJuZIWxsi
X1ciOEAhwBvn56kQHKicnsv1D1cQOMpb+yha+uJNvXE0PWE5JmAahOd6yhAN
ABVLeS0HnEOoppEzwdPXJi+ut7/4c3Py3sviH7Uhi90Jh22Rx2VB808bD1vq
px5VNN6JCzb21TWP4lqD8MWrGCdqWKTyTZMFJonm5hm2lpmORmlWIIK8ELam
p6Kmv4JupBI3hqyXRDPN0jDPZNtm6FvE6PO82NrWbD0rgZmjq6tvWERYdl3+
wHj1/Fjx23vWmXe43pY0Yy++q5+Zz0zH64natwMZM3G6D1MMS2L0cgeyphcH
Dk4OvxcUlIS6+VTEFqdYFqdatCZZdqU6Dme4P0+0HAlS7S9x2KkL2G+MPGy6
d1qRuF2VvNaacdqV9qMl+uZJ+F5NxEZFxGZx8Fa+18Z9n+0HfqsNmTtFeSMG
9jaad3DcaFm2lwyJC8hTAQodYm6mpc0iKRAl0Ljbg2NMHhKhJgYmdwV9uJYd
QccVQzeVcEzic3wZJAuYpCYA0AFpdUDDDucZY8oxJ8vhbjf5QCAAVOr2IgC4
HASFhsPhktLSwpKSABQqCoOJgc9GdqKxmezwFFXvUEJQHD06STUuUfVuIMnB
HhIeyrSyhHL1hSycMSCOHAcUXgfQdyXruuLJJrfnCMBMYebHNDW/kxY8WBY2
2RT+rj/y/UTC6WjcaVvARlPQ+46I7XKP6ZbYtWd1px2NC2H30k39TWxiOeax
SiaxDLtsQ0GahU6CpSDTWZBqZZdrapPGt0gx1Qnl6oRrG8RxdSJVdSKZgiQN
syQtiyRt+xQDqxi+jrs605SuYsjUMGHrmhooszSYVI6tjk+Mc7anfog2WseY
yY1y9X7bOjJTPlrtVnVPMzdEKSVGP6ereGxmbGV35yQmNsnRysfDMszLMDbB
riTLpfGeWW2WZWuSfn2F7+u6oLUij6WKoOP6qC+tcb80h38scn9fE3Nem3JV
EXvcnvKpPeKi3nOrO2T/sffa49irotxNh6BgVWeiuq+0ogPAdUPqulAIBlAw
szM4KB1jGlEVLix/O/nJ4CLoLGkIBpBnCanZkvRdGDwPOucOxSbBQN+RiyDI
SMsCsniAxBPi+SlYx+nLssQkEAAUBkBEAIQ4ICsuhJCSVMDIYeDSKJg0RhYm
JyUhAQA2nrKeIUSBs6Sxk4TzHaSDD9wzGBedpOYfRIqMVrV1hPOMREzs5fSs
ZHn2CAM3Is0AQhdA2W4ILWco2xVm4qqdGPMkJ+Rl0Z1XffH74wkXbZ7r7d57
3XdOS+0XK51W6l02S21nB/LOqnNev3y5n1lc7BvvZnqHYxLONovjm2dYW+S4
8u/ZOT30N0uxMY0xsYu35Hlp6Xpo2UZa+mX5xpUnpNXlpFRmZ9YVlXc1No2O
tD193j70vHv4Zd/Iq96Rl619vSXl1Q+zqvLiKiLd7jnouPJVODyaalN6SV96
UxovNUQhOlQpKUY3szapbXHk/Vjry0D7YA9jzzi3xAibuFDj5FizomzH7qaw
7cdeW/XBF41h132p3ytDtiuj1ooDZruST1piTlqTL2vjjgsD5/LcXz1yeddw
Z7/AcbE29qihdM8nIEfPWYftQkSyATVrJNcZS+aLkQUyatZEFT20ChvD0MGi
lCQxTEmaNpyiKoFWvP35lWooR+cj6AZyaq4kk2CuU6C5khoebHwggkgNQNlS
1iKCo25DRiiKycoLIWRFENJC8jJiaHkpDEpKHi4KhQqD7APxExYC7sYwXe7g
ueaAvp2ouS+cayekYytk7SPnGICOSFa/E6lkYC5h5gQ3spGx9SHZBTAMPRQV
jWEa9nI2oRo8R0UTK7P06K4094mHbq8bvTcbnTfbnA4qjN8/1FmoMN/MUp8q
11vvcr0cSPpYm7A83Lr/6cP/PfJiNiY9xdTL3DXBxSLBxiHbkx9rb5cWHPgw
0yMuziMgxMc/LCYh61FpU2PHi+Gx1Vfvzt4sflxY/bq99+fx+T/Pz//z7Ozv
l+d/uzz7/eT4y/Gni5Prq8vz72c7P7Znz8bbZ+4FJ/IoGknOIfc90nwpns5y
bi4oz2SDtPb0js2RpWy/SH8DGz++a4hJeKhpappLXUXkTGfGUR6ouxlXI4U/
vSj7477/27qE3YnKn/tyz0sD3tRHbJQHva8O2WxP2m9L2G2J3auPPa2Iu6zI
3w6KT9d1UddyRFF44mAA1zNW49krKBoII7iAkqkcz0pRQ+92XB/LhFDZcKqm
DFlFnMgUJbIhZJ4chiUOId4qqrYdzd5P38KJo6gqj1KUpPMQ6lZEnpeiXZiO
Ch+NIktg8LLSEBEp2O0uJtCaikvfLkkTFgP+z7Y0R2+CpQvS1FVe4IHgOElo
Oopx3SW0HIS0bQGXMGJAAtPMCeoaQLD3xLoFUqw8iRxnlLE/je2MYtvg2QJW
dERWTvhggtXQY7eVWseNBputYu5cjcFOOXczFjdSwl0t5bwPRbUPxF9NPP7c
+HBpc/FvoAlZW7vuHnqeV/EoLDfCIsjOOTqwqKkzJac9Jqo1N2G0Jm9hsPFk
auDz5NDN1NNPczM/1pd/3976Yx9E8PDn06MfZydfr86+X59/+XB6c3R4fnp4
c7rxfev1p43Jy42x09GqZwWBWbYMYyclc4G8vi3eSg+qF2EcWhicnRcYz6dQ
rTQ0XPWt/MwD0oJKmotf9z/Z6arebS3ffNp02fhg9UXDTff945bUw9Kglca4
o8rwtYqQ1SKv5abI89boMzDsN6QcdJV9LCvc9Il4oOZIUXeDMs2hBBVJLTWa
Lpuha45RMRWDawIIdUDbBKfNJ2CY4nJ0UZKGDEkViqcLI8kARl2KZoDBsyC3
y04VhCjqsix9lFsg39yFS2LJawmY+g4adGMZ22BNIzcVqjYSQZGVQIgJw/+9
MUYcEBK9xU4SIgyFSUCg4lp8cU1DCRs/CuhVCDyAYSlkdBfFdpPStBfi2otY
+SHMXKH+McqOvhhHX5ytL17bCWoVRhf44nk2VAND49z4xkTXtgfu0+mGz/L0
XmapjT0x3mg0Pao3OGwwOYzHD8dT+nuDz/NcXlSlzL3sv95Z/c+1uZ/GR7Yn
ni3v7Vw2tHa2dQ3ff9D4tGenNnepLH6pKHa+NnOzs/xotPliZvR69c23nfUf
Jwc/72xdHOx9ODv6/OH8p8+Xv365+PPD4a+XG7+cvvt2OPV9a+TrbNPpyMOV
tpSxR/6VcWYxzsq2hlguXVxBG6VGlVaw0TTzNXV2N7ILcg5ODEtJjU+Nj4sJ
jgzwC/NPysmobe17Or7R27O9NPOf/U8+theetGUfjjy8ropcrYrbbb531ZH6
aTDj57bEr61pn1rLT9MzBqz9w8gmNLY/StVJkqItp6Onqq2KV1OWVuOJU3UB
sqEokSMGJwNEJXGGHoakJU/QkEHRxWSxAFholrQSH0dkyYhAAJg8II8BsHRA
34Zq7cNT0ScTWVhNgZKClqSODd7mrraGhQKMLg2hQqVIwmJIQEJaSFxMRFpK
TF4OBhb4QFcXRlMBtpmckSuRIRBXt4XqeyG17CWNfeR07cX5ThJsc8D+Dtot
lOQaTnEMUzALwqrbi/Fc4W7+hn5u0bkhPWGC6kr/+SLbmQbnzU73owr+cgl3
uYS9VqGzOhf7zz7/y3yLqaXmf77t/i01puvdq5vltzcvh7emRzfHupdWZ6/a
a17P9H+Y7f7Rk7VfH7fcVbw10nAw0XP05unp+7mPBxuf97Yu97YuPp59vzr+
cb77y+n67wfzf61P/j7X/+N1y83LoqP+xKUnQa/KPZ/nWLcmG5TFcTIjNKNc
qPZmBD4OQBHEMQowsh5V946Jb1Ne69KrXdCOnp9/e7+91zLYEZQS5hrhHpQR
eb/+cXFdy/CL5acDu7MTP/VVn7Tk775s+qMydb85/3Kg5Ka74OJx8kZpzlJ0
Yq2CnjbZEklzEOd6o7SssFp6mvo8XVWmHJUGKHOElPjCikbSOC1RaSwgJQ+g
GVJKPCLTgIwGgUACKJB0HJSiDgavDEPiRFAIURlZAKQwVk2CbcfkO7HlKBBl
Domli1XiyJr6qLIdKTAVAKosKqUoJoEVg8pLQqAS0hAxmIwkTEZcUkoITQFA
w4NXAbiWOCMPioEbXtNCSsdW2tQLZeQiY+QkzTIEeE7ibtFUtziaQwxF1wtC
NwPYNpLG5mpJwRVlUW8yHAYLbMZKHeYfGL7J03lVb7VXZ7afq/w2nToei+l7
Gvg9gtHzpvyfL6p+Lkp92V2/uvHu80jbu5GWueGW1d66ncmeH3nRE7Xpaw1J
87cDtGUrr/pOlyY+bbz5fvT+r7Otvx+v/n6y9tfm6+8rL77O9l2/av7wvPJi
6MFZR/p+e+LecNJhU+BCucfUI+fnueY9abrVCazsCFqUvby1iZwBVYRMFqfp
4A1s6C4x/NTBrPGFgZ2Dpc/7q1/P9v+6ufmfq5t/7H/8Or+3XTvQkvU4zyPC
zycsLCqxYGBw7fnTy+HOq57Gi7qitYbiubL8kbt3cnRNbImGdKK1rJInwA2E
qgqQHD7T0EBXXZVGV5HH0UD/KaFpKkfRg8gzhXF0cRn07ZosogZazZiuoIa4
JSBZlKaLBaUBQRHH4CWwKFE0SgTLgMGZkopGeI6jqhIHr8Yl6/JVqCpyaqZo
XTcy3khMUgWQpImKYkSgOEkoUkxM5nadsrg8gKJCCAxxElOSzpZRN0QZOJBV
DaWRSoCOhZSxE5xtIqxrKaxrLcJ3kbS8izYJRDrG0wXBGHU7SXUTSTaXUZz8
LMl+NJTTmMTrS9Iavm/wrtBwPlfzzUPOcil3I191rkB1Lho1kqM1n2r4Zrzs
P9/0/DnZdzXasdTfONNQMhrtX9VTf/ms468nhSclKUutucv9xe+f1Z3MDvyY
Hfz5dd9Pi6N/LY7+/XXPr687fx6vvxmruhopPhu6f9ifuduZsNoQPlsX+LbK
a6bU5VWh62Sx+2S5+3i951ir2+ATu/oii/veVDd1KU2aiKoJwSmUnZqhW57N
qyn26ZuuOz569fvH9X+cb/20v/Xp4uPP559/Pv/+x9mPP7rGZ8LT8wwcnZl8
vpGjnYPXXT7/jo1prI1FgIqKNp6FpQgQcDMAZQ9QPQGaDWBgqa6hqsxUQmtr
EVEUWQRVks6BKulKMQUoiq48miKGpUKJLCSCAafrKtC08QiCCIgpQQMUVXkZ
LACTBbDywiQCVBwFYLTRWB4CzYbybFVYHCJXV4VMk8eqi+p7KWh5IGXZgKwK
VJIElVYQg5BEgH+PB0MUAE1ziqq1HMMUqsgXp3CFFNiAIhdgGoiCAIHtWMVM
SNcZpuckbeIl4xCAsfaW8YjE2sRABOFwDXeylsCwJHYwUb8tQ6fvvsH4I4u3
j4znG82POywvG8z22u3PmmzOc9QXSsyOnyX8TwBrMMpsoKd8b7L3cKhjsbpw
ZKRps6NwK8v37VDRLztj/9tfetSad9lf9PN4ybfnjz6MlJ0+rTl/3no11nk9
2XXzqvOnqYZvAwVnrQnrYLpsiV9til9oubfYl7P0/MG7scI3M082ZloPxpq2
p/oOpof2hptmuh73V6U8NkBq2xPM0/gp4YrRmVpFVRZDFTavqlzfDGVu7ox+
/7j56+XBl5OTTydnX89Of1yc/XFy8sfO3rfRl/MRqWkMvgZcGQZjAKqmCIYJ
Dq0FwevDqcZwBSNhVXMpTQuolpG8BhtDJcOpZISKEo5CksYTRfHKUniWBJMv
zTKSIqkDaBqAV5Ig0GSoDHm6CoKgKIImAWQVCQWGjCxKSgIqJo0QJtBl8QwZ
BEWUqiVH0YDhlMX1LRhsAwVlLRRRBaZtQtVzVCHxZKHqt8t+pRRAWYYAoKuR
BZhmJLNAXQJfCGy7SqYSqqZSGlbSRu4o6wCShR/OLACt7wHT9ZQy9IFZBcs7
hWNcI3B30xl6oHp4SWm7Kdl6eFUlv0zS70pS78zkPE3U6I9nDGYrz+Qz3qaQ
RzOVJ7PVZ2OoY6VWW83Bl82xJy9rfmspWksMri/K7YsNLkoNrxht3AuxaO3K
vxypOq3Letv+aLu/9HSk5MNM/S9vWn8ab7x+3vxhovPTcN1ZS8H7+vTFruyN
kYeH4yWnL6tPXzdfzvVeLgycbjy/OJy+OXz3bXfu+9b8183Fm+2VD0fvr47X
jp43DjqzLeJtw0fyR3uTRh+5tqQZPHloPgoiWBP4qjN97l3/2fHKb+d7f14d
/+Pm4n921n462v5jdeH62fPl+dWTus5+HJNK52JMPNWoPCjoLYl8UZwuQDcT
Z5pKK3LE8Uoi2rpkPR4ooGhFCoJMkcEQxSkaSNC04DXFqVwJJR5EQUMKTQMz
IJTEQFBZCDJTiqAkTFIWIypJoojScrcXk0FxirJYusz/GROlaMIxdHGOMcXM
QZttQMHQQVIjObZKNGMUXFsUpiYswxCVJNxeAIRXl9M0Y7CMFRmmMuqWcjpO
GD0HhI6drIUPzi6YZOQhYxogL/CH63iIG3hLC/xlTH1h1ndRYHFdhbScZNTt
VTwDYvICBoOVG0IVG5PUBuLVh9K0Jh7rb9Ya7hdqvStkz5UabD7QX0o3mPBh
Vm31/z9jT657qrcPVv+58Ob66/U/N+Z2V14eZAX15ge/BG1Mf8XWcN3es8az
ZzUfnld9Gq68Gqw47ak47C7b7Srb6ineHK87ne24Xh38+n7088bk5735b0cb
3053f2yuXn08/xOkz+nxL9++//eXz3+9X9t+M/W64XF5iIcHl6pcn1e5OLS2
PHQ01rg18mi7wu9lseNYTcCb9qS15nuLw+UH6y9+P138368H/zpb+4+r7X+e
b//HyrtPi++uJ8YPyio6lNQVLdy0TT0VdZ3gqjYAigPguSArYYpsGZo6is7C
3Y7rqxApiigURkpBCYFlyRI4cgRtaSJHiqoHR6tJwmkSJDUUVhlOVJUDQ72i
FoyoLIaliWApkgiCOAIHQeKhSLIMgixFYslRNMFIKIpVkjB3ZPMtVMAHtJKo
igCnZILC6EnCNUWQGhKSJACnIcu1UNXgM5Q0SP++fQ/0QmKK6mAJcwxh+lZy
LL6ImgnY/uR1nGB8F7i+s5zAFeUaqmLrT71l6B1VAw9BZNzDJOfuAFp9JKMz
TftZgeBNHu9NEXsZTIKP+WuVxtv32SthpKFkg+ezT/6+3Pvno6TRobbd5Xef
R4dnx8dejA7WTY8OLTw9LUt4NdX6vSFvu7P0sLfivKvspKlg90n2an3eWlPe
atvD1WdPDhcGP2+8+Gl94vPmzM3BypeTnW/HhzfHx9dHZzeffvztw7e/Lm5+
Pb38+m7hfXlZVUJUVFpsdGp4iBWXzaXSgl38Zp7O7ix/WJ27WX/1Y+bJ6Yv8
3dqwmerQtwPZxwN5p4NFh0vdP+9N/vnT3r8+b//3/vwvB0u/LUx+ejF4Ojd9
UVxc6h9kW1gdEJnNw7EBgi7ANBFm6EMVNVEkGkqJRSKSkRAYgEBJU+kkFodB
5d7eVYfVliDzZJSM0Qp6cHnV26s9EEwpBEOSpAVX4qIITGkMVRxDlpBF3679
hKOhckQoaEtgBGGaNgZFl7i9ZZWD0zdXBSkJpwIkDkzRSJ5gIC3PFYaoAmi2
NMtSUduCqcRWUNOhyyLEZOAiKKyEAgmCx4kR8SJ4PCArDzA1oBw+VtsIpWuK
Y+nKaHBlHNzU3Hy1+DYoCw91I1er1LT6JLueUEZHovpwquazOM3hQpOlesuT
Mp3NDMbLDOZMnuZKusZ8ktF0X97Xt52/5Mf2BnpndbU/n59/d3D0dm+3Y2Wu
baLr+cvm7We1J635RzXp5xWpJ5WZ6y2FO+3Fe80P1juKNsYazt4N3ay8+Lw7
//P24ted1Y/7OzfnZ98/ff7j648/vnz/8+zjb7Pz+08a+sNC71kKHL3tfcuz
H4019+eFJvgY2jjpmgfaedkZOm6vnu3vft15//Xj+l9bI59eNx4PFGyAzXSk
4PRt3fexsrM3LRcbz7+eLfx+tvTb3vyPvblflya+Pm1bHht8VVyYnXTPg2sE
BjpAWf/WtxOUpFEkGRUWg0wmKZAIRgaGWhocuAxOlaVJZxNQDFGksgReHYbW
uJ0VxOvcviOFqwhJkQG4kjiBJYdTkiUowsFC4yFwhLQ8Cookyt7uuyOJM3SJ
txd0St5uNVTnU0BdRSqJETSlaYbyZEMZmCYgogzQbfBazkoUPhgzkUw9iixc
EomEEggIZUWiOlNRTYlMI6MpCvJoUKIxojSmPJdHpimDXwB0uCgbGwZNTYhj
rKAl4CfG1sRZdIQyutLZz9O1xzINph4YLxTrvS/UXCnmrpYb7NzX3oihv76j
PFIbewFmq+mBD++mj8aev2xrq27vyBl7ntrbHjXWWbU+MTdU8+xZ3VZd1lFf
2W9dpRe9FScDVSdDNSfP609fdp7PjX5Ynv64PH95sPftw6e/3Xz9zy9f//np
4z92Nr68njiorXiamfwkMaqsMLP1acvs3vTV267lopCSeOu4MEHwXeOAe74p
Ia5hHg7+377+dnb2+Wj7+uvpf5wv/77Q/+FlzdFAwdZQ/tabuo/znTeTjQcr
zz+er/7HwdIvW7NfFyeuRlrmB5snX/ROuTu4S0mKkxUxGlwmlUEmkRVwWBIF
z3Cw9CxIq2yqHK59NJKd2HQvrjIpIcfZxU2drYOngV0MT+WQ8Gy4KAmQYQJi
BEAUTPQKUkiyHI6MAClMVcKQFNAggggcTI4IwSnDaRwcRhkqhbs9WU9iyYNd
lah2ez0NRV8eNDPSygBWX0bdgaZkikOwpIja8jRdPJmFUOUo0FSxoJIzmCQK
BSsHh8DhkkKigJAYQFaGc/kKLG1ZDS0pA2OEjT1FVVtMV6CoZci7F1+X6jAQ
otQOSmgm90UCZyRDd6qAvZjHmk9Vmo7CPwuUHfGCD4Zqvcz1Wkn1H6u9P1NX
OVJWXDk62jf/tmtprnJmLGNx8lFXZWTNw7vDTTV9lbNjTTdzg3+MPLnoKd0a
fXI82XE21XsyO3G2sXpzevXnm6W9ruGZrv7XI8MbE4OHE91nE+2ns08/j3cd
vx36tDPz99XRH0Nl6y2pM20pU0V+remOJQW+FVl+he2lPYWZxbnZBVefvtx8
/23v4OZw+8fV1n/sT/083/Zhoupo8OHW67ZPi0O/vB76NNl/ujT9eWP+y/To
dn/jm6cNiw0F4zHeVW7m2ZYGibGhT9oa3mTfe2Kq6xHqkdZUPN5XvVqRPl0Y
N1WcOPckd70yc7a3Zq/6/mygRzHfwE9JQ4+gRlTUQ8soA5B/rxOB4W/vOpSV
l5JHS1JpaCoNi8RA5bHSCDKEoHI7TYFQgiBoUpL/XmOIpsPoXDxREyGnIoHR
hsqrSWmYKrH4NCxTBvwOTYegaqhIYEuqCrAENWkIFsApwghUhAxSHI6WhmLE
ZQliLB5RRUeOogboGkMMLaT0jcW19aX55gwdE8OctJZ89+d+hJpQcnMYpSWN
P56p9wpE8KHWSjbrXTx5Ipk6n8/bz7HZzHRbyAqaSr7b1lb/cnl+Z33t/ZuX
AyuzTc+640pyDcd6fV4MueWm6NXcfzDWsrw4/H2y5bq/fLu3fGO8/XDl5eeN
lW+r768nZtfTi6oDYzKLynufDuyNtB4PPT4dr7152/fz6ou/j7dcN+evdRXu
DhQd1ycuFPmNZbt2lwSMPAhoK4trf5zesPpms7W55fX8u+Mv3y9+/HV59dfZ
9q8XK3+dzvy53Pttsvai8+HOdNfPc2N/ezn89Wnffk/bQnfr9Gj38nTX+WD5
SWfRh7bCb0/yr2vuX9Q8eF+W/bI8e6g4pW+wautx4ltXzuN77tMd+T+Kww9i
7V6VRR2n+S3F+04+KdsoLBwysrbBqyDhDGEkUwSuKCmnAJXFQIXFbl9votDi
ZDKCQIKjSTAZvChGCUrRQiEZUBBECF4EzAtwBQkVHhWtAhNCAyB8ND2Cuq4S
hYYH/Q9RCQk6GV0LdRhCAoYUVWTBVTlYMLaACBLpGCl5IaqaDEFZREMfo6GP
U9bGahsqcE3Rxg44I1ekjgVJVZOTHtFUfGfSBpYVwWpK0OiMY3XlcF5mMd7F
E+YyNA8ztA9CcWMhlP40p9mqjM3GR7MHG59Pjg9X1xa2Nw7bG7trSh91NGa9
m8l4NuhTUWRQU2wz2BZelhk13ryx8uwfjWXzlY8nC4r7GjqmIiPSvfwDneO8
rII8q2qnRtvPx9svXzSdjjddTDZdjVYdDj3aH3p01JqyUXLndWXAUm3w+n3H
6XSrpzWhy49DZ5+Vn3fcX5zuOJvo3NlcuFo9eL91tfv5p/++OPtrZ/PoYvfD
xpurxWfXU93X/dUHY11nM6OH7Q0dTdWtL7q3wX/0suN6pOZktPpjQ8ZufcZx
dcpOrEdvUdKLjpp31flTL1r+0kQmp3r2vG35PJx/UOg10ZNxmWo7GSsYKw/a
qYreaMreywx57uNQoceJQOJ0xZAwuJKorDIgQQLEMAAUDxNHAEhFCEEZgaXK
YKlwMgNNpMjBkWJS0FuIpWQAKgMOBkMSA4KjiyuqycnhhOBYETxNBoRS15zN
NWFD4QBEFhCTApAYYVUNFE1ZBk8VVueiwE9lDZgqVxZLA4hMQNNAStdCzsaL
auNHNLAms7Q4aeH1TyIX3dAlUWod4fTWJM2hePrIfa2VB9p74eQ5b9TzVLV3
XUHfAnUHy+7N/+/f/vW///Nfv//6TzeXKG/XjP6O+YU3swdbk631IZPPknpb
AhenKqruZ3iaeVXlDL8evhzsW0y4V6xj7sLimaqoaRtYCKwi7Zxi7rS0Lzxt
vQDzRWfhxmglmAq/D5ee9OTsDd2/HHv4rS/9Q2f8VU3gbpbFdIbl1AO3d5kO
Y4V3XhVHTLbkLPWWvx/r2picXljZ2zi4vDi9+HK092Nv/df1d9/fjF0uz3x9
2r3W2zrxpKyzu/HF++nruadfxprBprzbX3lck77Y8+hjXdplfvBcSeqzvPja
/LTyV8OrVrqh1ekzGyP/V5rjuB22Lslg7qHzWnXAQZH7+xyHdzmuL/P9poIt
W8Kc2xOCB+/njuEpWtJoKEwBUNCEEFlIIgsrQ5GWp4OkgyEUIQhFGFZJDs+Q
x9BkpVC3L83Ekbdbmkla8ko8vAJHHqciI40AMAQoQ4PMMVDjGGup81QNjJTk
5G+3Z4uLA1BZgEgRU9WC0lQkuPqKatp4DBVAkgENI1EtgTiJBTB1JAROCDNH
Gpen/yi1uzFmyZ9cE0JrDlPsTNYczWa/fsBeuV1VzVqMVZv1x3U4ox61ZK39
f3/86//9+796WxdC/B7npA5NT55vvb/eXN/KTI2dHu/vb6/tqCt7Ulw+0DSR
GFzU1/qqp3usorHBJdjbwMta05Knrs9SM2CahBi5Jtxpa1uY6Pz8tOoCVMvW
jO3q2JW6uPWyoMWaiK2upKu22A8NIRflHnvpJu8S9SfKvHaaIk8rQjbq4jaf
JKxNPPn8tv/764njl6+Wnk08Xd/eOj37x+LCr6srv6+sfns+ttLVNTI41NvV
0tdeMTfZ9mW6/dtY/aeOoovmB8dlKa/rchcf35trL15tLO1NDkt/1rmQElTT
W73+puMXD60n2mKZDcHX/bF/dIX9yDNZyjJ998hlNdF4KNKgI4jXHGbaleQ5
WRDzJj60ia1lQ6KRqeo4dQM6XhWuqEsgcjB4DRRWDYFSgcPpEFmaNPgpThIC
C8AC/z47BtewZSqZk+WYUBheikwnqXFVtPU1VHWU6JpkZ3cLjp6KFFQMEAak
5YTEZW7XHWgZkJTYWA0DqrohQZWPUDGUIWjeXgzNNIDpWclaOzM0tDQfJreV
B4wH0Rv8CY1RyiOxzGe5unPpzDfR5PFYjTfeCn1B1L6RlIt//fyv95M/7LkV
2grZ/a3n1eWTM9MbG2tnGfeqNhdv3o5v1BQ1t9QMlBW0Pu9739M2U9fclvIg
ITjbzzhQzzLG1MBfl22pzDQianoy3JP8OjoWJju+DpacDt4/H8j/0J/zoTvj
vDv9YiDzpif5U2P4xZO7Z6VuO2mC2WSDV6VuWxX+e/fdFqrCNkpvR+gPq5KX
OsreP+/b6Orur26oHRx/8279cunwy9PXa3WdvU0dHXX1jSANn7ecPKv9PF7/
ZaTiU2P+UUvh6eP0mcKk4ZSAhkiPh+FeGUNN7x4kDY01f072G/bWr40w6+++
dzVd/EcYq91F5kmIwkgk82mkWn8KfyTRYChYq+OexVSi+XS81UR5wlpWeD8F
x8MTyPIkKIomhVKGoZlwHAtB0sSQtXHgJ05dHguqJRMqy5CWpIqAhddBq9uo
0EzJcKYMSYXAUGeoaDOU1CkKKjiiMloKA5g4a+lYUv7P9T14lgSdh1DgSKPU
AQ1rGV1XvJIJBKMtRDOG6Lrj9N3ROlayPBMCFo/xsorNc+32IpS5o2oCib3p
3LcZWm/vMabyuEul9ichKmP+pN6+6K8lgfPGpMySqP0n2Udvxz49KmhbmD1J
iKisK1192n6VFdfs5xz/9uVa3ePu86N/PHu+VNlZEZTr7nff2inbyCKVpxPA
ZJjJq1lhFB0xdrFOVdVjo42XvQ+OejJP2lKOWhMO8j1f1kSutScdNkbvNUYc
t8d9rAncTzOfzrWbawg9q767Wxmw1ZZ8Oph3vdD8X1M1vzTn7QzUHQ71Lqbn
P0gqTCxoKijvbShtb63p7OzsH29teFX9YLL78Wp/2U5dxmpj1mbT/Y2Wos2e
8r3qrBlHflSQY3ZF9rOc6Lbu2nfJQf9/V28d3Ni5rvmuBrMMkixmZmZmRjOz
ZVuyZZAtW5aZsZnJzZCmdDpJp0Md2EmHO7g72cnmu/eZfc65NXOrZmrOn+d+
7szsmpqqp1YtrXa5qvXz877Pu6T1fQcWkre+ePAf2fq7EfZqiLDdwb4Wo9/r
5zzsZlytxhxuop+oJR0OlG+1si8PKF+Z9X6YtD3Y6Pmwp/ogl2nZU5hTjM/N
ge9+sxdFLti9B85F0EQYshAJIg1NhgGTI4ZXSpaiGRoiTYXHi5EoTilNQmbJ
GAwphcDFIChF4DcgBRBZA2kqi3Q1RVwHJPIUKqNojiNXU1vI90EkA0QxQhxH
gboSq61DUvSQ2o/SOlhyrbrW238h/aSFuRXjXIlz7jXhLibZD2Zl76Z4j2Kc
B92cV7voDwdF7+n2HbiU+q+nR79569y/3jnxh0dX/3566/3zh98/sfb45NqT
TOx6qn3n7Qc/P7r3+ePXP33r/feP392OjFldKYl3WmkZkyo7mTh9DlGfSw0h
LJ22iamTt45/f2f7pxuzz4/3fbLe/O6F9LMbc+DljxfGvruc/vFK+vcHWj8d
tt5bqHhyJfWnYz1fb7c9XWp4d6Xp3XNj3x4b/OLqyh9OL3710uXv5lePt45F
wwldcr33zP2L567f2N688uadPz88//vjM6+fX3xv9wOvyWfHpj4B+G4f/XJl
5HhvQ21T2FUfrB/pymrEtgPzO2/e+mO7+9BCO5hffho0PTxU9zylfNNfdDAE
P1CFOxLB7T7W0c6+nJTc7RffTGtfSRkeToffOjvzdUNwoRhO2l+Sm1cMlcL3
lSL3gkBSitmLfrHFAGCKZ5ehaEVg9mdK8bsbRjDKcHQ4RYAB9iQq0DQVDi+C
F5H27UVAAmchcJYiVCIPFjubyY4mitxfJvEU6yPlbMPuRsYMTa7UgaYpCvCC
F/t1UiEwQnJl0qCt4+TIG9WkxVrCkSbixX7eyyO8VxeUT7LSt3tYrzYTH9SU
3q8tud/JeHy287/MVb79ycX/PD/5p9PZn7MdD8+tfvKf/+0/rx/7eKjx4lb6
yevX/+W1G7+7e+PDz559e+L+4UjaHpwxBOb15gm5qpdLdRfTXcXYQIGh25jK
HHzp1Lc3tr65OvsMQHzz4L9dn3t+MfPtubGvLmd/vDn7xwujPx6KfbbZ/vRA
5xfXJv96OPbsUPdXxxPPQCE9m/p+seWd9cRHpxe/eOnyN8Pjy02D9UPrHSfu
ba2eWOzoiIedbcMtm6dmXz+SeeVY9p0jmS8nWl9eHrixPHT46OxGosm7OG0/
f7rpzLGR6+dPXTxxb3ronEc1cmzm05c2/zEceNhnvqbMGZJBQ56ytRrqUQd8
OUI6GcSerMAc7WTtgLFpUvfSjPX1+eDbw+F7S6nHPGEASWQgMGVwZC6sDBDc
W4zehyQWoGjFaHoJDLu/GJfz4r43HE9FYEilZBoaOJSghOHUuXhNEU5eVMbK
zcFCYls5VQ4Dgz+SkQ+mSDx/n9CAoIp3F6zG01H7C3e3MGCLcQQ6AlROAhW/
HwmByJQHR1jUNcsdV9t4G2HUej3u3Ljy8bLxoyXNkzT3tX7+W23EN5oQb8/I
fhnkvZ+UPD7S9GO/4aWY7dx4zf251qf3D/3Ppy/9Z4Nl/dWL32xnr21m73z5
1v949fpfHz/65fjd88FRZ3TR4chqjGmZIsaleUpwxv2EMEzVqo4l56+f/Or2
ke8uzX5+KvXh1anvr8z+9sTIZ6fHnt1d+9u9lb8f6v18ufm9U4PPAbg78/++
k95d4OVA95eT0cdH418vtby/lfz44ubXl84+GRyb789OLBxb2rq4rDCLOGxx
f8u4VejqCY5e3Xh6dOLp1tizRM3Jobb2hdHoxnRkeyGwNmerDGAyQ5ULE5mx
2PZo7PTK5OX5oavV2u0G9dkQdz1IX61jH1HvH3WWL7gxG070YUfZoQrcyery
7QT36JT28rz9lQxQ1Vtb6U/6Esc4UotEpWDwSFgqHEMpK6eUlOILSgh5SCoM
BvBRSoDgmAI4pohARtIZBAoXyXLA0XqoVA6Vy/btPhbKzsNzc0ArRFByEOR8
FLWMIaaSOWgMtZgnw2GoOVxJGZNfAoPvfkWqBJ6Lp5YT+Cg0s4gmQHAY9ETd
Srf1FPhjS0ofLpg/XNJ9OCV9Mi//TVrwKMV5Y1r2WZL+bkrwSYLx7gD33Zry
K63U66OGx7Pe9x8u/Efc8EaV4NxrJ/7e5TvcF925euD5g8s/P3nnu4M3N8IT
huCM0Tkps2WY1jE6zrEPpYWwur2KKDPcE904cf3lG/96cfkvO6NfXhr6/FjP
bw53P328/V/vzv3Lyfg3p/t/WG366Gjfs9OD3+2MPb+7+LfV5veBAU/2/7De
9slm11fbvd9cWPhpfuhGomdmYXt2+eS0tcqUi80vxpfZPJ5wsCE7dOT00pPj
k+8sx3eW+jMDrZT1OfSVc5yl2YI7N6w7pyKdTZb1+Znrl3cuXbgB/hKun/1u
tPNWreWIiTytR0278Rvagik7fLmKejKKO1yJPtpMONOIOd2MPx3nXRs13csE
HkzWv5xqvTHSe81gbRd5VYIwk+OnU0w4lLS0hFUAI+8vIeYUovdiyDAw6SMx
+Wh8EZZYjMLtfs0eKStCG0oLxXshKpTHgRDyArK4sBC3u7gTmCvZcjKeVV6A
2sOQ4Hb3HOSVCVS7z+bvKYD25EMwRC6ZjSPxsaA4q0wsGokY0vTMN78aJR/q
E9yd0r+zbn26bvly3fTFjOLJtOy9Rf2zIfaTFOfDfurbWeXncdajBP9h1vLe
sO6V+1P/YyH8VYPw8nr3k5B4dqz+5SPZL28c/+bZ13+bP5fxT6hBCbVNSk3j
LMsol+IrIJj3U2w5Ah8q0O2MjY5fufD9+eWfzqWeXRj88mjPxxfGfgD189bs
X0Fi2Wj7eHedrvhXO+M/3pr/80sLfzk3+sNc3ePj/d8CD841PDkx8v3J7LMz
6+/NZk+0JTqVXkm5qAwnw1CVBLacPTCSvnDq1ZWJ22up2+tjp2odluOrrpVJ
1Jmj5NfvG9PDha/fb//i42NdLZ5sevLSuYfHth5cOvbZ+a1vJ9peTUZeSoUf
RlhHLGWLVvhSAHvQh9ioQB3ppF3upl0b4t/p593sFV/u11/P1Lw81/v64ugj
jz/JtUrpHiLdRWI6KWBeYBjJJBkKyy3BsEvhlPxSQh6oqEQWAo7PA80Rzcqn
mREI5d49tN0t7dCKPLy6mKODk6WFIIKiOXk4HgzMjGhmIUOG2Qvf3bSCLivH
smHl1HwsswxBKkZREYWYHHAukhPJeEKDIzXT8MBUlO3m3cxoXt90PT3o/XrD
9sWc5t0F3W+WDF+kOO8NUB/3kx/PyD/voT3sYz1YdDzt5l891/7HmOhht/Tl
pdp3u43np5qenJz+8f65X56890P/dodrQuxdVFuzUv0Y1zom5FYiyfYcQbhQ
FCrxxlSRjoqtrXuXtr8/O/4NyKIHYx9cm/kJTBZXsr9cyvxure3D06PfH01+
dW3u9w+2/nF55sez6e9W2t8FV86kfzw6+OzQ0Eebw2+eXHu/vjot0GtAPi8V
5TEdGI4TzTESPNX+haXDWyt3ZlMn+1p7FyZaa7z7H1z1jCdyb19Uv37fnR5E
Htiw//UPbyxOTzdWDHY3rW9MPRrrupluvesTrmrKM0H6QYDPjlzzYw74EJsR
5KFmwrl2/E43+eqI4OUJ/avAhknH9eHIjdXBdzqb14V2FdNHZnooXC8DiOdk
MMwUqgaP4MGKaTmFpD1wZj5OWFbOKUKw8vBSWBl/d/V7ngMp8eHFLhxNW8K2
wWjGAn0lVRuhkZS5LCOCayrPI0K5eAgvLqLKSvH8YpYSw1YS8NxSPAeJJBfT
BXgGGyni8OJVi0n/jgez3M69uuB4suX7ZHN3u8aPFozvLpk+mDd+Mi58L816
a4z29ijnvT7qa13Ue6PKNzq5l8+0/RzjvpI2frAU/jDjfxSz3D009u1bt/9x
7fbjhrmgc4rvWVZapiW6tMiWVkgbCUTrXm4wV1oBM7ZTKwdc/ePZ88fev7j8
/ZmxHzZ7nlyZff7w4D/Ojf92Z/InQOrY8DOgawu/vHLwH1fmfzzY//H1xd+f
HP326PDX15b++NKBn64eeHZ66wMeL4DhsIk6AtFeSvHki6rhJEMOz8peP3p8
Y+taemS9ublybqpmoJM5ESefP+hIx1FvPYx8+mH7oW3Toa2mV+9eG+yea69a
z8bvJerOTLS9NNn8qNd520PasiFWHeXrPvQBD3wjUHawpvxkPeJUL+V6P/PW
oPD2iPruuOtBtvLhSvfb1Z5phpJPs+HZbhrPx2Q76VQzkWrA04wEsg5L1KCx
ijKUtLiMn5MLpj0WRNHC9VU8c41A5Wew9EiavISpggf6+TxfviBQqKnDsp27
D3sKPWV4OUTTFgqsGIIwH0bafZwfVFoYASIL4CwxicpEU6glUg7fyK4Zq7ja
b3qphbtzvOHro5WfHwx/tu3/9FDoU3BcsHw8p326oflsQfSbIfo7k9JPBkRv
dnJujupffmnwX+btn2SNv8k63sr6Hw8F3hiuv3/26AdzB7cqp2yuOa5rRWyd
FxozYuekStNBxxohnBliB3JkDchISh/pC8yvHbl26uvzC99tJ57cWfvjo6P/
dn7ih7MT359Of//i+C1gd2fjz7c3/3Qw+dHN1T9cmvt5LfabU+Nf3zzww51T
PxzbeoIjG0lyAdlKwjhyWVX5zKq9dP8+kY+6eHRt49DF0dTyeCY5mqq6dXEs
M6C9ebbryavptVndH3/afvZF9vjRhpF4z8Glq03RqZOrH60Mvy2AJ/zCbRN2
0U3cdpZv2uFr9tJVR/EaIFiPOdOKvQDUQ702JLqT0txL215OB+6tdL7TElwq
waOL2blYGZxuILCsFLqJSDbigWgWAtWMJxqRBAOiXJUPE0EEY7GpQepo0sld
PAy/ZC9qd421IjLUfyzkSnIwRgiuhqhOiO3eJw0jdBUkkRMttRNx/EIsq4Au
QeEYhSjyPgIDhsGXlsELykogJo4iwrgPJ9/rt90ctb12uu2b43Vfnqj/+lTd
t+eavz1R8/WS7eM16+eHzc82NJ8Ps94dEn2Y0r6fMr91sPHpoYZPpy1Ppi0f
HKj+LOt/4/jY79oipycmD7ePd4SzhuCyyLnEdSzybFNi96TS0sfGmXZ3yaF7
i6QteNugyJmQ1Q/XHj5x5+TGB8cmPnx09F9vLv1yaeqnU6mvT6W+vbXylwvZ
59eXfgYQb678cmTo6XLnmzeW/nRk6CsQRFcHHu1sf7o6fx9PV3FtYoYPj/JA
jLr95Cik60aBVtsy2HTx+uvp1IH5mdXDW2tnj69eOjPX3aq/eGp0Y6br5Hb8
b3/b+eXnK5uL843R/jMH78YbNrv816uVl1uMN3XIRR1swVyybitdd5RteBEH
o6hjtZgzTdhzfaxbXdTLHbTzfZIrE+5XFuvfOjz0NFa5SaQxYcS9+1AQCDAY
MZyixlH0OGBDnA5BMqGRmqJSRQ7bj7d0y+y9ClOzFCUqzsVCe9EQSKEEBZym
Q7Vu+ds3/ZpOEtWznxctllWhxaFymgGGYO8rI+fsflhctpfCwuCJpbDSF7dP
86DSkoKCPIiKItTbR86MP40ZLq5Ufbhe+cHR+k/Ptf9wsuGbU01fHan+Yt7+
wZb3yy3TJwvyDyZkn/Tx3x0xfzAX+fhk4stx9+3Nio/WQh+f6fpuMvjKsclv
BrrOji0vN0xWhqb0kVWFa4kOZJ/muDIiz7AQzIMIdS4rQBQ203X9bMcYy5OU
d2cGjhy8t7Py2e2l358d/fLazM+/riF5dfYPV2d/ubX8x0vTP+xkvzs29Nls
0+tnJ357buLH0+M/HJ749Oap52tr99gqo8DPZVeiSBV5+CjEa90vbirk+4p7
Mq3ndl5enb+xOH62vyN78fzVM6ePb6wuBJ22bz79+NDqzNbawP/7jy/+8ffv
1hYWjPLQZuY1C3s5KLgUZF+w447J98yZCjecZdtuxMEw9ngl/lQ15mQd+iTo
hnHujTHNgzHz/SHrjRH/ze2hD8a7zlpNTiYXU4CA9pdBMPw+JKsYIygFlsQp
4RQzimRGMpwofZvQN6hX1NMxujyqAVFIh2AciOckmFslgX5j23ZV/+mWlo2g
e1gmrEYLwmhJiFDK3UOSoLBMNLQfgvZAhYX5JYV5iNLCoty9uTlQKSwPlg9h
i5F90fmZ5jsjnjtx3c1J1yuH6j7aiT0/XPPZgYoPtyMfLTjePxz6dtv6yRDt
4ZLt+bT9hzHXJwnrg7X2d9ebHt8a++tS6L1DzR8f7P3o8ORnq0sPJg7O+oeM
gGDlmsa1QHEvku1ZmnuCGxqXC8LYPUyI6qZQIgR1P8s+SQ5nRZZm06ET168f
+OJw/MNTw19cnfrlSPyzu8t/P5r4/Obcn67N/3x17neA4Jn01yDPbMY+Ojb4
bGf6l8vrv79y7Pns7CW53cbykrGefdTaQnZLIbMBEtTvruHTMly9uHTq3rXv
V9N3fca+s2fuLC4fvrTzKOBuTA32v/nag9pQ+42LN/77//zsX//t84bQiIKc
jCiPaFBLvL0Lkj3rpqKDHsRxD/KIs+xgAHUEEKwjnm2h7HSxrvTyrg0pb4MS
Ohl6OVN9fzn+uCO8EvSEVWoumY5E4gtL8LmFuP0FhD0F1H0F9L3FvH1sDzE8
ZI2MWJhuZKEIQqn3MGzFAg9aU8/QN7H5URQvUt6xXd21XTlwsrZp0aZsQHM9
RUxLfjEdwnBzrUF1ETIX2gsVFeeXlBYWF+fAivKKC+GwHBiuJJ+Fzenp0HW0
2CPBttrQ6mDzg6MjP+/EfzlR9/Rw1YMTDW8fbvxu1v3FkvfTGfP7s9aPl5zf
rHqez1m/Olr7HWB9L/t8sfbOmfFvTs5+t7X48ebhh1PHF4Kjxsiy3LfMd84J
nDNC9zzPM8OxjlB03aQiKVQk2Mt0YQ3tQluC7UxxPFlJ52LT6SMPL0x/dXXy
D7en/n498/2rW387m/ndycxPIOecnvzk5uzPNzI/38r+4d7KHy8vfH5p/enN
01/fvvZNa88kRSem+omcpjJ25152KyRohDEcCKhkf29iZnH28tsP/9BUMT47
dqazZuGV61/090zPZtf1Wtet64+PHnw55Bu8uvPk//v3//z9T/+ytXisOZyK
RQ55BIdE+dPCvSlj8ZwDse5CbIF5sJFyqoN5Js67CjpgUvBy1vxRXP36SODx
RNsbU0Mv81heGo0iVVDZAgyKlI8k7S/C7W4cuR+3u7KotopflXLrGwWlMiiX
u/t4r7yGYmnncbxwgmkP013I8u3uztx5uLJtKwhqac+hUPOSVVGDLZdBaBGE
4+dbg0qulJZftH/ffmgfmCBJWKlEIBRxyRQ8g4LmshDNrepgtcDolQYqOnpa
by7Gv91o//xU16c3hj893fZks+aLQ/U/rQU+Hte+PmV+b9H52bLv8+3Kry4P
PN9qeOva+LPV1teOjH5xZu37G9e+3zx9tW2mIZxRh5ZE3iWea14ICIJIAwg6
xuimPhogmMuG6A60ppnrTPJsQ0zHKK96LLC1dfXG9m8vZf9yJfXnc4OfXct+
AyLNmcz31zd/ubj4w8mRZ5cnf763/l+uLv7hzPL3V0/9+Norv59dOa30OOg2
uqAaz64tZDVCrJo97FAJQpiXhyhsaBy4cuHdY1uvHV17ePPsp3Zl7OKhd6ya
2ocvfVQV6r124b3W2pUjG++ImbX3rnz5//z8Hz99/u8twUnSPn+tZkecN62B
zZtLls2wFdAHKwnHmmmn2mknY8yzndRzaeXDtOHRuPONieqH8/FXhrqOkPGy
srKSUvh+PLmYLSLwlUQwx6HZBfswkL/LGOmzyiOMfBaUz4WkUZqpRcj3YxEq
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
wJHJIun08v8fkxBtLQ==
                "], {{0, 113}, {150, 0}}, {0, 255}, 
                ColorFunction -> RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", ImageResolution -> {144, 144}, 
                Interleaving -> True, MetaInformation -> 
                Association[
                 "Exif" -> Association[
                   "ImageDescription" -> "OLYMPUS DIGITAL CAMERA", "Make" -> 
                    "OLYMPUS OPTICAL CO.,LTD", "Model" -> "C720UZ", 
                    "Orientation" -> 
                    Association[
                    "CameraTopOrientation" -> Top, "Mirrored" -> False], 
                    "XResolution" -> 144, "YResolution" -> 144, 
                    "ResolutionUnit" -> "inch", "Software" -> "34-1034", 
                    "DateTime" -> 
                    DateObject[{2005, 7, 9, 17, 7, 44.}, "Instant", 
                    "Gregorian", None], "YCbCrPositioning" -> "Co-sited", 
                    "FNumber" -> "f/2.8", "ExposureProgram" -> "Auto", 
                    "ISOSpeedRatings" -> 100, "ExifVersion" -> "2.10", 
                    "DateTimeOriginal" -> 
                    DateObject[{2005, 7, 9, 17, 7, 44.}, "Instant", 
                    "Gregorian", None], "DateTimeDigitized" -> 
                    DateObject[{2005, 7, 9, 17, 7, 44.}, "Instant", 
                    "Gregorian", None], "ComponentsConfiguration" -> "YCbCr", 
                    "MaxApertureValue" -> 2.8, "MeteringMode" -> 
                    "Multi-segment", "FlashInfo" -> 
                    Association[
                    "FlashUsed" -> False, "FlashFiringStatus" -> 
                    "No strobe return detection function", 
                    "FlashFunctionPresent" -> True, "RedEyeCorrection" -> 
                    False], "FlashpixVersion" -> "1.00", "ColorSpace" -> 
                    "RGBColor", "PixelXDimension" -> 1984, "PixelYDimension" -> 
                    1488, "InteroperabilityIndex" -> "R98", 
                    "InteroperabilityVersion" -> "1.00", "FileSource" -> 
                    "Digital still camera"]]], Selectable -> False], 
              DefaultBaseStyle -> "ImageGraphics", ImageSizeRaw -> {150, 113},
               PlotRange -> {{0, 150}, {0, 113}}], Annotation[#, 
              Association[
              "URL" -> 
               "http://www.wolframcdn.com/waimage/hset053/2ee/\
2eebd55df7aeb06b9473097049f1de56_v001s.jpg", "Dimensions" -> {150, 113}, 
               "Source" -> 
               "http://en.wikipedia.org/wiki/File:Iris_versicolor_3.jpg", 
               "Popup" -> 
               "hset053/2ee/2eebd55df7aeb06b9473097049f1de56_v001ms.jpg"], 
              "Image"]& ], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Taxonomy", "scanner" -> "Data", "id" -> 
     "Taxonomy:PlantData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlantData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CatalogueOfLife"}], "\n    ", 
         XMLElement["datasource", {}, {"PLANTSDatabase"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"kingdom\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"  ", "\"  \"", "\"Plantae\"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"plants\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}, {
                 TagBox[
                  PaneBox[
                  "\"phylum\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"  ", "\"  \"", "\"Magnoliophyta\"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"flowering plants\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}, {
                 TagBox[
                  PaneBox[
                  "\"class\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\"Liliopsida\""}, {
                 TagBox[
                  PaneBox[
                  "\"order\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"  ", "\"  \"", "\"Liliales\"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"lilies, water hyacinths, irises, ...\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}, {
                 TagBox[
                  PaneBox[
                  "\"family\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"  ", "\"  \"", "\"Iridaceae\"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"iris family\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Taxonomic network", "scanner" -> "Data", "id" -> 
     "TaxonomyGraph:PlantData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"PlantData"}], "\n  "}], 
       XMLElement["datasources", {}, {"\n   ", 
         XMLElement["datasource", {}, {"CatalogueOfLife"}], "\n   ", 
         XMLElement["datasource", {}, {"PLANTSDatabase"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[{{{
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519714, 
                    0.}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519712, 
                    0.1736397240519698}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197103`,
                     0.3472794481039396}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197084`,
                     0.5209191721559093}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197065`,
                     0.6945588962078793}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197048`,
                     0.8681986202598491}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197028`,
                     1.0418383443118189`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519701, 
                    1.2154780683637887`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196992`,
                     1.3891177924157587`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196973`,
                     1.5627575164677285`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196954`,
                     1.7363972405196983`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196934`,
                     1.9100369645716682`}}]}, {
                    GrayLevel[0.8], 
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196917`,
                     2.083676688623638}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196898`,
                     2.257316412675608}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196879`,
                     2.430956136727578}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519686, 
                    2.6045958607795474`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196842`,
                     2.778235584831517}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196823`,
                     2.951875308883487}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0.17363972405196898`, 2.257316412675608}, {
                    0.34727944810393885`, 2.170496550649623}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.17363972405196898`, 2.257316412675608}, {
                    0.3472794481039387, 2.344136274701593}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559102, 0.6945588962078797}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559101, 0.8681986202598495}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559099, 1.0418383443118193`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559097, 1.2154780683637891`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559095, 1.389117792415759}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559093, 1.5627575164677288`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559091, 1.7363972405196986`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559089, 1.9100369645716684`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559088, 2.083676688623638}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559087, 2.2573164126756082`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559083, 2.430956136727578}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559082, 2.604595860779548}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.520919172155908, 2.778235584831518}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559079, 2.9518753088834875`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559077, 3.1255150329354575`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559074, 3.299154756987427}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559073, 3.472794481039397}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559071, 3.6464342050913667`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078779, 2.691415722805533}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078777, 2.8650554468575025`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078776, 3.0386951709094725`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078774, 3.212334894961442}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078771, 3.385974619013412}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.694558896207877, 3.5596143430653817`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078768, 3.7332540671173517`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078767, 3.9068937911693213`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078765, 4.080533515221291}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078763, 4.254173239273261}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.694558896207876, 4.4278129633252306`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078759, 4.601452687377201}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598482, 2.3441362747015932`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598481, 2.5177759987535633`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598477, 2.691415722805533}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598475, 2.8650554468575034`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598474, 3.038695170909473}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598473, 3.212334894961443}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259847, 3.3859746190134126`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598467, 3.5596143430653826`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598466, 3.733254067117352}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598465, 3.9068937911693222`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598463, 4.080533515221292}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259846, 4.254173239273261}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598458, 4.427812963325231}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598457, 4.6014526873772015`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598455, 4.7750924114291715`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598454, 4.948732135481141}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598451, 5.122371859533111}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259845, 5.296011583585081}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598447, 5.469651307637051}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598446, 5.64329103168902}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598445, 5.81693075574099}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598442, 5.99057047979296}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259844, 6.16421020384493}}]}, {
                    GrayLevel[0.8], 
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598438, 6.337849927896899}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598437, 6.511489651948869}}]}}, {{}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.1736397240519714, 0.}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.1736397240519712, 0.1736397240519698}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405197103`, 0.3472794481039396}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405197084`, 0.5209191721559093}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405197065`, 0.6945588962078793}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405197048`, 0.8681986202598491}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405197028`, 1.0418383443118189`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.1736397240519701, 1.2154780683637887`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196992`, 1.3891177924157587`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196973`, 1.5627575164677285`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196954`, 1.7363972405196983`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196934`, 1.9100369645716682`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196917`, 2.083676688623638}]}, {}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196879`, 2.430956136727578}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.1736397240519686, 2.6045958607795474`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196842`, 2.778235584831517}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.17363972405196823`, 2.951875308883487}]}, {}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.3472794481039387, 2.344136274701593}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559102, 0.6945588962078797}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559101, 0.8681986202598495}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559099, 1.0418383443118193`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559097, 1.2154780683637891`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559095, 1.389117792415759}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559093, 1.5627575164677288`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559091, 1.7363972405196986`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559089, 1.9100369645716684`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559088, 2.083676688623638}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559087, 2.2573164126756082`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559083, 2.430956136727578}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559082, 2.604595860779548}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.520919172155908, 2.778235584831518}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559079, 2.9518753088834875`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559077, 3.1255150329354575`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559074, 3.299154756987427}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.5209191721559073, 3.472794481039397}]}, {}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078779, 2.691415722805533}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078777, 2.8650554468575025`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078776, 3.0386951709094725`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078774, 3.212334894961442}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078771, 3.385974619013412}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.694558896207877, 3.5596143430653817`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078768, 3.7332540671173517`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078767, 3.9068937911693213`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078765, 4.080533515221291}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078763, 4.254173239273261}]}, {}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.6945588962078759, 4.601452687377201}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598482, 2.3441362747015932`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598481, 2.5177759987535633`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598477, 2.691415722805533}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598475, 2.8650554468575034`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598474, 3.038695170909473}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598473, 3.212334894961443}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.868198620259847, 3.3859746190134126`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598467, 3.5596143430653826`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598466, 3.733254067117352}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598465, 3.9068937911693222`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598463, 4.080533515221292}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.868198620259846, 4.254173239273261}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598458, 4.427812963325231}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598457, 4.6014526873772015`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598455, 4.7750924114291715`}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598454, 4.948732135481141}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598451, 5.122371859533111}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.868198620259845, 5.296011583585081}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598447, 5.469651307637051}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598446, 5.64329103168902}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598445, 5.81693075574099}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598442, 5.99057047979296}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.868198620259844, 6.16421020384493}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598438, 6.337849927896899}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[58, 85], 0.6823529411764706], 
                    NCache[
                    Rational[22, 51], 0.43137254901960786`]], 
                    PointBox[{0.8681986202598437, 6.511489651948869}]}}}, 
                 Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJxV0ntIU2EYx/Gpa17mlqbb1OgysCBFkv4wDOF9BBdFq5FGecFSU4elKUXU
hkZZhEah1IhGGnRBLKGhSEhGRWHN1ehiLdKtVtGaTfMSbi0zq9Pv/HEOjJfP
zuGc9/ucoy6rza0IFYlE2r+/fyt/LFujtde1B1i3UWoaynzE+P9vwIexXhPY
wdrhtxcjLDu73Oy84LyHtcLKArlhg9XHmuFh7vpJ1givkp5Sm/d/Z/WwgVv9
7CBsHT0tkYcE2T5Yxd1vlunhSmuLr7HlNyuFR7j7i6gQbszb6J2Vh1IenMI9
L4y08IsHtsIMh5jWC/YvIQYv5+YTTnvQbQl0bkorDiE9vN0yesJ2P5Q+YA71
6HfDSeh/BzvR74RT0T8CG9HPz3UQ/W/gBPS/hvXofwXz/UPwcfQ/h/n+Z/BL
9NsFz5fQU1iNfptgP5Fkhesu21lXeRQ9FuxPSgPwvRhdz+dUGVVjLh1L9wbE
TQswTw/b7OhKv+KTUBU8c2asiukiMF8Pa9OkXXX2RFIFnDNX4zQopVQO+3pv
KlTGaCqDz1VPbOl1yagUXpec3rQ1eyHtgqdq+koO5cZQMTwwmD+nEcdSEXxh
RdAcfysW34+HVR8zZ3zSLyI53uMOvG8ZPF+ZclefLKYomO+LgHXoC4f96JPA
l9AXBmvQFwKPo08Em9A3n//fWeibg6fR9xPm+4KwGX0/4Br0+eFsV+ZQd2Ic
zcDxmcO1R5/E0TTsNRmjdQ3xNAXfmUy6vmS1gibgVm2/ZsytoG/w7s6ij7fP
KmkcXiv+daQ5R0VfYWlJ2+J8v4q88Pv+rL6VnQn0Be5RubbNFCSSBz55oGHq
oTSJ/gBP3iKE
                   "]]& ], 
                TagBox[{{{
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519714, 
                    0.}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519712, 
                    0.1736397240519698}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197103`,
                     0.3472794481039396}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197084`,
                     0.5209191721559093}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197065`,
                     0.6945588962078793}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197048`,
                     0.8681986202598491}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405197028`,
                     1.0418383443118189`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519701, 
                    1.2154780683637887`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196992`,
                     1.3891177924157587`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196973`,
                     1.5627575164677285`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196954`,
                     1.7363972405196983`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196934`,
                     1.9100369645716682`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196917`,
                     2.083676688623638}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196898`,
                     2.257316412675608}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196879`,
                     2.430956136727578}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.1736397240519686, 
                    2.6045958607795474`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196842`,
                     2.778235584831517}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0., 1.4759376544417433`}, {0.17363972405196823`,
                     2.951875308883487}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0.17363972405196898`, 2.257316412675608}, {
                    0.34727944810393885`, 2.170496550649623}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.17363972405196898`, 2.257316412675608}, {
                    0.3472794481039387, 2.344136274701593}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559102, 0.6945588962078797}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559101, 0.8681986202598495}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559099, 1.0418383443118193`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559097, 1.2154780683637891`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559095, 1.389117792415759}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559093, 1.5627575164677288`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559091, 1.7363972405196986`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559089, 1.9100369645716684`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559088, 2.083676688623638}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559087, 2.2573164126756082`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559083, 2.430956136727578}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559082, 2.604595860779548}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.520919172155908, 2.778235584831518}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559079, 2.9518753088834875`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559077, 3.1255150329354575`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559074, 3.299154756987427}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559073, 3.472794481039397}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0.34727944810393885`, 2.170496550649623}, {
                    0.5209191721559071, 3.6464342050913667`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078779, 2.691415722805533}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078777, 2.8650554468575025`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078776, 3.0386951709094725`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078774, 3.212334894961442}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078771, 3.385974619013412}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.694558896207877, 3.5596143430653817`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078768, 3.7332540671173517`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078767, 3.9068937911693213`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078765, 4.080533515221291}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078763, 4.254173239273261}}]}, {
                    GrayLevel[0.4], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.694558896207876, 4.4278129633252306`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.5209191721559071, 3.6464342050913667`}, {
                    0.6945588962078759, 4.601452687377201}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598482, 2.3441362747015932`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598481, 2.5177759987535633`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598477, 2.691415722805533}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598475, 2.8650554468575034`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598474, 3.038695170909473}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598473, 3.212334894961443}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259847, 3.3859746190134126`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598467, 3.5596143430653826`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598466, 3.733254067117352}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598465, 3.9068937911693222`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598463, 4.080533515221292}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259846, 4.254173239273261}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598458, 4.427812963325231}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598457, 4.6014526873772015`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598455, 4.7750924114291715`}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598454, 4.948732135481141}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598451, 5.122371859533111}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259845, 5.296011583585081}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598447, 5.469651307637051}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598446, 5.64329103168902}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598445, 5.81693075574099}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598442, 5.99057047979296}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.868198620259844, 6.16421020384493}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598438, 6.337849927896899}}]}, {
                    GrayLevel[0.8], 
                    
                    LineBox[{{0.694558896207876, 4.4278129633252306`}, {
                    0.8681986202598437, 6.511489651948869}}]}}, {
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"Plantae\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Kingdom:Plantae"}]], Identity]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    Directive[
                    Opacity[1]]}}, "Rows" -> {{
                    RGBColor[1, 
                    Rational[83, 85], 
                    Rational[79, 85]]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> Directive[
                    AbsoluteThickness[0.1], 
                    RGBColor[
                    Rational[43, 51], 
                    Rational[43, 51], 
                    Rational[43, 51]]]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Grid"], 
                    TraditionalForm], {0., 
                    1.4759376544417433`}], {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, 
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"Magnoliophyta\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Phylum:Magnoliophyta"}]], 
                    Identity]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    Directive[
                    Opacity[1]]}}, "Rows" -> {{
                    RGBColor[1, 
                    Rational[83, 85], 
                    Rational[79, 85]]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> Directive[
                    AbsoluteThickness[0.1], 
                    RGBColor[
                    Rational[43, 51], 
                    Rational[43, 51], 
                    Rational[43, 51]]]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Grid"], 
                    TraditionalForm], {0.17363972405196898`, 
                    2.257316412675608}], {}, {}, {}, {}, 
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"Liliopsida\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Class:Liliopsida"}]], 
                    Identity]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    Directive[
                    Opacity[1]]}}, "Rows" -> {{
                    RGBColor[1, 
                    Rational[83, 85], 
                    Rational[79, 85]]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> Directive[
                    AbsoluteThickness[0.1], 
                    RGBColor[
                    Rational[43, 51], 
                    Rational[43, 51], 
                    Rational[43, 51]]]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Grid"], 
                    TraditionalForm], {0.34727944810393885`, 
                    2.170496550649623}], {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, 
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"Liliales\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Order:Liliales"}]], Identity]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    Directive[
                    Opacity[1]]}}, "Rows" -> {{
                    RGBColor[1, 
                    Rational[83, 85], 
                    Rational[79, 85]]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> Directive[
                    AbsoluteThickness[0.1], 
                    RGBColor[
                    Rational[43, 51], 
                    Rational[43, 51], 
                    Rational[43, 51]]]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Grid"], 
                    TraditionalForm], {0.5209191721559071, 
                    3.6464342050913667`}], {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, 
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"Iridaceae\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Family:Iridaceae"}]], 
                    Identity]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    Directive[
                    Opacity[1]]}}, "Rows" -> {{
                    RGBColor[1, 
                    Rational[83, 85], 
                    Rational[79, 85]]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> Directive[
                    AbsoluteThickness[0.1], 
                    RGBColor[
                    Rational[43, 51], 
                    Rational[43, 51], 
                    Rational[43, 51]]]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Grid"], 
                    TraditionalForm], {0.694558896207876, 
                    4.4278129633252306`}], {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
                 Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJxV0ntIU2EYx/Gpa17mlqbb1OgysCBFkv4wDOF9BBdFq5FGecFSU4elKUXU
hkZZhEah1IhGGnRBLKGhSEhGRWHN1ehiLdKtVtGaTfMSbi0zq9Pv/HEOjJfP
zuGc9/ucoy6rza0IFYlE2r+/fyt/LFujtde1B1i3UWoaynzE+P9vwIexXhPY
wdrhtxcjLDu73Oy84LyHtcLKArlhg9XHmuFh7vpJ1givkp5Sm/d/Z/WwgVv9
7CBsHT0tkYcE2T5Yxd1vlunhSmuLr7HlNyuFR7j7i6gQbszb6J2Vh1IenMI9
L4y08IsHtsIMh5jWC/YvIQYv5+YTTnvQbQl0bkorDiE9vN0yesJ2P5Q+YA71
6HfDSeh/BzvR74RT0T8CG9HPz3UQ/W/gBPS/hvXofwXz/UPwcfQ/h/n+Z/BL
9NsFz5fQU1iNfptgP5Fkhesu21lXeRQ9FuxPSgPwvRhdz+dUGVVjLh1L9wbE
TQswTw/b7OhKv+KTUBU8c2asiukiMF8Pa9OkXXX2RFIFnDNX4zQopVQO+3pv
KlTGaCqDz1VPbOl1yagUXpec3rQ1eyHtgqdq+koO5cZQMTwwmD+nEcdSEXxh
RdAcfysW34+HVR8zZ3zSLyI53uMOvG8ZPF+ZclefLKYomO+LgHXoC4f96JPA
l9AXBmvQFwKPo08Em9A3n//fWeibg6fR9xPm+4KwGX0/4Br0+eFsV+ZQd2Ic
zcDxmcO1R5/E0TTsNRmjdQ3xNAXfmUy6vmS1gibgVm2/ZsytoG/w7s6ij7fP
KmkcXiv+daQ5R0VfYWlJ2+J8v4q88Pv+rL6VnQn0Be5RubbNFCSSBz55oGHq
oTSJ/gBP3iKE
                   "]]& ]}, {GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, FrameTicks -> None, 
                PlotRange -> All, PlotRangePadding -> None, AspectRatio -> 
                0.6, ImageSize -> 480}], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", 
                 "\"nodes sorted by taxonomic diversity\"", "\[NoBreak]", 
                 "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  
                  ItemBox[#2, Alignment -> {Right, Inherited}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show graph", "input" -> 
         "TaxonomyGraph:PlantData__Show graph"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Other members of order Liliales", "scanner" -> "Data", 
     "id" -> "Siblings:PlantData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlantData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CatalogueOfLife"}], "\n    ", 
         XMLElement["datasource", {}, {"PLANTSDatabase"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Plant\", \"Family:Iridaceae\"][EntityProperty[\"Plant\", \
\"Siblings\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Agavaceae\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Family:Agavaceae"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"agave family\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Aloaceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Aloaceae"}]], Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Dioscoreaceae\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Family:Dioscoreaceae"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"yam family\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Haemodoraceae\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Family:Haemodoraceae"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"bloodwort family\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Hanguanaceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Hanguanaceae"}]], 
                  Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Liliaceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Liliaceae"}]], Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Philydraceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Philydraceae"}]], 
                  Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Pontederiaceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Pontederiaceae"}]], 
                  Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Smilacaceae\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Family:Smilacaceae"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"catbrier famly\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Stemonaceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Stemonaceae"}]], 
                  Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                StyleBox[
                 TagBox[
                  TagBox["\"Taccaceae\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlantData, "Family:Taccaceae"}]], Identity], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}], TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Siblings:PlantData__More"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Members of family Iridaceae", "scanner" -> "Data", 
     "id" -> "Children:PlantData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlantData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CatalogueOfLife"}], "\n    ", 
         XMLElement["datasource", {}, {"PLANTSDatabase"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Plant\", \"Family:Iridaceae\"][EntityProperty[\"Plant\", \
\"SubEntities\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Acidanthera\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Acidanthera"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"acidanthera\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Alophia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Alophia"}]], Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"alophia\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Aristea\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Aristea"}]], Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"aristea\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Belamcanda\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Belamcanda"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"belamcanda\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Calydorea\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Calydorea"}]], Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"violet-lily\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Chasmanthe\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Chasmanthe"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"African cornflag\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Crocosmia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Crocosmia"}]], Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"crocosmia\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Crocus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Crocus"}]], Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"crocus\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Dietes\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Dietes"}]], Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"dietes\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  FormBox[
                   StyleBox[
                    TagBox[
                    TagBox["\"Eleutherine\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlantData, "Genus:Eleutherine"}]], 
                    Identity], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"eleutherine\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Children:PlantData__More"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Wikipedia summary", "scanner" -> 
     "FredholmIntegralEquation", "id" -> "WikipediaSummary:PlantData", 
     "position" -> "800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             Cell[
             "Iridaceae is a family of plants in order Asparagales, taking \
its name from the irises, meaning rainbow, referring to its many colours. \
There are 66 accepted genera with a total of c. 2244 species worldwide \
(Christenhusz & Byng 2016). It includes a number of other well known \
cultivated plants, such as freesias, gladioli and crocuses.", FontFamily -> 
              "Helvetica", FontSize -> 12, LineSpacing -> {1, 3}], 
             TextCell[
             "Iridaceae is a family of plants in order Asparagales, taking \
its name from the irises, meaning rainbow, referring to its many colours. \
There are 66 accepted genera with a total of c. 2244 species worldwide \
(Christenhusz & Byng 2016). It includes a number of other well known \
cultivated plants, such as freesias, gladioli and crocuses.", FontFamily -> 
              "Helvetica", FontSize -> 12, LineSpacing -> {1, 3}]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {}, {
           XMLElement[
           "link", {
            "url" -> "http://en.wikipedia.org/wiki?curid=345330", "text" -> 
             "Full entry"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Wikipedia page hits history", "scanner" -> "Data", 
     "id" -> "PopularityPod:WikipediaStatsData", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{
                    GraphicsComplexBox[CompressedData["
1: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
7CfCgofSlZvufyfQ8PaMj+QnX0g0NzA4zkfigyW67I+3feCVmT9fgijD10/r
T7XYuUHBaoWRZXIkSjuIZJzSdIGpF39im9RJNJO/kfKDmbdOduizi0aM7yYc
mtoXYgeaFdGlhxxIXO9a1u8wawCrPp/7bezH+Env0a7MO46QMO7ymjeKxNbV
HKrf3RkiO8t1mhJIdPdPebQpgwsj6fnuVVkk1n2bWeIv7wyDcnIiV68yPsLm
9b38xA+8TzZqxdYyPmO9YnnuShb4tk9/tHlC4q+nr4YGFjO+PvJcSraHxDvh
zn/aJZh+eKe5bM1XEtMlhQIF3zrCiQKtjfd+kfh7NPc/2ZUcKDBy+B4mwPD8
xaBlaS6WYFAnEMpdQeFly8lLGhEO4D3f8Yjuegp7peXHfHSsYZ7aPX6BrRRe
W1g/NXeTLair1C1otWD27TyHi4mbLGBoDudqliuz7ymr1n3KbFhxM/6/Ezso
FDjbCHGGJtCx2WbXimgKzQrGLI3cLUDktEpa43EKQ6+aT351tYTux9eCzpyh
UCnuQr9QoBVIv37QE1VKYVaatmThM4TRWzv/HqyjkB3TOzrE5NUopNJs9XMK
varnWPN+swEJnsUG799TuO16BGmhbQQxO+Z9ayYpHPCZjAz9ZggepTlqt2aZ
+xtq68ir1IXHjwyHExfSOJ7HMv8+YwFVVUckOZI0RqRLh11aYgzyMR4jsso0
nj3D/LzTA8lVr3ZJ69N4X159+sSwAeSl9y65ZUPjnbi29yo3beFsH6+/nyeN
H8Q0CogfuiAzpyHMeDfDT/flHh5NYL6vRKHNeXE06hnc+jq8yQoEO7Iuu/oS
ONUxb1x+zAJOLBJskY4g0OROZkVMqC2ckussXXKUQI1TSxZNPbADqUXTfKOn
CbQ9JnJ9k4Y5qLyuvZldQDB+9VD373lTeLKrTTLoFoFb1T2Jtnlc+Nh3fwU2
MfxkNXJCZYUVHFln2svuJNDI+JRimI8jFFkUtc8dJpD37mqbQ5EsYOFHTsNP
Ak/Yd2TrtvrAYZHI01fnkpjb/izyoKYPaN71Mt+3nMSxU9bnLdzdIUT7E2ep
AonGK/daexU4g0p6g/j7zUyeE1+qarZzIOLB3ohiUxJlVyYJyjszft/0OLPM
iemH1ZVntWTZcOLSt0/cQBLvHjWxDox2B0/H0aY5+5i8FosY7CxhQ+2guXff
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
Oefs+n+vRzE/hO53kRfH6f+3/X8AOVFaLw==
                    "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl2mW4VmUCheFDHbq7u1GkS1C6W0oE6e7u7u5uUEC6EaW7ke5QGgy6Ye7N
/Bjd633Ws8681zB82w9TN2pfrV3YkJCQMP6TOdr//54p2v+fc3rO6O+pQ0NC
ckQOCYkdLiRkdZSQkJnhQ0KWRwwJGancImpISL0IISFtI4WEVDR0TueO/n7u
QWwndhJbg1Xm5uOW5mbkvvMcFXvkebz9ztzB3MbcV9z/uCHOb3L7clvo9+DW
1i+IZ8O/5ifDd+ot4W/kT6HNwMfh8/B+eEp+KD8B/yV+Qz4iX5a32fuRX4xf
LbgrnsG9U3n+ynks56v0Z+gv0x+h/4PtNrYr2P5X56zObf193AN+9g78BL4a
r8TNyy3FzcCNjr+Vo+AP5XH8TvxB/Eb8l/i//E/4DX4ffnP97vxa+gXwrHgh
PCm+g7+Yv4E/mT8dH4vPxfviKfgR+PH5L/Dr8mH5kvyrvfr8ovyqwX3x9O6e
0nN25zGdr9Sfrr9Uf7h+c/t17be2X97+P3pn9P7i7OXvx7fjx/FVeEV+Hn5J
fnp+NPyNHBl/II/ld+QP5Dfkv8D/4X/Er/N785vpd+PX1M+PZ8EL4knw7fxF
/PX8Sfxp+Bh8Dt4HT84Pz4/Hf45fkw/JF+Wt9urxv+VXCe6Mp3P/FJ6/dB7D
+Qr9afo/6w/T/952K9vlbP+tc1rnT/093H1+9u/4MXwlXoGbm1uCm44bFX8t
R8Lvy2P4HfgD+A34z/G/+R/wa/xe/Kb6Xfk19PPhmfECeGL8d/5C/jr+RP5U
fDQ+G++NJ+OH48flP8OvygflC/KW4Ncx/xt+5eC+eFp3T+75C+fRnf+iP1X/
J/2h+s3s17Hf0n5Z+4/1/tC7xdnN34v/hh/FV+Dl+bn4xflp+VHwV3JE/J7c
ntuf+yP3GfaY+x67yu3JbaLbhfudbl48E54fT4T/5mcv4K/lT+BPwUfhs/Be
eFJ+WH4c/lP8inxAPi9vtleXX4RfKbgvnsbdk3nO5jya8+X6U/SX6A/Rb2q/
tv0W9svYf6R3Su8mZxd/D74NP4L/gpfj5+QX46fhR8ZfyqH4XXk0vx2/H78+
/yn+iP8Ov8LvwW+s35lfXT8jlg9LiG3jzueu4Y7nTuaOxGfiPfEk3DDc2Nwn
+GV5v3xO3hT8GuYX5lcM7oundveknrM6j+p8mf5k/cX6g/Wb2K9lv7n90vYf
6p3Uu8HZyd+N/4ofxpfjZfk5+EX5qfmR8BdyBPyOPIrflt+XX4//BH/If4tf
5nfnN9LvxK+mnwfPgOfFE+C/8ucFn0f8cfxJ+Ah8Bt4j+EDjxuL+5/GSrX3y
WXmjrTrcr7kVgvviqdw9iecszqM4X6o/SX+R/iD9xrZr2m5mu5TtB3on9K5z
dvB34VvxQ/gyvAz/K/63/FT8iPhzOTx+Wx7Jb8Pvw/+B/x/+gP8Gv8Tvxm+o
35FfVT83nh7Pg8fHt/LnBp9J/LH8ifhwfDreHU/M/4TH5P+LX5T32jsjb7BX
m18ILx/cGU/p/ok9Z3Ye2fnP+hP1F+oP1G9kv4b9pvZL2r+vd1zvGmc7fye+
BT+IL8VL87Pzv+Gn5Ifiz+Rw+F/yCH5rfm9+Xf6/+H3+a/wivyu/gX4HfhX9
XHg6PDceD9/CnxN8LvHH8Cfgw/BpeDc8Ef8jHoP/D35B3mPvtLzeXi1+Qbxc
cGc8hfsn8pzJeSTnP+lP0F+gP0C/of3v7DexX8L+Pb1jelc5v/M3Ywewn7FS
3C+5RbgpuBG4T+Ww+J/ycG4rbi/u99x/8Hv8V/gFfhf+j/rt+ZX1c+Jp8Vx4
XHwzf3bwmcQfzR+PD8Wn4l3xhPwPeHT+3/h5ebe9P+R19mryC+Blg/viyd09
oeeMziM6X6I/Xn++fn/9Bvar229sv7j9u3pH9a5wfuPvwDfh+/Gf8JL8L/iF
+cn54fEnchj8ljyM35Lfk1+H/zd+l/8SP8/vzK+v345fST8HngbPicfBN/Fn
BZ9L/FH8cfgQfAreBU/Af49H4z/Gz8m77J2S19qrwc+PlwnujCdz/wSeMzgP
db5Yf5z+PP1+wXuh/Wr2G9kvZv+O3hG9y5xt/O34RnwfvgQvwc/G/5qfjB8u
eI+VQ/Cb8lB+C34Pfm3Hj/E7/Bf4OX4nfj39tvyK+l/hqfEceGx8I39m8NnE
H8kfjE3GOmPxue+wqNxH2Fl5p62T8hpb33Hz4aWD++JJ3T2+5/TOIzhfpD9W
f65+3+C90M+uar+h/aL2b+sd1rvE+ZX/O74B34svxovzs/IL8ZPywwbvsfIn
+YY8hN+c351fi/8Iv81/zj/L78j/Qb+NfgX97Hgq/Cs8Fr6BPyP4bOKP4I/F
B+GT8E54PP5bPAr/IX5G3mHvhLzaXnV+XrxUcGc8ifvH85zOeXjnC/XH6M/R
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
                    
                    "]]}]}, {}, {}}, {{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    LineBox[CompressedData["
1:eJwl22XAEGXCheGXDkHp7u5GSQkBJaS7G5SSUERQpJXu7u7u7u5O6W4UO77r
2e/POmfuc5+XUXd4dnTTt+xSs3OkiIiIrHEiIsIfM0SPiEgQJSKiQKyIiKFu
LI0RETE1akTEqtgREQfxB/hF/BVeNXJEROeYERFNo0VEfPZORERrfCDeAx+N
P+PHwf/mv4tnkz+xV0RezT2N7eYexgpya3E/4jbnbtO9pntM9zcsqesYrtP5
dfTlzuKO4k7hTsA3cBdwd3NT4yXx3HhxvIGtXvzP+N/xb+OR9F7jv+NiREZ+
Qn5B94fpL9OfFn6d+ofwh/gl/DVejdDFfjP+5/w2+CD8S3wM/pwfF/+H/x6e
Xa5or6hc3d4a/hl8D/8IXohfm1+O34K/Xf+6/nH9W/q/48nkmHJ6+Xv+bP5o
/lT+RHwjfyF/Dz8N/iGeBy+BN7T3Df9zfl/+HTyy3hv8D5wWkYmfyEUh94fr
L9efrr9G/zD+CL+Mv8Gr87+w35zfgd8WH4x/hY/FX/Dfxf/lx8NzyJXsFZNr
2FvLP4vv5R/FC/Pr8MvzW/J36N/QP6F/W/8PPLkcS84g9+PP4Y/hT+NPwjfx
F/H38tPipfC8eEm8kb3e/A787/l38Sh6P+N/4m5HZOYn5hd2f4T+Cv0ZwFr9
I/hj/Ar+M16D39V+C35Hfjt8CN4TH4e/5L+H/8ePj+eUK9srLte0t45/Dt/H
P4a/z6/Lr8Bvxd+p/5P+Sf07+n/iKeTYcka5P38ufyx/On8yvpm/mL+Pnw4v
jefDP8Qb2+vD78jvx7+HR9X7Bf8L94eILPwk/PfdH6m/Un+m/jr9o/gT/Cr+
C16T381+S2Infnv8B/xrfDz+ih8PD8MJ8FxyFXsl7K3nnsf2Y8exD9TqcT/m
tubu0r2pe0r3rp/9F55SfkfOJA/gz+OP48/gT8G38Jfw9/PT42Xw/HgpvIm9
b/md+P359/Foem/xv/Ho4d3nP5LyP3B/lP4q/Vnh16p/DH+KX8Pf4rX43e23
4nfmf4b/iPfCJ4R3Cj8+HglPiOeWP7VX0l4texv4F/AD+Am8CL8+/xN+G/5u
/Vv6p/Xv6f+Np5LjyJnlgfz5/PHhv/vYVu5S7gFuBqwsVgArbbupre+4nbkD
uA/w6Hq/4v/gUEQ2fjJ+EfdH6692c7b+Bv3j+DP8Ov4rXpvfw35rfhf+5/hQ
/Bt8Ynif8BPgkfE8rqva+tBWbVsbuRexg9hJblFuA25FblvuHv3b+mf07+v/
g6eW48pZ5EH8BfwJ/Jn8afg2/jL+QX5G/CO8IF4Gb2avL78LfyD/IR5D7zf8
Xzz87Zmdn5xf1P0x+mv05+hv1D+BP8dv4L/hdfhfktrwv+B3wIfhvfFJ4V3C
T4hHwRPheeVq9krZq2NvE/8Sfgg/hRfjN+RX4rfj79W/o39W/4H+v3ga+V05
qzyYv5A/kT+LPx3fzl/OP8TPhJfDC+Fl8eb2vud/wR/Ef4TH1Psd/w93GZGD
n4JfTBirv1Z/rv4m/ZP4C/wn/He8Lv8r+235Xfkd8eF4H3xyeJfwE+FR8cR4
Prm6vdL26trbzL+MH8ZP48X5jfiV+e35+/Tv6p/Tf6j/H55Wfk/OJg/hL+JP
4s/mz8B38FfwD/Mz4+XxwvhHeAt7/fhd+YP5j/FYen+El52zjlsROfkp+cXd
H6e/Tn+e/mbwFP4Sv4n/gdfj97Tfjt/Nfid8BP4tPiW8T/iJ8Wh4Ejy/XMNe
GXv17G3hX8GP4GfwEvzG/Cr8z/j79e/pn9d/FH5xcjo5nvwDdzF3MncOdya8
k7uSe4SbBa+Av4+Xw1ty+3O7cYfYeoLH1vsTj+TZVSJy8VPxS7g/Xn+9/nz9
Lfqn8Vf4LfxPvD7/a/vt+d3JnfGR+Hf41PA+4SfBo+NJ8QJyTXtl7dW3t5V/
FT+Kn8VL8pvwP+V/zj+gf1//gv5j/Uhyejm+nF3+kb+EP4U/lz+Lv4u/in+U
nxX/GP8AL4+34g/gdw9/7vhP8Xf0/sIjx/nfX/6I3PzU/JLuT9DfoL9Af6v+
Gfw1fhv/C2/A72X/M34P+13wUXhffFp4p/CT4jHwZOEsK9ey95G9Bva28a/h
x/Bz+If8pvyq/A78g/oP9C/qP9GPLGeQE8g55KH8pfyp/Hn82fzd/NX8Y/xs
+Cd4EbxCOIfzB/J78H/kP8Pj6P2NR/Hwcfl5+Gn4H7o/UX+j/kL9bfpn8Tf4
HfxvvCH/G/uf87+0/wU+Gv8enx7eKfxkeEw8eTjPyrXtlbPX0N52/nX8OH4e
L8Vvxq/G78g/pP9Q/5L+U/0ockY5oZxTHsZfxp/Gn8+fw9/DX8M/zs+OV8SL
4h+H8zh/EP9L/lD+czyu3j94VM//Lj8vPy2/lPuT9DfpL9Lfrn8O/xm/i/+D
N+L3tt+B/5X9rvgYvB8+I7xT+MnxWHiKcJ6V69grb6+RvR38G/gJ/AJemt+c
X53fiX9Y/5H+Zf1n+lHlTHIiOZc8nL+cP52/gD+Xv5e/ln+CnwOvhBfDPwnn
cf5g/lf8YfwX+Lt6/+LRPP97/Hz8dOHdrbtZd7HuDt3z2C/YPexfTmNuH9sd
uT1td8PH4v3xmeGdwk+Bx8ZThrOsXNdeBXuN7e3k/4SfxC/iZfgt+DX4nflH
9B/rX9F/rh9NziwnlnPLI/gr+DP4C/nz+Pv46/gn+TnxynhxvGI4i/OH8Hvy
h/Nf4u/p/YfH4+bnpueWdm+K7hbdJbo7dS/gb/H7+H94E+63tjtxv7bdHR+H
D8BnhfcJPyX+Dp4qnGXlevY+treLexM7hV3CynJbcmtyu3CP6j7Rvar7ws+O
LmeRk8h55JH8lfyZ/EX8+fz9/PX8U/xceBW8BN6e+wP3a+4I7issXvgNXj+6
v97xXRZwnYFbxv2p+lv1l4Zfp/5F/Ff8QfgfgnJT/ne2O9vu5Wf3cHs8PhCf
Hd4j/FR4HLyI6/q2PrHVhLubews7jV3mfsRtxa3F/YJ7TP+p/jX9l/ox5Kxy
UjmvPIq/ij+Lv5i/gH+Av4F/mp8b/xQviVcK52/+j/xe/JH813h8vUicGJ49
Ab+g64z8su5P09+mv0x/t/4l/Df8IR5Jbsbva7+L/W/sf4lPwAfhc8I7hJ8a
j4unDudYuYG9ivaa8vfwb+Nnwu/F3Nbc2tyu3OO6z3Sv677SjSlnk5PJ+eTR
3NXc2dwlthfyD/I38s/w8+BV8Q/xyuH8zR/K/4Y/iv8GT6AXmRPTsyfkF3Kd
if+R+9P1t+sv19+jfxn/HX+ER5ab87+3/4X93va/wifig/G54f3BT4O/i6cJ
Z1i5ob1K9prx9/Lv4GfxK3h5fht+HX43/gn95/o39F/rx5Kzy8nl/PIY/hr+
HP5S/iL+If4m/ll+XrwaXgqvEs7g/GH83vzR/J/xhHpROLE8fyJ+YdeZ+eXc
n6G/Q3+F/l79K/gf+GM8ityC389+V/t97PfEJ+FD8HnhHcJPi7+Hpw1nWLmR
vcr2mvP38e/i5/CreAV+W35dfnf+Sf0X+j/pv9GPLeeQU8gF5LH8tfy5/GX8
xfzD/M38c/x8eHW8NP5pOIPzh/P78Mfwf8ET6UXlxPb8ifnvu87CL+/+TP2d
+iv19+lfxf/En+BR5Zb8/va72f/W/tf4ZPwHfH54n+Dp8Hh4unCGtdfYXhV7
Lfj78Xv4efwa/jGlHb8evwf/lP5L/Zv6P+u/I+eUU8oF5XH8dfx5/OX8Jfwj
/C388/z8eA28DF41nMH5I/jf8sfy3+KJ9aJx3vH8SfgfuM7Kr+D+LP1d+qv0
9+tfw//Cn+LR5Fb8Afa72//Ofi98Cv4jviC8U/D0eHw8fTjH2mti71N7LfkH
8Pv4Bfw6/gm/Pb8+/0v+af1X+rf0f9GPI+eSU8mF5PH89fz5/BX8pfyj/K38
C/wCeE28LF4tnMP5I/nf8cfxf8WT6EXnxPH8SflFXGfjf+z+bP3d+qv1D+hf
x//Gn+HR5db8gfZ72O9r/xt8Kj4UXxjeK3gGPAGeIZxj7TW1V9Veq/B9GH+A
X8Rv4BX5n/Eb8L/in9F/rX9b/61+XDm3nFouLE/gb+Av4K/kL+Mf42/jX+QX
xGvhH+HVwzmcP4rflz+e/xueVC8GJ67nT8Yv6jo7/xP35+jv0V+jf1D/Bv4P
/hyPIbfhD7L/pf3v7ffGp+HD8EXhvYJnxBPiGcM51l4ze9XstQ7fifGH+CX8
J7wS/3N+Q35P/ln9N/p39H/Vf1fOI6eR35cn8jfyF/JX8Zfzj/O38y/xC+G1
8XJ4jXAO54/mf8+fEL4T48n0YnLe9fzJ+cVc5+BXdH+u/l79tfqH9H/C/8Vf
4DHltvzB9r+y389+H3w6Pjy8H7BMWCIsUzjD2mpuq7qtNuEbMf4Iv4zfxCtz
O3Abcb/2s8/p/6x/N3zP139PziunlT+QJ/E38RfxV/NX8E/wd/Av8wvjdfDy
eM1wBueP4ffjTwzfiPHkerE473n2FPzirnPyK7k/T3+f/jr9w/o38f/wl3gs
uR1/iP2e9vvb/xafgY/AF4d3Cp4ZT4xnDudYey3s1bDXNnwjxh/jV/BbeBV+
R35jfi/+ef1f9O/p/64fT84np5OLyJP5m/mL+Wv4K/kn+Tv5V/jv43XxCnit
cA7nj+X3508K34jxFHqxOfE8f0p+Cde5+JXdn6+/X3+9/hH9W3j4APgKjy23
5/9g/2v7A+x/B8/kj8SXhHcKngVPgmcJ51l7Lfk17bUL34jxJ/hV/Db+Kb8T
vwn/G/4F/bf698M3cdf5Xad3XZQ7hbuFu4S7lruKe4q7i3uV+wFeD/8Yrx3O
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
hbuSG18nv/300f///5dQgPt/bGlDLQ==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3462063#1"]& ]}}], {}}, {
                   GridLines -> Dynamic[
                    Join[{{{3.3450624*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.849984*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, {0, 100, 200, 300, 400}}, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], FrameTicks -> {{{{0., 
                    FormBox[
                    TagBox["0", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50., 
                    FormBox[
                    TagBox["50", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100., 
                    FormBox[
                    TagBox["100", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {150., 
                    FormBox[
                    TagBox["150", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200., 
                    FormBox[
                    TagBox["200", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {250., 
                    FormBox[
                    TagBox["250", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {300., 
                    FormBox[
                    TagBox["300", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {350., 
                    FormBox[
                    TagBox["350", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {20., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {40., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {60., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {80., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {90., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {110., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {120., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {130., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {140., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {160., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {170., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {180., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {190., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {210., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {220., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {230., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {240., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {260., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {270., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {280., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {290., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {310., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {320., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {330., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {340., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {360., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {370., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{0., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {150., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {250., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {300., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {350., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {20., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {40., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {60., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {80., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {90., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {110., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {120., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {130., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {140., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {160., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {170., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {180., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {190., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {210., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {220., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {230., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {240., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {260., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {270., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {280., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {290., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {310., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {320., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {330., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {340., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {360., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {370., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{3.3450624*^9, 
                    FormBox[
                    StyleBox["\"2006\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    StyleBox["\"2008\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox["\"2010\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    StyleBox["\"2012\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    StyleBox["\"2014\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    StyleBox["\"2016\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    StyleBox["\"2018\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox["\"2020\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.849984*^9, 
                    FormBox[
                    StyleBox["\"2022\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}}, {{3.3450624*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.849984*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.3450624*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3765984*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4397568*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5028288*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5659872*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6922176*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7552896*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.818448*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.849984*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}}}}, ImagePadding -> All, 
                    GridLines -> {{{3.3450624*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.849984*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, PlotRangePadding -> None, 
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, 
                    AxesOrigin -> {3.4064928*^9, 0}, 
                    FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {100., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {200., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {300., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {20., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {40., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {60., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {80., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {120., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {140., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {160., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {180., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {220., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {240., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {260., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {280., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {320., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {340., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {360., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {380., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {400., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{3.5*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.6*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.7*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.8*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.4*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.42*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.44*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.46*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.48*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.52*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.54*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.56*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.58*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.62*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.64*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.66*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.68*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.72*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.74*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.76*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.78*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.82*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.84*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.86*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.88*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.9*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {{{3.3450624*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.849984*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, DisplayFunction -> 
                    Identity, 
                    PlotRangePadding -> {{None, None}, {None, None}}, 
                    PlotRangeClipping -> True, ImagePadding -> All, 
                    DisplayFunction -> Identity, AspectRatio -> 0.2, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.4064928*^9, 0}, AxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BaseStyle -> AbsoluteThickness[1], 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {{{3.3450624*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.849984*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, GridLinesStyle -> 
                    GrayLevel[0.9], ImageSize -> Full, 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> PointSize[Medium], 
                    "PointSizeFunction" -> "SmallPointSize", 
                    "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}, "AxesInFront" -> True}, 
                    PlotRange -> {{3.4064928*^9, 3.8256192*^9}, {
                    0, 376.92181993840353`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{None, None}, {None, None}}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "DatePlot", "Frame"]& ]}, 
                    Ticks -> {Automatic, Automatic}}], 
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"\"in \"", "\"hits per day\""}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}, "Labeled", DisplayFunction -> (FormBox[
                   GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    
                    ItemBox[#2, Alignment -> {Left, Inherited}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{#, ",", 
                    RowBox[{"{", #2, "}"}], ",", 
                    RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                    "]"}]& )]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"based on weekly averages of daily hits to English\
\[Hyphen]language \"", 
                    TagBox[
                    StyleBox[
                    TemplateBox[{"\"\\\"\"", "\"iris family\"", "\"\\\"\""}, 
                    "RowDefault"], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Annotation[#, {
                    "URL" -> "http://en.wikipedia.org/wiki?curid=345330", 
                    "Popup" -> "link to Wikipedia", "OneClick" -> False}, 
                    "ExternalLink"]& ], "\" page\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,timeseriesdata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "TimeSeriesPlot"}, {}], 
       "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Log scale", "input" -> 
         "PopularityPod:WikipediaStatsData__Log scale"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "Iris", "template" -> 
        "Assuming \"Iris\" is a plant${separator}Use as ${desc} or ${desc} or \
${desc} or ${desc} or ${desc} or ${desc} or ${desc} or ${desc} or ${desc} or \
${desc} or ${desc} instead", "count" -> "12", "pulldown" -> "false", 
        "default" -> "{\"C\", \"Iris\"} -> {\"Plant\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Plant", "desc" -> "a plant", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Plant\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Mythology", "desc" -> "a mythological figure", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Mythology\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MinorPlanet", "desc" -> " referring to minor planets", 
          "input" -> "{\"C\", \"Iris\"} -> {\"MinorPlanet\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Satellite", "desc" -> "a spacecraft", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Satellite\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Word\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MusicWork", "desc" -> "a music work", "input" -> 
          "{\"C\", \"Iris\"} -> {\"MusicWork\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Movie", "desc" -> "a movie", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Movie\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "GivenName", "desc" -> "a given name", "input" -> 
          "{\"C\", \"Iris\"} -> {\"GivenName\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Financial", "desc" -> "a financial entity", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Financial\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Anatomy", "desc" -> "a human anatomical structure", 
          "input" -> "{\"C\", \"Iris\"} -> {\"Anatomy\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Color", "desc" -> "a color", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Color\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Species", "desc" -> "a species specification", "input" -> 
          "{\"C\", \"Iris\"} -> {\"Species\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "Iris", "template" -> 
        "Assuming iris family${separator}Use ${desc} or ${desc} instead", 
        "count" -> "3", "pulldown" -> "false", "default" -> 
        "{\"DPClash\", \"PlantE\", \"Iris\"} -> {\"Family:Iridaceae\", \"dflt\
\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Family:Iridaceae", "desc" -> "iris family", "input" -> 
          "{\"DPClash\", \"PlantE\", \"Iris\"} -> {\"Family:Iridaceae\"}"}, \
{}], 
        XMLElement[
        "value", {
         "name" -> "Genus:Iris", "desc" -> "iris", "input" -> 
          "{\"DPClash\", \"PlantE\", \"Iris\"} -> {\"Genus:Iris\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Genus:Iris:64106", "desc" -> "Iris", "input" -> 
          "{\"DPClash\", \"PlantE\", \"Iris\"} -> {\"Genus:Iris:64106\"}"}, \
{}]}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www4c.wolframalpha.com/sources/\
PlantDataSourceInformationNotes.html", "text" -> "Plant data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "9", "datatypes" -> "Plant", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "2.41", "parsetiming" -> "0.301", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP5945117igeff9d837f9600005a41e4b291b2c290", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "6", "related" -> 
    "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5946117igeff9d837f9600006866e62heh1a89c58606913755849383065", "version" -> 
    "2.6", "inputstring" -> "Iris"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 6, 1, 14, 33, 10.47642`7.772787887413764}, "Line" -> 295,
     "SessionID" -> 28411313968657292810}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Iris"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{463., {744., 750.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.83156119058554*^9},ExpressionUUID->"3a8b10dd-b53c-4cdf-9550-8c8fed69cbbe"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"irisData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
     ",", "\"\<Data\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.720291424969858*^9, 3.720291473032188*^9}, {
  3.7202922395120068`*^9, 3.720292261065255*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"44c4d1eb-cf7e-4829-9536-ef083e914bf8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"irisData", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.720292307809415*^9, 3.720292309011464*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"fccf31b7-92aa-4ff6-a726-dfa85ea34c93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.1`", ",", "3.5`", ",", "1.4`", ",", "0.2`"}], "}"}], 
    "\[Rule]", "\<\"setosa\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.9`", ",", "3.`", ",", "1.4`", ",", "0.2`"}], "}"}], 
    "\[Rule]", "\<\"setosa\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.7`", ",", "3.2`", ",", "1.3`", ",", "0.2`"}], "}"}], 
    "\[Rule]", "\<\"setosa\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.720292309508232*^9, 3.721744071523218*^9, 
  3.72174442804597*^9, 3.721745213510213*^9, 3.721750169411976*^9, 
  3.721750229641597*^9, 3.831561212661764*^9},
 CellLabel->
  "Out[297]=",ExpressionUUID->"f071433b-4552-439b-9dac-1f4986f37dbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
   ",", "\"\<VariableDescriptions\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.720291424969858*^9, 3.7202914361414022`*^9}, {
  3.720292275118464*^9, 3.720292287819645*^9}},
 CellLabel->
  "In[298]:=",ExpressionUUID->"ae4f636a-8cd7-4ebe-8e74-86806d602923"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\<\"Sepal length in cm.\"\>", ",", "\<\"Sepal width in cm.\"\>", 
    ",", "\<\"Petal length in cm.\"\>", ",", "\<\"Petal width in cm.\"\>", 
    ",", "\<\"Species of iris\"\>"}], "}"}], 
  "\[Rule]", "\<\"species of iris\"\>"}]], "Output",
 CellChangeTimes->{{3.720291426182817*^9, 3.720291437479075*^9}, {
   3.72029226897534*^9, 3.720292288819929*^9}, 3.7217440715886307`*^9, 
   3.721744428120199*^9, 3.721745213728487*^9, 3.721750169473255*^9, 
   3.72175022972512*^9, 3.8315612152063017`*^9},
 CellLabel->
  "Out[298]=",ExpressionUUID->"225bac20-2ed5-41fc-9c7d-045dc2ed89c4"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "7777", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomIris", "=", 
   RowBox[{"RandomSample", "[", "irisData", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.720295152797858*^9, 3.720295164395281*^9}, {
   3.720295314497216*^9, 3.720295358135592*^9}, 3.721743973180048*^9},
 CellLabel->
  "In[299]:=",ExpressionUUID->"125c55c0-f107-4d31-b55d-0e365f42ea06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomIris", "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "5"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.721743976924765*^9, 3.721743987138936*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"199e3820-d793-44e9-b6e7-7bb5827973a9"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6.4`", ",", "2.8`", ",", "5.6`", ",", "2.1`"}], "}"}], 
     "\[Rule]", "\<\"virginica\"\>"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5.`", ",", "3.6`", ",", "1.4`", ",", "0.2`"}], "}"}], 
     "\[Rule]", "\<\"setosa\"\>"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7.2`", ",", "3.6`", ",", "6.1`", ",", "2.5`"}], "}"}], 
     "\[Rule]", "\<\"virginica\"\>"}], ",", 
    RowBox[{"\[LeftSkeleton]", "145", "\[RightSkeleton]"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5.4`", ",", "3.`", ",", "4.5`", ",", "1.5`"}], "}"}], 
     "\[Rule]", "\<\"versicolor\"\>"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7.1`", ",", "3.`", ",", "5.9`", ",", "2.1`"}], "}"}], 
     "\[Rule]", "\<\"virginica\"\>"}]}], "}"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{
  3.720295164938931*^9, {3.720295262107585*^9, 3.720295274656169*^9}, {
   3.720295324370557*^9, 3.720295360494795*^9}, 3.721744071672853*^9, 
   3.721744428203361*^9, 3.721745213828333*^9, 3.7217501695407877`*^9, 
   3.721750229823999*^9, 3.831561217742728*^9},
 CellLabel->
  "Out[301]//Short=",ExpressionUUID->"62a3ca9e-6cd2-4385-b2ef-1426968d29f8"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainIris", "=", 
   RowBox[{"randomIris", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "105"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testIris", "=", 
   RowBox[{"randomIris", "[", 
    RowBox[{"[", 
     RowBox[{"106", ";;"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7202952317665358`*^9, 3.720295236699635*^9}, {
  3.72029536912582*^9, 3.720295402650655*^9}},
 CellLabel->
  "In[302]:=",ExpressionUUID->"b767ce10-8ad7-46aa-ba62-95ab2ec3d0b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classifyMethods", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<DecisionTree\>\"", ",", "\"\<GradientBoostedTrees\>\"", ",", 
     "\"\<LogisticRegression\>\"", ",", "\"\<Markov\>\"", ",", 
     "\"\<NaiveBayes\>\"", ",", "\"\<NearestNeighbors\>\"", ",", 
     "\"\<NeuralNetwork\>\"", ",", "\"\<RandomForest\>\"", ",", 
     "\"\<SupportVectorMachine\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7202955648388233`*^9, 3.720295622004216*^9}, 
   3.720295858730053*^9},
 CellLabel->
  "In[304]:=",ExpressionUUID->"d9c468e6-8f8b-472a-9e87-671d2966a1a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainIrisClassifiers", "=", 
  RowBox[{"Association", "@@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "\[Rule]", " ", 
       RowBox[{"Classify", "[", 
        RowBox[{"trainIris", ",", 
         RowBox[{"Method", "\[Rule]", 
          RowBox[{"{", "#", "}"}]}]}], "]"}]}], "&"}], "/@", 
     "classifyMethods"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.720295863976836*^9, 3.720295924358357*^9}, {
  3.720295980300219*^9, 3.72029598948816*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"8b263840-d205-4d02-8c21-810cd890449b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"DecisionTree\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.086288, "MaxTrainingMemory" -> 172640,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 45.053382`8.40630237439445}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 3, 3, 4}], 
            "NumericalThresholds" -> {-0.1518309762973461, -1.160705076703472,
              0.640239011986483, 0.557182395931446}, "NominalSplits" -> {}, 
            "Children" -> 
            RawArray["Integer16",{{-4, -5}, {-1, 3}, {4, -2}, {-3, 1}}], 
            "LeafValues" -> 
            RawArray["UnsignedInteger8",{{29, 1, 1}, {1, 1, 27}, {1, 28, 1}, {
              1, 1, 3}, {1, 2, 1}}], "RootIndex" -> 2, "NominalDimension" -> 
            0]], "Processor" -> MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], "Calibrator" -> 
         MachineLearning`CalibratorFunction["TemperatureScaling", 
           Association["Theta" -> 0.8915667277637653]], "Method" -> 
         "DecisionTree", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["0e29fc96-6fa5-44ce-b28c-cfd858656862"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.175784`5.6965243362022155, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.4829180132418554, 0.11391951702746642`], "Accuracy" -> 
            Around[0.893939393939394, 0.04049183336765798], "EvaluationTime" -> 
            0.000050188696868348875`, "TestSize" -> 63, "ModelMemory" -> 
            6344., "ModelUtility" -> -0.011350938313620551`, "TrainingSize" -> 
            84, "TrainingTime" -> 0.01687485473088055, "TrainingMemory" -> 
            88384., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
              Around[0.5061664658881089, 0.20224316454576297`], 
              Around[0.4024352216675661, 0.15918206593498033`], 
              Around[0.5401523521698913, 0.20047994293485122`]}, 
            "AccuracyHistory" -> {
              Around[0.8787878787878789, 0.07046360878661401], 
              Around[0.9242424242424244, 0.05712889332137579], 
              Around[0.878787878787879, 0.070463608786614]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6733684260248534, 0.09713556498713985], "Accuracy" -> 
                 Around[0.8058608058608067, 0.058817348325240874`], 
                 "EvaluationTime" -> 0.000022169581277431988`, "TestSize" -> 
                 90, "ModelMemory" -> 6312, 
                 "ModelUtility" -> -0.3261384228493678, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 576400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6733684260248534, 0.06868521669679316]}, 
                 "AccuracyHistory" -> {
                   Around[0.8058608058608067, 0.041590145852189044`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.4829180132418554, 0.11391951702746642`], "Accuracy" -> 
                 Around[0.893939393939394, 0.04049183336765798], 
                 "EvaluationTime" -> 0.000050188696868348875`, "TestSize" -> 
                 63, "ModelMemory" -> 6344., 
                 "ModelUtility" -> -0.011350938313620551`, "TrainingSize" -> 
                 84, "TrainingTime" -> 0.01687485473088055, "TrainingMemory" -> 
                 88384., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.5061664658881089, 0.20224316454576297`], 
                   Around[0.4024352216675661, 0.15918206593498033`], 
                   Around[0.5401523521698913, 0.20047994293485122`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8787878787878789, 0.07046360878661401], 
                   Around[0.9242424242424244, 0.05712889332137579], 
                   Around[0.878787878787879, 0.070463608786614]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000050188696868348875`, 
                "MeanCrossEntropy" -> 
                Around[0.4829180132418554, 0.11391951702746642`], 
                "ModelMemory" -> 6344., "TrainingMemory" -> 88384., 
                "TrainingTime" -> 0.049341374069108365`], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}], 2]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 2], 
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 6.453125*^-6, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546825196721`16.33594912658242*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.013134673777196649`, 
             "ElapsedTimes" -> 0.03993, "ExperimentCounts" -> 1], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 0.06567336888598325, 
             "ElapsedTimes" -> 0.06854500000000001, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 0.692203, 
         "MaxTrainingMemory" -> 801200, "DataMemory" -> 24976, 
         "FunctionMemory" -> 110176, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 33, 45.651935`8.412034167124679}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"GradientBoostedTrees\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.109153, "MaxTrainingMemory" -> 172392,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 45.772671`8.413181232698017}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3}], 
             "NumericalThresholds" -> {-0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.9486122727394104, -1.1736122369766235`}], 
             "Children" -> RawArray["Integer16",{{-1, -2}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray[
               "Real32",{-1.1736122369766235`, -0.9611122608184814, \
-1.1669946908950806`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {0.5956623256206514, 
              0.8988964259624482}, "LeafValues" -> 
             RawArray[
               "Real32",{-1.1703513860702515`, -0.9786123037338257, \
-0.9486122727394104}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              1.0329983830451968`}, "LeafValues" -> 
             RawArray["Real32",{
               0.12998202443122864`, -0.07230287045240402, \
-0.07205197960138321}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.07216715812683105, 
               0.1196659579873085, -0.06561771780252457}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {0.5956623256206514, 
              0.9445801377296449}, "LeafValues" -> 
             RawArray["Real32",{-0.06895381957292557, 0.10424259305000305`, 
               0.13092614710330963`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              1.0345809459686282`}, "LeafValues" -> 
             RawArray["Real32",{
               0.1154484897851944, -0.06991656869649887, \
-0.06957121938467026}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6225796639919282}, "LeafValues" -> 
             RawArray["Real32",{-0.06968987733125687, 
               0.10558127611875534`, -0.0645245909690857}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {0.5956623256206514, 
              0.9445801377296449}, "LeafValues" -> 
             RawArray["Real32",{-0.06645454466342926, 0.09310564398765564, 
               0.11627013981342316`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.5956623256206514}, "LeafValues" -> 
             RawArray["Real32",{
               0.10447540134191513`, -0.06800476461648941, \
-0.06751535087823868}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.06751679629087448, 
               0.09703777730464935, -0.06124018505215645}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {0.5956623256206514, 
              0.8988964259624482}, "LeafValues" -> 
             RawArray["Real32",{-0.06427430361509323, 0.08389657735824585, 
               0.10604976117610931`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.12638637050986293`}, "LeafValues" -> 
             RawArray["Real32",{
               0.09594235569238663, -0.06623470038175583, \
-0.06571290642023087}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6225796639919282}, "LeafValues" -> 
             RawArray["Real32",{-0.06560615450143814, 
               0.08881673216819763, -0.06116761639714241}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.06604743748903275, 
               0.09650062769651413, -0.02858540788292885}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.18100141733884814`}, "LeafValues" -> 
             RawArray["Real32",{
               0.08908023685216904, -0.06460777670145035, \
-0.06406624615192413}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.06393714994192123, 
               0.0829935148358345, -0.05769496411085129}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {0.5956623256206514, 
              0.8988964259624482}, "LeafValues" -> 
             RawArray["Real32",{-0.06058945134282112, 0.0711715966463089, 
               0.09131306409835815}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.18100141733884814`}, "LeafValues" -> 
             RawArray["Real32",{
               0.08359190821647644, -0.06317175179719925, \
-0.06261563301086426}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6225796639919282}, "LeafValues" -> 
             RawArray["Real32",{-0.06244807317852974, 
               0.07729027420282364, -0.05810229107737541}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.06292014569044113, 
               0.08430274575948715, -0.026193618774414062`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.18100141733884814`}, "LeafValues" -> 
             RawArray["Real32",{
               0.07902064174413681, -0.06190577894449234, \
-0.06133173033595085}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.06114071607589722, 
               0.07335729151964188, -0.05469239130616188}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.04095524176955223, 
               0.07336875796318054, -0.06212583929300308}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.18100141733884814`}, "LeafValues" -> 
             RawArray["Real32",{
               0.07531387358903885, -0.060752563178539276`, \
-0.060209933668375015`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6225796639919282}, "LeafValues" -> 
             RawArray["Real32",{-0.05996502935886383, 
               0.06908753514289856, -0.05552413687109947}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.060439061373472214`, 
               0.07591378688812256, -0.024085158482193947`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.37068203091621404`}, "LeafValues" -> 
             RawArray["Real32",{
               0.07210570573806763, -0.059675052762031555`, \
-0.059131331741809845`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.05893532931804657, 
               0.0663468986749649, -0.05209371820092201}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.03677165135741234, 
               0.06640452891588211, -0.060060061514377594`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.37068203091621404`}, "LeafValues" -> 
             RawArray["Real32",{
               0.06946735084056854, -0.0587669275701046, \
-0.05824040621519089}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6225796639919282}, "LeafValues" -> 
             RawArray["Real32",{-0.05800774320960045, 
               0.06296799331903458, -0.053325872868299484`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.05848398804664612, 
               0.06987368315458298, -0.022007891908288002`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.37068203091621404`}, "LeafValues" -> 
             RawArray["Real32",{
               0.06713336706161499, -0.057982735335826874`, \
-0.05742114782333374}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.057191792875528336`, 
               0.06102036312222481, -0.04978445544838905}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.03265257552266121, 
               0.061082303524017334`, -0.058457065373659134`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.06519872695207596, -0.057279717177152634`, \
-0.05673464015126228}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6225796639919282}, "LeafValues" -> 
             RawArray["Real32",{-0.056455548852682114`, 
               0.05819627270102501, -0.0514095164835453}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.05691341310739517, 
               0.06535404175519943, -0.020228002220392227`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.06345481425523758, -0.056656673550605774`, \
-0.05607878416776657}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.6427493989467622}, "LeafValues" -> 
             RawArray["Real32",{-0.05580553039908409, 
               0.05680730938911438, -0.047676004469394684`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {0.6427493989467622, 
              0.36513583362102514`}, "LeafValues" -> 
             RawArray["Real32",{-0.056238170713186264`, 
               0.06067584827542305, -0.02475310117006302}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.06193969026207924, -0.05606229603290558, \
-0.05549426004290581}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05522384122014046, -0.04970050975680351, 
               0.05435728654265404}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.05563193932175636, 
               0.06182844191789627, -0.018785879015922546`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.060617540031671524`, -0.05556260794401169, \
-0.054968543350696564`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05470281466841698, -0.05821586400270462, 
               0.045122768729925156`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.02363872341811657, 
               0.05352844297885895, -0.05640063434839249}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05951746553182602, -0.05500134825706482, \
-0.05439019203186035}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05423149839043617, -0.05754658579826355, 
               0.043072886765003204`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.05464804917573929, 
               0.05900634452700615, -0.016647661104798317`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.058492522686719894`, -0.054592277854681015`, \
-0.05395451560616493}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05381301790475845, -0.04751867428421974, 
               0.04928410425782204}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.05421726405620575, 
               0.05775775760412216, -0.0156166460365057}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.057588934898376465`, -0.0542214997112751, \
-0.053571246564388275`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.053437232971191406`, -0.05741681903600693, 
               0.0403614267706871}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.016827447339892387`, 
               0.04970011115074158, -0.05559224262833595}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05684153735637665, -0.053883932530879974`, \
-0.05324215069413185}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05309683457016945, -0.05685875192284584, 
               0.03854256868362427}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.014540203846991062`, 
               0.04810464009642601, -0.05519187077879906}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05618003010749817, -0.053577642887830734`, \
-0.052947014570236206`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05279116705060005, -0.046213917434215546`, 
               0.045577045530080795`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.053217239677906036`, 
               0.05529706925153732, -0.014075118117034435`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05554100126028061, -0.05330270901322365, \
-0.052664514631032944`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05251866579055786, -0.056678760796785355`, 
               0.03611552715301514}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {
              0.6427493989467622, -0.1516332924365997}, "LeafValues" -> 
             RawArray["Real32",{-0.017102075740695, 
               0.05054331198334694, -0.056393515318632126`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05497096851468086, -0.05304604023694992, \
-0.05241981893777847}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.0522734597325325, -0.04487837851047516, 
               0.042986370623111725`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.052697282284498215`, 
               0.053572189062833786`, -0.012270999141037464`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05446464568376541, -0.05282004550099373, \
-0.05219031125307083}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.05356989800930023, -0.05658844858407974, 
               0.033617664128541946`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{-0.0045011877082288265`, 
               0.044145938009023666`, -0.05481521785259247}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05410206690430641, -0.052626557648181915`, \
-0.05199693143367767}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.05290573462843895, -0.05612950026988983, 
               0.032308515161275864`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.05227445438504219, 
               0.051472682505846024`, -0.010700687766075134`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.053735069930553436`, -0.05244913324713707, \
-0.05180783569812775}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05176955834031105, -0.055996015667915344`, 
               0.031452104449272156`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {
              0.6427493989467622, -0.1516332924365997}, "LeafValues" -> 
             RawArray["Real32",{-0.011627327650785446`, 
               0.046888671815395355`, -0.05626848712563515}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05335955694317818, -0.05226985365152359, \
-0.051646649837493896`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05159831792116165, -0.04218040034174919, 
               0.03913455083966255}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.051950566470623016`, 
               0.05039529502391815, -0.010484430938959122`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05302438512444496, -0.0521116778254509, \
-0.051493894308805466`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.05271485447883606, -0.0560108982026577, 
               0.03042604774236679}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.003528348635882139, 
               0.04050460830330849, -0.05471796542406082}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05279624089598656, -0.051975611597299576`, \
-0.05136613920331001}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.05182081460952759, -0.05559920519590378, 
               0.029230797663331032`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.05166304111480713, 
               0.04829597473144531, -0.009151402860879898}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05255739390850067, -0.05184964835643768, \
-0.05123995617032051}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.4726962894201278}, "LeafValues" -> 
             RawArray["Real32",{-0.03957561403512955, -0.05549813434481621, 
               0.031363848596811295`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.005015538539737463, 
               0.038516126573085785`, -0.05466054379940033}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05236322060227394, -0.05173349007964134, \
-0.05113585293292999}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.738128513097763}, "LeafValues" -> 
             RawArray["Real32",{-0.05117662250995636, -0.038723867386579514`, 
               0.03560322895646095}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.05145159363746643, 
               0.0468171201646328, -0.009141243994235992}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.052130624651908875`, -0.051618944853544235`, \
-0.051033422350883484`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.04969506338238716, -0.05555930361151695, 
               0.027325786650180817`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {
              0.6427493989467622, -0.1516332924365997}, "LeafValues" -> 
             RawArray["Real32",{-0.004678803961724043, 
               0.04226423799991608, -0.056916844099760056`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05195425823330879, -0.05152088776230812, \
-0.05094506964087486}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.048758260905742645`, -0.05515792965888977, 
               0.02624819613993168}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.008643459528684616, 
               0.03597208485007286, -0.05465758964419365}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05182209238409996, -0.051430728286504745`, \
-0.05086779594421387}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
             "NumericalThresholds" -> {
              0.8217383921146394, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.04750977084040642, -0.054450202733278275`, 
               0.0253596194088459}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.05121753737330437, 
               0.04456200450658798, -0.008511542342603207}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.051678262650966644`, -0.05134227126836777, \
-0.05079159513115883}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.4726962894201278}, "LeafValues" -> 
             RawArray["Real32",{-0.036172088235616684`, -0.05516458675265312, 
               0.027749184519052505`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.00913328118622303, 
               0.034184087067842484`, -0.05468868091702461}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05156054347753525, -0.051264043897390366`, \
-0.05072803422808647}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.007829440757632256, -0.05481031537055969, 
               0.04809867590665817}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.37098230421543127`}, "LeafValues" -> 
             RawArray["Real32",{-0.051105622202157974`, 
               0.042854662984609604`, -0.007736187428236008}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05144114047288895, -0.05119271203875542, \
-0.050664182752370834`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.7602820694446565, -0.8853395879268645}, "LeafValues" -> 
             RawArray[
               "Real32",{-0.044936154037714005`, -0.054717596620321274`, 
               0.02357458509504795}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.010609501972794533`, 
               0.03250803425908089, -0.05485882610082626}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05135146901011467, -0.05112539976835251, \
-0.05061185359954834}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
             "NumericalThresholds" -> {
              0.8217383921146394, -0.7657244205474852}, "LeafValues" -> 
             RawArray["Real32",{-0.03854995593428612, -0.05415286868810654, 
               0.02459910325706005}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4}], 
             "NumericalThresholds" -> {0.6225796639919282, 
              0.2898270189762116}, "LeafValues" -> 
             RawArray["Real32",{-0.05101940035820007, 
               0.04125382378697395, -0.007840272039175034}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.05124688893556595, -0.05105893686413765, \
-0.050559721887111664`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.008290473371744156, -0.05471964180469513, 
               0.04735927656292915}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {
              0.6427493989467622, -0.1516332924365997}, "LeafValues" -> 
             RawArray["Real32",{-0.0004890026757493615, 
               0.036680638790130615`, -0.05721031501889229}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{
               0.051153216511011124`, -0.05100299417972565, \
-0.05051467940211296}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
             "NumericalThresholds" -> {
              0.8217383921146394, -0.8853395879268645}, "LeafValues" -> 
             RawArray["Real32",{-0.04218102619051933, -0.05390254780650139, 
               0.022409433498978615`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.012670841068029404`, 
               0.030145958065986633`, -0.054784249514341354`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.05108598619699478, -0.05101151764392853, \
-0.05059288069605827}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.008676537312567234, -0.054457392543554306`,
                0.04736275225877762}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {
              0.6427493989467622, -0.1516332924365997}, "LeafValues" -> 
             RawArray["Real32",{-0.00006664530519628897, 
               0.03454732894897461, -0.056818198412656784`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.051005616784095764`, -0.050965648144483566`, \
-0.050544291734695435`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
             "NumericalThresholds" -> {
              0.8217383921146394, -0.9370158612728118}, "LeafValues" -> 
             RawArray["Real32",{-0.023127874359488487`, -0.05369311571121216, 
               0.028854042291641235`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.1446583122014999}, "LeafValues" -> 
             RawArray["Real32",{-0.023650946095585823`, 0.06065020337700844, 
               0.006417009048163891}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.05096273496747017, -0.050911400467157364`, \
-0.05051061883568764}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.00840744748711586, -0.05439706891775131, 
               0.04652378335595131}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {0.42327153682708746`, 
              1.0000000180025095`*^-35}, "LeafValues" -> 
             RawArray["Real32",{-0.050996486097574234`, 
               0.03480009734630585, -0.02463666722178459}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.0508921779692173, -0.05086428299546242, \
-0.05047300085425377}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
             "NumericalThresholds" -> {-1.0590063929557798`, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{-0.03252537548542023, 
               0.02964233234524727, -0.05357290804386139}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
             "NumericalThresholds" -> {-1.0590063929557798`, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{0.04632967337965965, -0.04286026582121849, 
               0.05320804566144943}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.050849784165620804`, -0.05081498250365257, \
-0.05044569447636604}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.007838105782866478, -0.0541815459728241, 
               0.04490310326218605}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {0.42327153682708746`, 
              1.0000000180025095`*^-35}, "LeafValues" -> 
             RawArray["Real32",{-0.05099665746092796, 
               0.03275205194950104, -0.024455254897475243`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.05078897252678871, -0.05077369138598442, \
-0.05041401460766792}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.007714353036135435, -0.053846828639507294`,
                0.0438186414539814}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {0.42327153682708746`, 
              1.0000000180025095`*^-35}, "LeafValues" -> 
             RawArray["Real32",{-0.050959739834070206`, 
               0.0316513255238533, -0.02374160662293434}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.05073299631476402, -0.05073510482907295, \
-0.05038541555404663}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
             "NumericalThresholds" -> {
              0.8217383921146394, -0.9370158612728118}, "LeafValues" -> 
             RawArray[
               "Real32",{-0.020926326513290405`, -0.052870724350214005`, 
               0.02766016498208046}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
             "NumericalThresholds" -> {
              0.6225796639919282, -0.1446583122014999}, "LeafValues" -> 
             RawArray["Real32",{-0.022104281932115555`, 0.0585583820939064, 
               0.0036324849352240562`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.050704341381788254`, -0.05069546774029732, \
-0.05036383122205734}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.007490091025829315, -0.05377335473895073, 
               0.04285341501235962}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {
              0.5956623256206514, -1.1255170702934263`}, "LeafValues" -> 
             RawArray["Real32",{0.015357141382992268`, 
               0.02516174130141735, -0.0543338842689991}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.05066265910863876, -0.05066361650824547, \
-0.050337012857198715`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
             "NumericalThresholds" -> {-1.0590063929557798`, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{-0.029615962877869606`, 
               0.028330275788903236`, -0.05281388759613037}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
             "NumericalThresholds" -> {-1.0590063929557798`, 
              0.8217383921146394}, "LeafValues" -> 
             RawArray["Real32",{0.04149295389652252, -0.04104618355631828, 
               0.05252120643854141}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {-0.738128513097763, 
              0.30599831044673925`}, "LeafValues" -> 
             RawArray["Real32",{
               0.05063367262482643, -0.05062749236822128, \
-0.050319306552410126`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
             "NumericalThresholds" -> {0.7602820694446565, 
              0.18719210475683215`}, "LeafValues" -> 
             RawArray["Real32",{-0.007177125196903944, -0.05369856581091881, 
               0.041239481419324875`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
             "NumericalThresholds" -> {0.42327153682708746`, 
              1.0000000180025095`*^-35}, "LeafValues" -> 
             RawArray["Real32",{-0.05100356042385101, 
               0.029040131717920303`, -0.02424538880586624}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]]}, "ClassNumber" -> 3, "IterationsNumber" -> 50, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 7880446822517351869, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
                "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
                "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 3, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 2, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 15, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["3ac99f8e-eabc-48c0-b137-1abd85068e1b"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.334921`5.976487372741392, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.34464752864814563`, 0.2698932936888838], "Accuracy" -> 
            Around[0.9242424242424244, 0.08079245573845538], "EvaluationTime" -> 
            0.0015058465048420852`, "TestSize" -> 21, "ModelMemory" -> 309080,
             "ModelUtility" -> 0.18470125045192176`, "TrainingSize" -> 84, 
            "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
            704104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.34464752864814563`, 0.19084337816418215`]}, 
            "AccuracyHistory" -> {
              Around[0.9242424242424244, 0.05712889332137579]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 3, "LearningRate" -> 
              0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 2, "MaxDepth" -> 6, "LeafSize" -> 15, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> Automatic}, "FinalTrainingSize" -> 105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 17], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 500], "LearningRate" -> 
                Association["Value" -> 0.002], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0986122886681082`, 0.009267925213915477], 
                 "Accuracy" -> 
                 Around[0.33333333333333337`, 0.07009911840957171], 
                 "EvaluationTime" -> 0.004423413006149969, "TestSize" -> 90, 
                 "ModelMemory" -> 21512, 
                 "ModelUtility" -> -0.9383487471596899, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.1, "TrainingMemory" -> 89720, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0986122886681082`, 0.006553412766289418]}, 
                 "AccuracyHistory" -> {
                   Around[0.33333333333333337`, 0.04956756198260691]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0376711976902155`, 0.03925762605355141], "Accuracy" -> 
                 Around[0.8333333333333334, 0.11378855350355248`], 
                 "EvaluationTime" -> 0.0015058465048420852`, "TestSize" -> 21,
                  "ModelMemory" -> 305480, 
                 "ModelUtility" -> -0.7795460599641377, "TrainingSize" -> 84, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 673912, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0376711976902155`, 0.027759333595751882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8333333333333334, 0.08046065780377024]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0015058465048420852`, "MeanCrossEntropy" -> 
                Around[1.0376711976902155`, 0.03925762605355141], 
                "ModelMemory" -> 305480, "TrainingMemory" -> 673912, 
                "TrainingTime" -> 0.4320391543176798], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 25], "LearningRate" -> 
                Association["Value" -> 0.01], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 90], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 250], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 7], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.2], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 4],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 25], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 13], "LearningRate" -> 
                Association["Value" -> 0.02], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 7], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 3], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.34464752864814563`, 0.2698932936888838], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.0015058465048420852`, "TestSize" -> 21,
                  "ModelMemory" -> 309080, "ModelUtility" -> 
                 0.18470125045192176`, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.15848931924611134`, "TrainingMemory" -> 704104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34464752864814563`, 0.19084337816418215`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0986122886681082`, 0.009267925213915477], 
                 "Accuracy" -> 
                 Around[0.33333333333333337`, 0.07009911840957171], 
                 "EvaluationTime" -> 0.00013988060131046298`, "TestSize" -> 
                 90, "ModelMemory" -> 21512, 
                 "ModelUtility" -> -0.7888960565336534, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 66360, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0986122886681082`, 0.006553412766289418]}, 
                 "AccuracyHistory" -> {
                   Around[0.33333333333333337`, 0.04956756198260691]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00013988060131046298`, 
                "MeanCrossEntropy" -> 
                Around[1.0986122886681082`, 0.009267925213915477], 
                "ModelMemory" -> 21512, "TrainingMemory" -> 66360, 
                "TrainingTime" -> 0.18486412677696193`], "Index" -> 7], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 90], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.04], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 250], "LearningRate" -> 
                Association["Value" -> 0.04], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 7], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["GradientBoostedTrees"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 0.000010890625, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546829817958`16.335949127106225*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 1.0144063118412363`, 
             "ElapsedTimes" -> 1.370007, "ExperimentCounts" -> 2], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 1.4491518740589096`, 
             "ElapsedTimes" -> 2.029643, "ExperimentCounts" -> 2]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 5.234224, 
         "MaxTrainingMemory" -> 1958656, "DataMemory" -> 24976, 
         "FunctionMemory" -> 504816, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 33, 50.890352`8.459210430347827}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"LogisticRegression\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.094985, "MaxTrainingMemory" -> 172176,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 50.996117`8.460112084371728}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association[
             "Weights" -> 
              RawArray["Real32",{{-3.2089695930480957`, 
                5.8804802894592285`, -12.010197639465332`, \
-12.003386497497559`}, {0.9466171860694885, 
                2.074744701385498, -9.538208961486816, -9.687176704406738}}], 
              "Biases" -> 
              RawArray["Real32",{7.723256587982178, 13.00342845916748}]], 
            "Parameters" -> 
            Association[
             "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 4,
               "$InputDimensions" -> {4}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "12.3.2", "Unstable" -> False]], 
         "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
            "Key" -> "f1", "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "Calibrator" -> None, "Method" -> "LogisticRegression", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.01, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["d82d826c-45f4-4526-af6f-e8b97af9c077"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.255167`5.858369501144621, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.16990810952966667`, 0.06429649425020129], "Accuracy" -> 
            Around[0.9487179487179491, 0.03279971468220651], "EvaluationTime" -> 
            7.010637160891033*^-6, "TestSize" -> 90, "ModelMemory" -> 9088, 
            "ModelUtility" -> 1.006381511807207, "TrainingSize" -> 15, 
            "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 78848, 
            "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.16990810952966667`, 0.04546448709083919]}, 
            "AccuracyHistory" -> {
              Around[0.9487179487179491, 0.023192900672772188`]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.01, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.2122731372070885, 0.1225616436551928], "Accuracy" -> 
                 Around[0.9487179487179491, 0.03279971468220651], 
                 "EvaluationTime" -> 0.000011111111111111112`, "TestSize" -> 
                 90, "ModelMemory" -> 9088, "ModelUtility" -> 
                 0.7474413355158375, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.03162277660168379, "TrainingMemory" -> 78904, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2122731372070885, 0.08666416934195602]}, 
                 "AccuracyHistory" -> {
                   Around[0.9487179487179491, 0.023192900672772188`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7324013034632841, 0.8228970819094151], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.00002386605874415581, "TestSize" -> 21,
                  "ModelMemory" -> 9088, 
                 "ModelUtility" -> -0.5844385208501122, "TrainingSize" -> 84, 
                 "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 172640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7324013034632841, 0.5818761068367693]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002386605874415581, "MeanCrossEntropy" -> 
                Around[0.7324013034632841, 0.8228970819094151], "ModelMemory" -> 
                9088, "TrainingMemory" -> 172640, "TrainingTime" -> 
                0.1980365618101007], "Index" -> 1], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0985992455879425`, 0.009267925331128236], 
                 "Accuracy" -> 
                 Around[0.7948717948717956, 0.060045442053325564`], 
                 "EvaluationTime" -> 8.825869274714237*^-6, "TestSize" -> 90, 
                 "ModelMemory" -> 9088, "ModelUtility" -> -0.7888811763302408,
                  "TrainingSize" -> 15, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 69920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0985992455879425`, 0.006553412849171354]}, 
                 "AccuracyHistory" -> {
                   Around[0.7948717948717956, 0.042458539255250394`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.098548133447653, 0.03772789191599711], "Accuracy" -> 
                 Around[0.787878787878788, 0.12482068999226396`], 
                 "EvaluationTime" -> 0.00003782515403448958, "TestSize" -> 21,
                  "ModelMemory" -> 9088, "ModelUtility" -> -0.793994075922978,
                  "TrainingSize" -> 84, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 77104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.098548133447653, 0.026677648213674684`]}, 
                 "AccuracyHistory" -> {
                   Around[0.787878787878788, 0.08826155632591368]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003782515403448958, "MeanCrossEntropy" -> 
                Around[1.098548133447653, 0.03772789191599711], "ModelMemory" -> 
                9088, "TrainingMemory" -> 77104, "TrainingTime" -> 
                0.02923063263878336], "Index" -> 2], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6834287399121822, 0.04179478013170753], "Accuracy" -> 
                 Around[0.8168498168498177, 0.05751665220409546], 
                 "EvaluationTime" -> 0.000011111111111111112`, "TestSize" -> 
                 90, "ModelMemory" -> 9088, 
                 "ModelUtility" -> -0.32468325107733487`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.025118864315095794`, 
                 "TrainingMemory" -> 78232, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6834287399121822, 0.029553372449331178`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8168498168498177, 0.04067041480466408]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5484930443713009, 0.11068446394809918`], "Accuracy" -> 
                 Around[0.8787878787878788, 0.09965059119978148], 
                 "EvaluationTime" -> 0.00003004558783239014, "TestSize" -> 21,
                  "ModelMemory" -> 9088, 
                 "ModelUtility" -> -0.13214506275347637`, "TrainingSize" -> 
                 84, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 86144, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5484930443713009, 0.07826573502969887]}, 
                 "AccuracyHistory" -> {
                   Around[0.8787878787878788, 0.07046360878661398]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003004558783239014, "MeanCrossEntropy" -> 
                Around[0.5484930443713009, 0.11068446394809918`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 86144, 
                "TrainingTime" -> 0.06692011722321299], "Index" -> 3], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.2320251746618649, 0.05518354976709235], "Accuracy" -> 
                 Around[0.937728937728938, 0.03593359009382682], 
                 "EvaluationTime" -> 7.010637160891033*^-6, "TestSize" -> 90, 
                 "ModelMemory" -> 9088, "ModelUtility" -> 0.7212797836754933, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 79008, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.2320251746618649, 0.03902066225025633]}, 
                 "AccuracyHistory" -> {
                   Around[0.937728937728938, 0.025408885227722694`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.2525140521468531, 0.13949820959230172`], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.00003004558783239014, "TestSize" -> 21,
                  "ModelMemory" -> 9088, "ModelUtility" -> 0.5783298491810667,
                  "TrainingSize" -> 84, "TrainingTime" -> 0.03981071705534971,
                  "TrainingMemory" -> 86208, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.2525140521468531, 0.09864012996609883]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003004558783239014, "MeanCrossEntropy" -> 
                Around[0.2525140521468531, 0.13949820959230172`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 86208, 
                "TrainingTime" -> 0.07342402950980098], "Index" -> 4], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.19101932253974807`, 0.10311527796610731`], 
                 "Accuracy" -> 
                 Around[0.9487179487179491, 0.03279971468220651], 
                 "EvaluationTime" -> 7.010637160891033*^-6, "TestSize" -> 90, 
                 "ModelMemory" -> 9088, "ModelUtility" -> 0.8596979091297253, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03981071705534971, 
                 "TrainingMemory" -> 79000, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.19101932253974807`, 0.07291351229377026]}, 
                 "AccuracyHistory" -> {
                   Around[0.9487179487179491, 0.023192900672772188`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.3655488996312396, 0.3191884679576615], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.00003004558783239014, "TestSize" -> 21,
                  "ModelMemory" -> 9088, "ModelUtility" -> 
                 0.15223817791727057`, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.03981071705534971, "TrainingMemory" -> 86208, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3655488996312396, 0.22570033016940746`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003004558783239014, "MeanCrossEntropy" -> 
                Around[0.3655488996312396, 0.3191884679576615], "ModelMemory" -> 
                9088, "TrainingMemory" -> 86208, "TrainingTime" -> 
                0.08161196996346691], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.097971422148269, 0.037728269183371584`], "Accuracy" -> 
                 Around[0.787878787878788, 0.12482068999226396`], 
                 "EvaluationTime" -> 0.00002386605874415581, "TestSize" -> 21,
                  "ModelMemory" -> 9088, 
                 "ModelUtility" -> -0.7934725996323075, "TrainingSize" -> 84, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 77872, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.097971422148269, 0.026677914981993494`]}, 
                 "AccuracyHistory" -> {
                   Around[0.787878787878788, 0.08826155632591368]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002386605874415581, "MeanCrossEntropy" -> 
                Around[1.097971422148269, 0.037728269183371584`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 77872, 
                "TrainingTime" -> 0.03249031044545282], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8102440899424409, 0.0786572739041784], "Accuracy" -> 
                 Around[0.787878787878788, 0.12482068999226395`], 
                 "EvaluationTime" -> 0.00003004558783239014, "TestSize" -> 21,
                  "ModelMemory" -> 9088, 
                 "ModelUtility" -> -0.5019693254530473, "TrainingSize" -> 84, 
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 83544, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8102440899424409, 0.055619091767292204`]}, 
                 "AccuracyHistory" -> {
                   Around[0.787878787878788, 0.08826155632591366]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003004558783239014, "MeanCrossEntropy" -> 
                Around[0.8102440899424409, 0.0786572739041784], "ModelMemory" -> 
                9088, "TrainingMemory" -> 83544, "TrainingTime" -> 
                0.05149367184594638], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1223343809991333`, 1.3706982262908642`], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.00003004558783239014, "TestSize" -> 21,
                  "ModelMemory" -> 9088, 
                 "ModelUtility" -> -1.0271099452838914`, "TrainingSize" -> 84,
                  "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                 86144, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1223343809991333`, 0.9692300107706429]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003004558783239014, "MeanCrossEntropy" -> 
                Around[1.1223343809991333`, 1.3706982262908642`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 86144, 
                "TrainingTime" -> 0.1027433828935908], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.16990810952966667`, 0.06429649425020129], 
                 "Accuracy" -> 
                 Around[0.9487179487179491, 0.03279971468220651], 
                 "EvaluationTime" -> 7.010637160891033*^-6, "TestSize" -> 90, 
                 "ModelMemory" -> 9088, "ModelUtility" -> 1.006381511807207, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.03162277660168379, 
                 "TrainingMemory" -> 78848, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.16990810952966667`, 0.04546448709083919]}, 
                 "AccuracyHistory" -> {
                   Around[0.9487179487179491, 0.023192900672772188`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.2595753623911527, 0.1733730488079521], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.00003782515403448958, "TestSize" -> 21,
                  "ModelMemory" -> 9088, "ModelUtility" -> 0.5301661814752308,
                  "TrainingSize" -> 84, "TrainingTime" -> 0.03981071705534971,
                  "TrainingMemory" -> 86208, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.2595753623911527, 0.1225932584870892]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003782515403448958, "MeanCrossEntropy" -> 
                Around[0.2595753623911527, 0.1733730488079521], "ModelMemory" -> 
                9088, "TrainingMemory" -> 86208, "TrainingTime" -> 
                0.07342402950980098], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 6.8046875*^-6, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546832115765`16.335949127366675*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.33880000000000016`, 
             "ElapsedTimes" -> 0.612682, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 0.4840000000000001, 
             "ElapsedTimes" -> 0.467594, "ExperimentCounts" -> 9]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 2.064139, 
         "MaxTrainingMemory" -> 640216, "DataMemory" -> 24976, 
         "FunctionMemory" -> 178240, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 33, 52.95675`8.476496299211002}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Markov\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Markov\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.073058, "MaxTrainingMemory" -> 172120,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 53.036759`8.477151951800959}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]], 
              MachineLearning`MLProcessor["DiscretizeNumericalVector", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Boundaries" -> {{-1.8585598753121984`, -1.1306334979795414`, \
-0.8855223227734941, -0.40681433866204264`, -0.05052888743641669, 
                 0.1968672643667435, 0.6681533619009242, 1.037456351356519, 
                 2.489743700776218}, {-1.965865893165847, \
-1.0600710767212056`, -0.6028091727527445, -0.3659962088223516, \
-0.14325874293850338`, 0.08743186823002978, 0.5373564607705745, 
                 1.2091648762848697`, 
                 3.032351060947994}, {-1.5030644794782615`, \
-1.324239237957665, -1.2652439505330084`, -0.026534114556953082`, 
                 0.2639826274691203, 0.5296009429455535, 0.7607426636277106, 
                 1.1058968724482998`, 
                 1.7801969483637077`}, {-1.4466969804240193`, \
-1.3039235543724252`, -1.176335162113988, -0.23717282407753335`, 
                 0.15675794388123634`, 0.4201831746379136, 0.8203015396378079,
                  1.2058518377338632`, 1.7555758878864527`}}, 
                "Version" -> {12.3, 0}, "ID" -> 5685250726575412103, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["NominalVectorToNominalSequence", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {8, 8, 8, 8}]], "Version" -> {12.3, 0}, "ID" -> 
                2162923750082320723, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor[
              "NoninvertibleIntegerEncodeNominalSequence", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                MachineLearning`SortedHashAssociation[
                  Association[
                  "KeyHashes" -> {1, 2, 3, 4, 5, 6, 7, 8}, "Values" -> None, 
                   "DefaultValue" -> -1, "HashFunction" -> 
                   Function[{
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.3, 0}]], "MissingCode" -> 0, 
                "Version" -> {12.3, 0}, "ID" -> 1206142299026083037, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
            "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "ClassPriors" -> 
         Association[
          1 -> 0.3333333333333333, 2 -> 0.3333333333333333, 3 -> 
           0.3333333333333333], "Method" -> "Markov2", "TokenNumber" -> 8, 
         "Order" -> 1, "MinimumTokenCount" -> 0, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor[
              "NoninvertibleIntegerEncodeNominalSequence", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                MachineLearning`SortedHashAssociation[
                  Association[
                  "KeyHashes" -> {1, 2, 3, 4, 5, 6, 7, 8}, "Values" -> None, 
                   "DefaultValue" -> -1, "HashFunction" -> 
                   Function[{
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.3, 0}]], "MissingCode" -> 0, 
                "Version" -> {12.3, 0}, "ID" -> 1210662691425260131, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NominalSequence", "Weight" -> 1], "Key" -> "f1", 
                "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
                "Missing" -> "Allowed"]]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> False, "Missing" -> "Imputed"]], 
         "NGramPosition" -> MachineLearning`SortedHashAssociation[
           Association["KeyHashes" -> CompressedData["
1:eJw9lcmNZEcMROcgB7Q4IAMEcF9MGEgnmaCDAJ10GPkPvfw/a6pR3dXBn0lG
MMj69a9///z79y9fvnz7gV9//PPtv6+/8OG3mdrsKBOJrhj1+gQ8wGLMpbt9
Zb8H3LJyym2qRONzIttKZV29U7yy5QbcSyp1Ohc0Vz4njBwJPNpZzvl7oic8
SmJHxjYsxm8gtLa2N1b9wPoJuItYK3CJqU71DVA/hbYaFdVz5xsoXUhTVpuJ
Undcglm7nJrZKm4b/zBPh3Z3ksvLrGtvuWla7U1BBgUunrwBxFntssn1LY22
G5A5QpFDZBCutT8BJxY86Gm8sm/yyALdHdSwJVXeHOE+SCcgvYi7ciVxkubS
xJEMeGvGJ6DlEsmxgax4fw8IHYT2w7/H9BL0TNQCCm+F1HdJPFSq1zIHNamq
Lw/XRa6FILk0IXuvQqEwfDDYDmUq6pZrRUYSnXpbkHQ+JyoF84gmzaC38mmt
pZ5/cY9Ojhl/b8BVUber0VG0Mq/hztN9GGwMQqXv5XH81x3riDx4LOS6RHke
X+0clvTdPz3XwEnaR4odw7D9OeGQwg9Jx5beDCL+/Go1Y2ecYJjYqvbFLRaL
o4jJkEelv/4ITs/S8SC1GjPi+vUn0JO1GuaohdsUvR94ePWsMziCH9YfGMOb
t3BCwpfb54GrfFXzJF4NGvXC3ABXisHmnsdlT4GKT9UFssL4Lu7WF+c5feRl
oDfDtV581VDriKvIbGV5cSSswx2jip65fnBzakS1PaFAhu0XX1xK1zctmQaV
ePM6vEU687ikjfmyi2PsEMbwTCd9ucJ7HUFO2uBjn2l4cB59przxKVY56+TF
9SjmZ5Uw8IpQF6eGI+jRH3OZ3zqDKigjih1ztgNz9cHndJzdWTVqOObFcTFv
1DvdYsT3rZMe8hxuD3YqJSPKg+MItmGfZcl0oNC9h529QfFozaizDscuTvue
hWpJ2ybkNdrZHxQYyMdkByNy72/Wlx8CArc8m+Li7XSXLwfSYisIvvjwg/ws
Ymplr8XFl5njK4SFxGKRMyAPjkn9vPNMI23/1MmXxCqehKoNM+FXhx72WByn
GUyS1rzPD1Wc7XicydDlWXQPziCcpe+MBXuG8uPiRSXQx8isH+bgvZ8vMKRj
X2BnNu3Zzw+Oi1GZnUyszlrZ/h/8HUi0
             "], "Values" -> None, 
            "DefaultValue" -> Missing[], "HashFunction" -> 
            Function[{
              MachineLearning`file165SortedHashAssociation`PackagePrivate`\
keys$}, 
              Switch[
              MachineLearning`file165SortedHashAssociation`PackagePrivate`\
keys$, {
                BlankSequence[String]}, 
               Data`StringHash[
               MachineLearning`file165SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
               PatternTest[
                Blank[], 
                MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
               MachineLearning`file165SortedHashAssociation`PackagePrivate`\
keys$, 
               PatternTest[
                Blank[], 
                MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
               
               Block[{MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q}, 
                MachineLearning`file165SortedHashAssociation`PackagePrivate`q = {
                   Quotient[
                   MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                   Quotient[
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                   Quotient[
                    Mod[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                   Mod[
                   MachineLearning`file165SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                MachineLearning`file165SortedHashAssociation`PackagePrivate`q = 
                 Transpose[
                   MachineLearning`PackageScope`ToPackedArray[
                   MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                MachineLearning`file165SortedHashAssociation`PackagePrivate`q = 
                 Transpose[
                   Flatten[
                   MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                  FromCharacterCode[
                   Abs[
                   MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
               Blank[List], 
               Map[Switch[#, 
                 Blank[String], 
                 Data`StringHash[#, "Murmur3-64"], 
                 PatternTest[
                  Blank[], Developer`MachineIntegerQ], #, {
                  PatternTest[
                   BlankSequence[], Developer`MachineIntegerQ]}, 
                 
                 Block[{MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q}, 
                  MachineLearning`file165SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                  MachineLearning`file165SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file165SortedHashAssociation`PackagePrivate`q]; 
                  Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file165SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                 Blank[], 
                 Data`StringHash[
                  StringJoin[
                   ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                MachineLearning`file165SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.3, 0}]], 
         "ConditionalProbabilityMatrix" -> CompressedData["
1:eJxTTMoPSmViYGDwBmJmBhg4Ys+AAh5A+RfQxBHqQ8FgK4Y8TLzkoqt4bMlG
NPkLUH1H7WWOFwLRGvsiMOMiXJ0bUNdF1+Vw+yH86fYmxiBw2X4VGOyynzUT
BFZi2K+/68Wibr1TcPE3gTvkWl8fRFP3YT92moFBxHqjsPXGxRjmQuy9BffX
JyV9INoE9UePvdYSJyC6ZK8Z03/oq8YZDP3paSBwDS4O8z/X9cUFtlzHMcIJ
Qj+wh7lnkoonEG3CMBdmDqroIzgfFh+Q8NoJFd8Al4eZvy33NhBdwxmf6OKo
5iGA0C3vDP2FdzHEnao536pu2W4Poy36HgPRDRz2TYXG92Ec6e+CfRzYoCv2
6P6/Fr33avTepfadUyOA6KL93Qu8QLQWhzm40gci3VeLrHN/WDUFHm6x4ARw
BS29TkfTj5AHe3f6Abg7YeGJGu8bMOxHtxddHhjIe1u+TcKprmr1diC6ZL+B
NRqE7GHhgu4/mDmweIGJw9I7hHcGGl8ncJQTCADzL7o4OkDPv+jmo8crejqE
uO8QznQCKwfQ0wEsHEwcmIFoi33UtNTIaakr7fs+cPR/4DgPNwd7vsR0p2vc
EyA6ar/E/xcQHbEPUhQFokX2oFQVuGMdPF7Q3f+wChRxt+B8WPkGS//o4bNJ
GJRRL9rPe14JRPvg5eG8G51zb3TuxSgfYOpRxXdgxCP2/I0ezwwMMHtR9Z1F
C3/0+uIKPDwa2DKA6IB91vIyIDqFM33AyhX0cICZo///ExCdty+LvV4aex2z
XJJoSwSiGfB0i24uarwg/A8ApzK5oA==
          "], "DiscountMatrix" -> 
         SparseArray[
          Automatic, {75, 3}, 0., {
           1, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3,
              3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
             9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 15, 15, 15, 18, 18, 18, 18, 
             18, 18, 18, 18, 18, 18, 18, 18, 21, 21, 21, 24, 24, 24, 24}, {{
             1}, {2}, {3}, {1}, {2}, {3}, {1}, {2}, {3}, {1}, {2}, {3}, {1}, {
             2}, {3}, {1}, {2}, {3}, {1}, {2}, {3}, {1}, {2}, {3}}}, {
            0.5650224215246636, 0.8035714285714286, 2.8405797101449237`, 
            1.1602209944751376`, 1.7999999999999974`, 1.7307692307692293`, 
            1.7468805704099806`, 0.8832807570977917, 1.8502202643171803`, 
            3.0678260869565106`, 1.3347457627118635`, 1.4946619217081845`, 
            0.5136567468406033, 0.792452830188679, 3.486166007905134, 
            1.3438566552901008`, 0.7128309572301423, 1.1300448430493273`, 
            0.37278106508875736`, 3.126550868486345, 2.7814569536423837`, 
            1.1300448430493273`, 8.54651162790695, 3.9551569506726403`}}], 
         "Discount" -> {0.5, 0.5, 0.5}, 
         "DefaultUnigramProbabilities" -> {0.003174603174603174, 
          0.003174603174603174, 0.003174603174603174}, "Calibrator" -> None, 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "Order" -> Association["Value" -> 1, "Options" -> Association[]], 
           "AdditiveSmoothing" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], 
           "MinimumTokenCount" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "ExcludedTokens" -> 
           Association["Value" -> {}, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["5e4cfc5f-3ef2-4405-bade-d0967536838c"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.203788`5.760723600608874, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.38245053091121034`, 0.09704403189799156], "Accuracy" -> 
            Around[0.8608058608058615, 0.05147328616856396], "EvaluationTime" -> 
            0.00007010637160891033, "TestSize" -> 90, "ModelMemory" -> 28432, 
            "ModelUtility" -> 0.21848535978970907`, "TrainingSize" -> 15, 
            "TrainingTime" -> 0.01, "TrainingMemory" -> 76736, 
            "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.38245053091121034`, 0.06862049302875345]}, 
            "AccuracyHistory" -> {
              Around[0.8608058608058615, 0.0363971096997473]}, 
            "Configuration" -> {
             "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
              "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}, 
            "FinalTrainingSize" -> 105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "Markov", "Options" -> 
              Association[
               "Order" -> Association["Value" -> Automatic], 
                "AdditiveSmoothing" -> Association["Value" -> 0.1], 
                "MinimumTokenCount" -> Association["Value" -> Automatic], 
                "ExcludedTokens" -> Association["Value" -> {}]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.38245053091121034`, 0.09704403189799156], 
                 "Accuracy" -> 
                 Around[0.8608058608058615, 0.05147328616856396], 
                 "EvaluationTime" -> 0.00007010637160891033, "TestSize" -> 90,
                  "ModelMemory" -> 28432, "ModelUtility" -> 
                 0.21848535978970907`, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.01, "TrainingMemory" -> 76736, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.38245053091121034`, 0.06862049302875345]}, 
                 "AccuracyHistory" -> {
                   Around[0.8608058608058615, 0.0363971096997473]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5871128162405228, 0.2709215149579112], "Accuracy" -> 
                 Around[0.8333333333333333, 0.1137885535035525], 
                 "EvaluationTime" -> 0.00037825154034489586`, "TestSize" -> 
                 21, "ModelMemory" -> 32680, 
                 "ModelUtility" -> -0.24890669133904852`, "TrainingSize" -> 
                 84, "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
                 304192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5871128162405228, 0.19157044039607168`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8333333333333333, 0.08046065780377025]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00037825154034489586`, 
                "MeanCrossEntropy" -> 
                Around[0.5871128162405228, 0.2709215149579112], "ModelMemory" -> 
                32680, "TrainingMemory" -> 304192, "TrainingTime" -> 
                0.07625052117042026], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 2], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 7.125*^-6, "PreprocessorMemory" -> 
         59792, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546833237986`16.335949127493876*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.015250104234084053`, 
             "ElapsedTimes" -> 0.021941, "ExperimentCounts" -> 1], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 0.07625052117042026, 
             "ElapsedTimes" -> 0.073709, "ExperimentCounts" -> 1]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 0.763124, 
         "MaxTrainingMemory" -> 624600, "DataMemory" -> 24976, 
         "FunctionMemory" -> 150248, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 33, 53.721607`8.48272397015258}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NaiveBayes\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.076972, "MaxTrainingMemory" -> 172080,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 53.806009`8.483405754642058}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]], 
              MachineLearning`MLProcessor["DiscretizeNumericalVector", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Boundaries" -> {{-1.8585598753121984`, -1.1306334979795414`, \
-0.8855223227734941, -0.40681433866204264`, -0.05052888743641669, 
                 0.1968672643667435, 0.6681533619009242, 1.037456351356519, 
                 2.489743700776218}, {-1.965865893165847, \
-1.0600710767212056`, -0.6028091727527445, -0.3659962088223516, \
-0.14325874293850338`, 0.08743186823002978, 0.5373564607705745, 
                 1.2091648762848697`, 
                 3.032351060947994}, {-1.5030644794782615`, \
-1.324239237957665, -1.2652439505330084`, -0.026534114556953082`, 
                 0.2639826274691203, 0.5296009429455535, 0.7607426636277106, 
                 1.1058968724482998`, 
                 1.7801969483637077`}, {-1.4466969804240193`, \
-1.3039235543724252`, -1.176335162113988, -0.23717282407753335`, 
                 0.15675794388123634`, 0.4201831746379136, 0.8203015396378079,
                  1.2058518377338632`, 1.7555758878864527`}}, 
                "Version" -> {12.3, 0}, "ID" -> 5685250726575412103, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {8, 8, 8, 8}]], "Index" -> {
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8]}, "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                5339936145102768679, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
            "Invertibility" -> "Approximate", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "ClassNumber" -> 3, "ClassPriors" -> 
         Association[
          1 -> 0.3333333333333333, 2 -> 0.3333333333333333, 3 -> 
           0.3333333333333333], "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmVmYGBgAWIOIAax333xtLfv+bA/qXBKWkwL14HrfYLXHsjIHICJ
w/gw+bmff0jozvy9H0bD5CXWq9j+us0Il58lfnLbG0FWuHmpnbGvTmz8sV+t
smCdiNp/uD6Y+pJFrV/P23yDi8PUwfTBxGHmPpOas2mD9Jf9hMyHmQtzH7q9
MPUweRgNMw9dHKYeph9dHj08YTS6/2DqP5cm/3q9/QVcHEY3qd32CnJ7jSGO
7g50+dV5xg6rrT5hiBsz8vNO4n2HEc/o/kHXh8t9MHtg5qLLo6cf9PiglvvR
0x16esXlPpg4AO2Jk58=
          "], "FeatureNumber" -> 4, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association[
               "Type" -> "NominalVector", "Weight" -> 1, 
                "SetSize" -> {8, 8, 8, 8}]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {8, 8, 8, 8}]], "Index" -> {
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8]}, "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                596329796242639534, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {8, 8, 8, 8}], "Key" -> "f1", "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "Calibrator" -> 
         MachineLearning`CalibratorFunction["TemperatureScaling", 
           Association["Theta" -> 0.553309435247292]], "Method" -> 
         "NaiveBayes", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "SmoothingParameter" -> 
           Association["Value" -> 0.2, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["396b211a-fb0c-4963-85cf-0a753c6f4a36"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.183206`5.714484686213293, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.43734188594705936`, 0.17034361773178847`], "Accuracy" -> 
            Around[0.9015151515151516, 0.049857695981850456`], 
            "EvaluationTime" -> 0.00011353654428739898`, "TestSize" -> 42, 
            "ModelMemory" -> 17544., "ModelUtility" -> 0.05886189877951542, 
            "TrainingSize" -> 84, "TrainingTime" -> 0.017498166805773083`, 
            "TrainingMemory" -> 57384., "ExperimentCount" -> 2, 
            "MeanCrossEntropyHistory" -> {
              Around[0.33854732371696034`, 0.1544849631789132], 
              Around[0.5361364481771583, 0.31577043511887787`]}, 
            "AccuracyHistory" -> {
              Around[0.9242424242424244, 0.05712889332137577], 
              Around[0.8787878787878788, 0.07046360878661398]}, 
            "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
            "FinalTrainingSize" -> 105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5921645355665568, 0.278886251470411], "Accuracy" -> 
                 Around[0.8608058608058615, 0.05147328616856396], 
                 "EvaluationTime" -> 0.00003513641844631533, "TestSize" -> 90,
                  "ModelMemory" -> 17480, 
                 "ModelUtility" -> -0.2592093670022797, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 53360, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5921645355665568, 0.1972023595944244]}, 
                 "AccuracyHistory" -> {
                   Around[0.8608058608058615, 0.0363971096997473]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.43734188594705936`, 0.17034361773178847`], 
                 "Accuracy" -> 
                 Around[0.9015151515151516, 0.049857695981850456`], 
                 "EvaluationTime" -> 0.00011353654428739898`, "TestSize" -> 
                 42, "ModelMemory" -> 17544., "ModelUtility" -> 
                 0.05886189877951542, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.017498166805773083`, "TrainingMemory" -> 57384., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.33854732371696034`, 0.1544849631789132], 
                   Around[0.5361364481771583, 0.31577043511887787`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137577], 
                   Around[0.8787878787878788, 0.07046360878661398]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00011353654428739898`, 
                "MeanCrossEntropy" -> 
                Around[0.43734188594705936`, 0.17034361773178847`], 
                "ModelMemory" -> 17544., "TrainingMemory" -> 57384., 
                "TrainingTime" -> 0.03422200707067287], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Atom[Real], 1], 1]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 2], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 0.000013828125, "PreprocessorMemory" -> 
         53648, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546833966594`16.335949127576463*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.008281725711102835, 
             "ElapsedTimes" -> 0.024461, "ExperimentCounts" -> 1], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 0.04140862855551417, 
             "ElapsedTimes" -> 0.044347, "ExperimentCounts" -> 2]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 0.702026, 
         "MaxTrainingMemory" -> 403208, "DataMemory" -> 24976, 
         "FunctionMemory" -> 129728, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 33, 54.424928`8.488372837606558}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NearestNeighbors\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.086179, "MaxTrainingMemory" -> 171992,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 54.52162`8.489143725970454}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1: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
               "] -> Automatic, 
              Method -> "KDtree"]]]], "NeighborsNumber" -> 5, 
         "ClassPriors" -> {0.3333333333333333, 0.3333333333333333, 
          0.3333333333333333}, "TrainingOutput" -> 
         RawArray["UnsignedInteger8",{2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 
           3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
           1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 
           2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 
           3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
           1, 2, 3, 1}], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
            "Key" -> "f1", "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "Calibrator" -> None, "Method" -> "NearestNeighbors", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "NeighborsNumber" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "NearestMethod" -> 
           Association["Value" -> "KDtree", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["d8d42e06-5c28-4963-9550-a4f866b9fbaf"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.192654`5.7363230240258565, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.3207249968509116, 0.14856316737040848`], "Accuracy" -> 
            Around[0.8787878787878788, 0.09965059119978148], "EvaluationTime" -> 
            0.00005994882913305553, "TestSize" -> 21, "ModelMemory" -> 9160, 
            "ModelUtility" -> 0.35541304455615164`, "TrainingSize" -> 84, 
            "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
            188248, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.3207249968509116, 0.10505002308216786`]}, 
            "AccuracyHistory" -> {
              Around[0.8787878787878788, 0.07046360878661398]}, 
            "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "FinalTrainingSize" -> 105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.3676255937511696, 0.07058222191707249], "Accuracy" -> 
                 Around[0.9157509157509163, 0.04130380753619949], 
                 "EvaluationTime" -> 0.00001760992436067903, "TestSize" -> 90,
                  "ModelMemory" -> 6792, "ModelUtility" -> 0.2698512963618408,
                  "TrainingSize" -> 15, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 85424, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3676255937511696, 0.04990916774877571]}, 
                 "AccuracyHistory" -> {
                   Around[0.9157509157509163, 0.029206202397670685`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.3207249968509116, 0.14856316737040848`], "Accuracy" -> 
                 Around[0.8787878787878788, 0.09965059119978148], 
                 "EvaluationTime" -> 0.00005994882913305553, "TestSize" -> 21,
                  "ModelMemory" -> 9160, "ModelUtility" -> 
                 0.35541304455615164`, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 188248, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3207249968509116, 0.10505002308216786`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8787878787878788, 0.07046360878661398]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00005994882913305553, "MeanCrossEntropy" -> 
                Around[0.3207249968509116, 0.14856316737040848`], 
                "ModelMemory" -> 9160, "TrainingMemory" -> 188248, 
                "TrainingTime" -> 0.02580797094178042], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 2], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 0.0000105625, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546834672672`16.33594912765649*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.0051615941883560845`, 
             "ElapsedTimes" -> 0.018197, "ExperimentCounts" -> 1], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 0.02580797094178042, 
             "ElapsedTimes" -> 0.017771, "ExperimentCounts" -> 1]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 0.665377, 
         "MaxTrainingMemory" -> 617976, "DataMemory" -> 24976, 
         "FunctionMemory" -> 114272, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 33, 55.093781`8.493677552505513}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NeuralNetwork\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.084162, "MaxTrainingMemory" -> 172112,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 33, 55.198612`8.494503131447164}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
           Association[
           "Type" -> "Chain", "Nodes" -> 
            Association[
             "1" -> Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwBTgOx/CFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAQAAAD6LbK+5rztvGoqD79ltkO/+P5avq/mSz71cSY+TBMIPwFGi77n
jhi/Rfj1Ps5Mr76V3MY+hXJXPjr1DT+OzSw/nMWyvTXzGD55DDS/kSKKP4UZ
Zz118hI/5UOiP8p0ID9Iyy2/NMmFvmbmSb4sziw/jRsLvYgkID6p9kA7hToP
P5iVwLzqfMO+vcEkPTkXFb1ZNHU92p+eP7tlXL7kHRe+5bkWPgK6tD5W0I0+
z3VQv43jB79naWW/BXoRPfGTtD7aYHU/y5wFP+D88T1TYnQ/IPRNv7vd872j
ho+9RE5Mvhw/brwMYQm/NZakvTP3Iz8DiOa7nN3DPeRu274oNHo+Dj2HPjiM
KL4C3tQ+XXovv2ATcb7ppf491Ag1v1TMB7/qjoS/1Th9PqguHT9rw3Y+7/7L
PuXCm777ofO+4ZgkvbUDsD7Na4M/w8asv7CsmD7sNJ2+WlOdvhDUjT2IRUc/
6yeTvvpu/T7cVaA/5i/xPmOkm72ntMQ+yr4qPr43IL/FqLm99kGfPoXo271b
bwW/LHzRujYRSL+T7hK+Elwovn917T4syyu/MQxUPi3KJz75aTG//JUIP3tk
nj8EK229xPxgvrX/JL8pYha/PN3IPtGMhT7+vIs+tAe3vt6/er+oQw0/ePAm
P0oolj87Iba+fciyPqYpR7+Sopi+ybhvPy2v2L6N/+I+QSwBPqsJzb0gX4i9
2CyAPHT3uL6HD6c+H4lnvl7Ck750bok+SiUfv7MSNr9QUbO9MGYcvyi8Rr6J
w7c+mA5Qv46Y6z7g0ic/6G7FvQaSQz8uHnk9qgaKvlu3gDxhaZy+u6gVP/6N
dz61vB6/9J58vEbR2r7Es1o/QCaNP0Oakr+OBRw/G2zRPoajLT8463W+d+WH
vosXNT6VygS+TMMlv/KJF75cUCW/UZ1VPTgQrD6D9iA/6mkdP1G9pr6eVEo/
+WjdvvUqpL8oUgg+yTX4vmczfj+2siQ9IhSuPh4p9L0oR94+8w32Ph/lgL8C
k2s/LA9Dv+F3Ez6Bm1K/4ZfZvnMFRb4FnAC+aDEUvgsPFb/yUhu/B88Wv7Os
juU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23156870901584625`, 
                    0.0004954067408107221, -0.292780339717865, \
-0.24247325956821442`, -0.1889299899339676, -0.11723654717206955`, \
-0.26107656955718994`, -0.10974300652742386`, 0.11418016999959946`, 
                    0.07952184975147247, -0.05306633561849594, 
                    0.02283780463039875, -0.09006823599338531, 
                    0.20391348004341125`, 
                    0.10222354531288147`, -0.2671969532966614, 
                    0.20267589390277863`, 
                    0.23441551625728607`, -0.2273472249507904, \
-0.07518532872200012, 
                    0.2699074447154999, -0.06594492495059967, \
-0.2960050702095032, 0.25027528405189514`, 
                    0.2921883761882782, -0.028150519356131554`, \
-0.03407546132802963, -0.23380516469478607`, -0.0034959132317453623`, \
-0.21219393610954285`, -0.033819787204265594`, -0.10065795481204987`, \
-0.08978595584630966, 0.18103092908859253`, 
                    0.18279166519641876`, -0.30853357911109924`, \
-0.19399414956569672`, -0.2201102077960968, -0.15339022874832153`, \
-0.26912763714790344`, 
                    0.014253907836973667`, -0.22337473928928375`, \
-0.154513418674469, -0.24742378294467926`, -0.24445249140262604`, 
                    0.0462406687438488, -0.29659658670425415`, 
                    0.1890476495027542, -0.2456604242324829, 
                    0.2550148367881775}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association[
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
                "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
fVv2suLQZJp2L1f8PyCaynM=
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.3177126348018646, -0.14914363622665405`, \
-0.21144825220108032`, -0.1885901689529419, 
                    0.07156162708997726, -0.21948011219501495`, 
                    0.10633078962564468`, 
                    0.16254261136054993`, -0.15357643365859985`, \
-0.2701399326324463, 0.13518355786800385`, -0.1301795393228531, 
                    0.19621464610099792`, -0.20768500864505768`, 
                    0.15196606516838074`, 0.08512796461582184, 
                    0.18009242415428162`, 
                    0.06630713492631912, -0.17613457143306732`, 
                    0.15950439870357513`, 
                    0.15506304800510406`, -0.011516558937728405`, 
                    0.16498830914497375`, -0.21605142951011658`, 
                    0.15322385728359222`, -0.19336475431919098`, 
                    
                    0.21336530148983002`, -0.21482788026332855`, \
-0.15288053452968597`, 
                    0.15806955099105835`, -0.16381393373012543`, \
-0.20645691454410553`, 0.13490934669971466`, -0.011246195062994957`, 
                    0.05664548650383949, -0.16361820697784424`, \
-0.2094004899263382, -0.27560287714004517`, -0.03869571164250374, 
                    0.21481424570083618`, 
                    0.14444606006145477`, -0.13211296498775482`, 
                    0.13059073686599731`, 0.004709486849606037, 
                    0.08111852407455444, 
                    0.22643886506557465`, -0.2503538131713867, \
-0.18374741077423096`, 0.16446147859096527`, -0.14676421880722046`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association[
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
                "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwViX0s1HEcgK9zWbQ5l7mkhcvbIqNToX7fz5z3FX94SdNIp5Fxudt5S7mV
jiIRa1mIaTXVUmyllft9PySvzdsVo5DMbZxld2oqqYk/nmd79oiS5FEpXA6H
k7ltQ1HSXIlSKc2LNt2MZKnMWyzbnCYbiDd4W1RDdb2p8MWJhzK7ClYTHwm2
A3J8YrxI6wcleEL3nri18GBCUwPJ5Zas4uoK8ZrcTnIMy0xPSB69VGyCXbps
DHDO0AhYf6o9UIzurus0XdVPOT2lkN1uoIM+3eyK4jGpkyJdCvagRi9TctS1
nHwVj5HhBR0ZEYXDcKs/FDqXkVO+BShIHYZHNzxQHnYIaoIbQc8NgsP1Qtz7
MhnnZ5uIMksEaWaBOGTfSIQDsWQh9A0xXdDTyNb9uNg8QR1/RVPrcDEJeDeH
x90TQZH+kcTE+iHW9zEChzPsdGosGqudwH/oIcYEF8LM0/M0Ic0fUvhzbOu3
IvbyuAq6es1Asp6lqeo7CWrOTiKoLQVth5o9KLhGPrWnk7XmLe2tWXWw+qwS
063MmSaFnDq6/aCdfxuoi+Np9JTfxdcf5mnJ0k9aoM+DgHghIX48tP1zG5Is
bpFV60km7n4KYyMORv6ry9RFrYbJ6xW45C0jgb5Ay9eLYNRdCXDsBaO3MpKp
7mqwX+OiJCITRgKqYIe5GWYYI7CF30b7PrfA84J89Nmdi+cqqlDS4ImVpBZU
hilmqLiadsRpCRPkjvdKVBCUaSAXppthyGWGhiauwXInF8oc7egqfxfwej1B
tXYTe4SjlJ8gwsqz0cQ50BIczO+AaFHI9u95wPRbXMEjnvlEOyYkv/flwLgs
DKUCFYZwY4E36wttW/+hzfc59j+giyr3
                   "], "Biases" -> 
                  RawArray["Real32",{-0.10258512198925018`, 
                    0.16186101734638214`, -0.15936347842216492`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "12.3.2", "Unstable" -> False]], 
         "Training" -> 
         Association[
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 1.523673, "MeanInputsPerSecond" -> 
           25202.25796479953], "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {-0.00016152746074048273`, 
                 0.03434336478764821, -0.011079087694963961`, 
                 0.01713280734672463}, 
                "StandardDeviation" -> {0.9999054486536039, 0.951981772664899,
                  0.9994020962724488, 1.003239688763543}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3127154491023207210]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
                "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
                "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "FeatureNumber" -> 4, "Calibrator" -> None, "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "NetworkType" -> 
           Association[
            "Value" -> "FullyConnected", "Options" -> Association[]], 
           "NetworkDepth" -> 
           Association["Value" -> 2, "Options" -> Association[]], 
           "NumberOfParameters" -> 
           Association["Value" -> 2850, "Options" -> Association[]], 
           "ActivationFunction" -> 
           Association["Value" -> "SELU", "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "Dropout" -> 
           Association["Value" -> 0.01, "Options" -> Association[]], 
           "NetInitializationMethod" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association[
            "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
             Association[]], MaxTrainingRounds -> 
           Association["Value" -> 300, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "EarlyStopping" -> 
           Association["Value" -> False, "Options" -> Association[]], 
           TrainingProgressReporting -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "NetTrainOptions" -> 
           Association[
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> Association[]], "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "ValidationSetRatio" -> 
           Association["Value" -> None, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["ffb36e92-5298-4d9d-bf9f-ab563b78263e"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.595869`6.226695785399794, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.327828987534507, 0.23256738583193942`], "Accuracy" -> 
            Around[0.9242424242424244, 0.08079245573845538], "EvaluationTime" -> 
            0.0009501249118899422, "TestSize" -> 21, "ModelMemory" -> 57808, 
            "ModelUtility" -> 0.28941251803626966`, "TrainingSize" -> 84, 
            "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 319592,
             "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.327828987534507, 0.16444997560459254`]}, 
            "AccuracyHistory" -> {
              Around[0.9242424242424244, 0.05712889332137579]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 2850, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.3878874786355238`, 0.5585743144926065], "Accuracy" -> 
                 Around[0.8608058608058614, 0.051473286168563934`], 
                 "EvaluationTime" -> 0.00035136418446315325`, "TestSize" -> 
                 90, "ModelMemory" -> 91240, 
                 "ModelUtility" -> -1.0983788540438475`, "TrainingSize" -> 15,
                  "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 1155760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3878874786355238`, 0.39497168557434925`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8608058608058614, 0.03639710969974728]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00035136418446315325`, 
                "MeanCrossEntropy" -> 
                Around[1.3878874786355238`, 0.5585743144926065], 
                "ModelMemory" -> 91240, "TrainingMemory" -> 1155760, 
                "TrainingTime" -> 6.4826692033451785`], "Index" -> 1], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 2850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.327828987534507, 0.23256738583193942`], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.0009501249118899422, "TestSize" -> 21, 
                 "ModelMemory" -> 57808, "ModelUtility" -> 
                 0.28941251803626966`, "TrainingSize" -> 84, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 319592, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.327828987534507, 0.16444997560459254`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.44771971986716896`, 0.19626428159871717`], 
                 "Accuracy" -> 
                 Around[0.8608058608058614, 0.051473286168563934`], 
                 "EvaluationTime" -> 0.00017609924360679038`, "TestSize" -> 
                 90, "ModelMemory" -> 57808, "ModelUtility" -> 
                 0.026376541748951543`, "TrainingSize" -> 15, "TrainingTime" -> 
                 1., "TrainingMemory" -> 293240, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.44771971986716896`, 0.13877980442315904`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8608058608058614, 0.03639710969974728]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00017609924360679038`, 
                "MeanCrossEntropy" -> 
                Around[0.44771971986716896`, 0.19626428159871717`], 
                "ModelMemory" -> 57808, "TrainingMemory" -> 293240, 
                "TrainingTime" -> 2.6348931924611136`], "Index" -> 2], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 17850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 17850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.643300115579097, 0.3253009401408342], "Accuracy" -> 
                 Around[0.9157509157509163, 0.04130380753619949], 
                 "EvaluationTime" -> 0.00035136418446315325`, "TestSize" -> 
                 90, "ModelMemory" -> 183824, 
                 "ModelUtility" -> -0.3483980317829317, "TrainingSize" -> 15, 
                 "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 739952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.643300115579097, 0.23002250069994304`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9157509157509163, 0.029206202397670685`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00035136418446315325`, 
                "MeanCrossEntropy" -> 
                Around[0.643300115579097, 0.3253009401408342], "ModelMemory" -> 
                183824, "TrainingMemory" -> 739952, "TrainingTime" -> 
                6.4826692033451785`], "Index" -> 4], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 2850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 17850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6658659801271356, 0.6042256613227802], "Accuracy" -> 
                 Around[0.8787878787878788, 0.09965059119978148], 
                 "EvaluationTime" -> 0.0011961363959569426`, "TestSize" -> 21,
                  "ModelMemory" -> 160784, 
                 "ModelUtility" -> -0.47181541198279886`, "TrainingSize" -> 
                 84, "TrainingTime" -> 7.943282347242816, "TrainingMemory" -> 
                 567136, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6658659801271356, 0.4272520624882641]}, 
                 "AccuracyHistory" -> {
                   Around[0.8787878787878788, 0.07046360878661398]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0011961363959569426`, "MeanCrossEntropy" -> 
                Around[0.6658659801271356, 0.6042256613227802], "ModelMemory" -> 
                160784, "TrainingMemory" -> 567136, "TrainingTime" -> 
                16.283728811847773`], "Index" -> 7], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 2850], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 6.484375*^-6, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546856903568`16.3359491301763*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 7.151124166962701, 
             "ElapsedTimes" -> 10.182887, "ExperimentCounts" -> 3], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 10.21589166708957, 
             "ElapsedTimes" -> 10.655584000000001`, "ExperimentCounts" -> 2]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 21.892442, 
         "MaxTrainingMemory" -> 2293912, "DataMemory" -> 24976, 
         "FunctionMemory" -> 247832, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 34, 16.987457`7.98270335521717}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"RandomForest\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.061974, "MaxTrainingMemory" -> 172136,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 34, 17.056535`7.984465794284254}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 4}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5492756366729736, 0.8207125663757324}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 4}], 
             "NumericalThresholds" -> {0.6402390003204346, -0.905788004398346,
               0.42615002393722534`}, "Children" -> 
             RawArray["Integer16",{{2, -4}, {-1, 3}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 3, 3, 3}], 
             "NumericalThresholds" -> {-0.5302656888961792, \
-1.2652440071105957`, 0.5889243483543396, 0.08817707002162933}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -5}, {-3, -4}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 4, 2}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5492756366729736, 0.2893722653388977, -1.0600711107254028`}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -5}, {-2, 4}, {-3, -4}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3}], 
             "NumericalThresholds" -> {-1.030963659286499, 
              0.42615002393722534`, 0.7151022553443909}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 2, 3, 2, 2}], 
             "NumericalThresholds" -> {-0.5255937576293945, \
-0.15482191741466522`, 0.5346637964248657, 
              0.7550780177116394, -0.14199738204479218`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 
               5}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.5571823716163635,
               0.4283200800418854}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {
              0.6402390003204346, -1.1607050895690918`}, "Children" -> 
             RawArray["Integer16",{{2, -3}, {-1, -2}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 2, 3, 4}], 
             "NumericalThresholds" -> {-0.5255937576293945, \
-0.13824987411499023`, 0.5889243483543396, -0.24233967065811157`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -5}, {-3, -4}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 1, 1, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {
              0.5889243483543396, -0.905788004398346}, "Children" -> 
             RawArray["Integer16",{{2, -3}, {-1, -2}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 3, 2}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.8207125663757324, 0.537681519985199, -1.2850735187530518`}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -5}, {4, -4}, {-2, -3}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 3, 3}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5571823716163635, 0.42704036831855774`, 0.6024003028869629}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5889243483543396}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 1}], 
             "NumericalThresholds" -> {
              0.5296009182929993, -1.2617871761322021`, -0.4177863597869873}, 
             "Children" -> RawArray["Integer16",{{2, -4}, {-1, 3}, {-2, -3}}],
              "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 1}], 
             "NumericalThresholds" -> {-1.0391676425933838`, 
              0.5492756366729736, 0.06770141422748566}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 1, 1, 2, 4}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.5492756366729736,
               0.19686725735664368`, 0.3078843355178833, -1.946445107460022, 
              0.8259717226028442}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 6}, {-2, 4}, {-3, 
               5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 1, 3, 4, 3}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.5445593595504761,
               0.47837552428245544`, 0.29328569769859314`, 
              0.6402390003204346}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 5}, {
               4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 2, 3, 3}], 
             "NumericalThresholds" -> {-0.535796582698822, \
-0.8332695364952087, 0.6402390003204346, 0.13425961136817932`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -5}, {-3, -4}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{2, 1, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 1}], 
             "NumericalThresholds" -> {-0.905788004398346, 
              0.5889243483543396, -0.4197988212108612}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 1}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.6402390003204346, 0.18357205390930176`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3}], 
             "NumericalThresholds" -> {-1.030963659286499, 
              0.42615002393722534`, 0.6024003028869629}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 2}], 
             "NumericalThresholds" -> {-0.905788004398346, 
              0.5296009182929993, -1.2850735187530518`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {
              0.6402390003204346, -1.030963659286499}, "Children" -> 
             RawArray["Integer16",{{2, -3}, {-1, -2}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.5571823716163635,
               0.4283200800418854}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.5571823716163635,
               0.5346637964248657}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 3, 4, 3, 4}], 
             "NumericalThresholds" -> {-0.4052045941352844, \
-1.1607050895690918`, 0.15200169384479523`, 0.6402390003204346, 
              0.026257261633872986`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {
               5, -6}, {-4, -5}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
             "NumericalThresholds" -> {
              0.5889243483543396, -0.905788004398346}, "Children" -> 
             RawArray["Integer16",{{2, -3}, {-1, -2}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3}], 
             "NumericalThresholds" -> {-1.030963659286499, 0.5571823716163635,
               0.5346637964248657}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 4}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.5889243483543396,
               0.8120118975639343}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 3, 1, 4, 4, 2, 3}], 
             "NumericalThresholds" -> {-0.5302656888961792, \
-1.1607050895690918`, 0.4278968274593353, 
              0.8207125663757324, -0.24733179807662964`, \
-0.14868326485157013`, 1.1612696647644043`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 7}, {5, -6}, {-3, 
               6}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 3, 3, 2, 4}], 
             "NumericalThresholds" -> {-0.5255937576293945, \
-1.2652440071105957`, 0.6402390003204346, -0.1538207083940506, 
              0.42615002393722534`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -6}, {-3, 
               5}, {-4, -5}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 2}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5571823716163635, -1.0600711107254028`, \
-0.13915526866912842`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 2}], 
             "NumericalThresholds" -> {
              0.6402390003204346, -1.030963659286499, -1.2850735187530518`}, 
             "Children" -> RawArray["Integer16",{{2, -4}, {-1, 3}, {-2, -3}}],
              "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 1}], 
             "NumericalThresholds" -> {-1.030963659286499, 
              0.5889243483543396, -0.765555739402771}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 4, 4, 2}], 
             "NumericalThresholds" -> {-1.2617871761322021`, 
              0.8207125663757324, 0.42615002393722534`, 
              0.2893722653388977, -0.8332695364952087}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -6}, {4, -5}, {-2, 
               5}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 2, 4, 4, 3}], 
             "NumericalThresholds" -> {-1.1607050895690918`, \
-0.14868326485157013`, 0.42615002393722534`, 0.8207125663757324, 
              0.6402390003204346}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {
               5, -6}, {-4, -5}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 2, 3}], 
             "NumericalThresholds" -> {-0.905788004398346, 
              0.5889243483543396, -0.13915526866912842`, 1.0980396270751953`},
              "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 2}], 
             "NumericalThresholds" -> {-0.905788004398346, 
              0.6402390003204346, -1.2850735187530518`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{1, 2, 3, 3, 4}], 
             "NumericalThresholds" -> {-0.5255937576293945, \
-0.1480911821126938, 0.6402390003204346, -0.14344969391822815`, 
              0.4143613278865814}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -6}, {-3, 
               5}, {-4, -5}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5492756366729736, -1.0600711107254028`, 0.06770141422748566}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 4}], 
             "NumericalThresholds" -> {-1.0391676425933838`, 
              0.5889243483543396, 0.42615002393722534`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 1, 3, 1, 3}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.4278968274593353,
               0.5889243483543396, 1.0374563932418823`, 0.5346637964248657}, 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {
               5, -6}, {-4, -5}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 1}], 
             "NumericalThresholds" -> {-0.905788004398346, 
              0.5889243483543396, -0.28986355662345886`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 4}], 
             "NumericalThresholds" -> {0.5346637964248657, -1.030963659286499,
               0.4125659167766571}, "Children" -> 
             RawArray["Integer16",{{2, -4}, {-1, 3}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 4, 4}], 
             "NumericalThresholds" -> {-1.030963659286499, 0.5889243483543396,
               0.29328569769859314`, 0.5447266697883606}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 4}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.6402390003204346, 0.5492756366729736}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -4}, {-2, -3}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 3, 3}], 
             "NumericalThresholds" -> {
              0.5492756366729736, -1.1607050895690918`, 0.4283200800418854, 
              0.5889243483543396}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 4, 2, 4}], 
             "NumericalThresholds" -> {-1.1607050895690918`, 
              0.5445593595504761, 0.5571823716163635, -1.0600711107254028`, 
              0.4125659167766571}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 5}, {
               4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 3, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 4, 3, 1}], 
             "NumericalThresholds" -> {-1.030963659286499, 0.5571823716163635,
               0.537681519985199, 0.06770141422748566}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 4}], 
             "NumericalThresholds" -> {-0.905788004398346, 0.537681519985199, 
              0.8090122938156128}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 3, 3}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]]}, "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
            "Key" -> "f1", "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "OOBConfusionMatrix" -> {{0.9096045196056367, 0.0451977401971817, 
          0.0451977401971817}, {0.0451977401971817, 0.9096045196056367, 
          0.0451977401971817}, {0.0451977401971817, 0.0451977401971817, 
          0.9096045196056367}}, "Calibrator" -> 
         MachineLearning`CalibratorFunction["TemperatureScaling", 
           Association["Theta" -> 1.6994372782927605`]], "Method" -> 
         "RandomForest", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "FeatureFraction" -> 
           Association["Value" -> Rational[1, 2], "Options" -> Association[]],
            "LeafSize" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "TreeNumber" -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "Implementation" -> 
           Association["Value" -> "DAAL", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["5b02c1a5-cbd7-4d35-8d87-75575ceba794"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.168751`5.67879134858834, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.4133473013242575, 0.062037886604184196`], "Accuracy" -> 
            Around[0.893939393939394, 0.04049183336765798], "EvaluationTime" -> 
            0.0003945315672256342, "TestSize" -> 63, "ModelMemory" -> 97464., 
            "ModelUtility" -> 0.16071112153005407`, "TrainingSize" -> 84, 
            "TrainingTime" -> 0.021244183441040537`, "TrainingMemory" -> 
            168308., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
              Around[0.3873298626506534, 0.09626089343952433], 
              Around[0.3964833677255228, 0.09731289096544216], 
              Around[0.45622867359659636`, 0.11032169428313475`]}, 
            "AccuracyHistory" -> {
              Around[0.8787878787878789, 0.07046360878661401], 
              Around[0.9242424242424244, 0.05712889332137579], 
              Around[0.878787878787879, 0.070463608786614]}, 
            "Configuration" -> {
             "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
              Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
              0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 
            105], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8393741214065976, 0.028052093971641955`], 
                 "Accuracy" -> 
                 Around[0.8058608058608066, 0.05881734832524088], 
                 "EvaluationTime" -> 0.00007010637160891033, "TestSize" -> 90,
                  "ModelMemory" -> 97464, 
                 "ModelUtility" -> -0.5247431071939436, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 176808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8393741214065976, 0.019835825873830294`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8058608058608066, 0.04159014585218905]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.4133473013242575, 0.062037886604184196`], 
                 "Accuracy" -> Around[0.893939393939394, 0.04049183336765798],
                  "EvaluationTime" -> 0.0003945315672256342, "TestSize" -> 63,
                  "ModelMemory" -> 97464., "ModelUtility" -> 
                 0.16071112153005407`, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.021244183441040537`, "TrainingMemory" -> 168308., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.3873298626506534, 0.09626089343952433], 
                   Around[0.3964833677255228, 0.09731289096544216], 
                   Around[0.45622867359659636`, 0.11032169428313475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8787878787878789, 0.07046360878661401], 
                   Around[0.9242424242424244, 0.05712889332137579], 
                   Around[0.878787878787879, 0.070463608786614]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0003945315672256342, "MeanCrossEntropy" -> 
                Around[0.4133473013242575, 0.062037886604184196`], 
                "ModelMemory" -> 97464., "TrainingMemory" -> 168308., 
                "TrainingTime" -> 0.1017392160855207], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 2], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 6.484375*^-6, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546857856663`16.33594913028433*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.04361740902781887, 
             "ElapsedTimes" -> 0.092622, "ExperimentCounts" -> 1], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 0.21808704513909427`, 
             "ElapsedTimes" -> 0.249647, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 1.322675, 
         "MaxTrainingMemory" -> 651936, "DataMemory" -> 24976, 
         "FunctionMemory" -> 200712, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 34, 18.311366`8.015295727467121}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"SupportVectorMachine\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["105", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[
      Association[
      "ExampleNumber" -> 105, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["SynthesizeMissingValues", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Distribution" -> LearnedDistribution[
                  Association[
                  "ExampleNumber" -> 105, "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                   "Processor" -> MachineLearning`MLProcessor["Identity"], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> 
                   Association[
                    "RotationMatrix" -> {{-0.36078757832574226`, 
                    0.6726929291780801, 0.561802722910827, 
                    0.3188953541361821}, {0.08776417205087261, 
                    0.7134164575212562, -0.6247686038048672, \
-0.30495671814499015`}, {-0.8582943224623801, -0.16781879142634804`, \
-0.07862577784066833, -0.4785244991972652}, {-0.354204219990269, \
-0.10177442908626966`, -0.5365257489521325, 0.759158387187155}}, 
                    "Precisions" -> {0.2357979074045417, 3.8345639506492204`, 
                    13.759438913785566`, 45.56391480257443}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857148, 3.0647619047619052`, 
                    3.748571428571427, 1.1847619047619045`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 0}, "ID" -> 6680400375120560342]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                   "TrainingInformation" -> 
                   Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.842857142857147, 3.064761904761904, 
                    3.748571428571428, 1.1847619047619053`}, 
                    "StandardDeviation" -> {0.8337930704639528, 
                    0.4424995996513594, 1.7711505158116496`, 
                    0.753882768754494}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 0}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, "Log" -> 
                   Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
                    3246226001810280355]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.071654, "MaxTrainingMemory" -> 172128,
                     "DataMemory" -> 5520, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 0}, "Date" -> 
                    DateObject[{
                    2021, 6, 1, 14, 34, 18.390513`8.01716882822267}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.625747092160585, -1.625747092160585, \
-0.7302287900480491, -0.6725965505401056, -0.6680016397212853, \
-0.5452914372731925, -0.4370661150219246, -0.4368613194093418, \
-0.403470283918428, -0.37367180190246074`, -0.2554943527046544}, 
                    "LeftBoundary" -> -0.7302287900480491, "LeftScale" -> 
                    0.44775915105626796`, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                   Around[2.4593717530800108`, 0.48835237172692275`], 
                   "EntropySampleSize" -> 10]], "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 0},
                 "ID" -> 895810465636885430]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.842857142857147, 3.064761904761904, 
                 3.748571428571428, 1.1847619047619053`}, 
                "StandardDeviation" -> {0.8337930704639528, 
                 0.4424995996513594, 1.7711505158116496`, 0.753882768754494}, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 3090652515818404428]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 4663113255315977122]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.3, 0}, "ID" -> 
                7157639407059217478, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.3, 0}, "ID" -> 1627522998674154274]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "setosa" -> 0.3333333333333333, "versicolor" -> 0.3333333333333333, 
           "virginica" -> 0.3333333333333333]], "LabelSplitter" -> 
       MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "SVMParameters" -> 
         Association[
          "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
           0.15266378302907646`, "SoftMarginParameter" -> 3, 
           "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
           "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
           "KernelCacheSize" -> 100], "TrainedModel" -> {
           Association[
           "supportVectors" -> {{-1.2467558951753555`, -0.14809118853745684`, \
-1.3238315547029058`, -1.175721036266187}, {-1.0034962505791185`, 
             1.2182617121238302`, -1.3295592438640167`, \
-1.3066404565606677`}, {0.1968672643667435, -1.9508676230255262`, 
             0.13457525834625023`, -0.23915791704610204`}, {1.037456351356519,
              0.07254779417753629, 0.534663792367774, 
             0.4125659241211735}, {-0.7655557198940927, -0.8332695456598758, 
             0.07839841870977955, 0.2932856963083535}}, 
            "supportVectorCoefficients" -> {1.4773352201104033`, 
             0.4971035539869054, -0.1974692653267365, -0.424435006464332, \
-1.3525345023062403`}, "rho" -> 0.12698390976255675`], 
           Association[
           "supportVectors" -> {{-1.2467558951753555`, -0.14809118853745684`, \
-1.3238315547029058`, -1.175721036266187}, {-1.0034962505791185`, 
             1.2182617121238302`, -1.3295592438640167`, \
-1.3066404565606677`}, {1.6239519281625427`, 1.21851026575633, 
             1.3363107390972426`, 1.7501330755087043`}, {
             2.221964094316772, -0.1471066473008658, 1.3232227771768958`, 
             
             1.4856951574322204`}, {-1.1260176806763877`, \
-1.2850735344251984`, 0.42615883622901907`, 0.6879769337815665}}, 
            "supportVectorCoefficients" -> {1.2538325443653917`, 
             0.530723137257904, -0.4221661155577055, -0.3029514461535721, \
-1.0594381199120182`}, "rho" -> 0.31014699006074914`], 
           Association[
           "supportVectors" -> {{0.19081215263058074`, -0.36864309476529217`, 
             0.42038423035421424`, 0.4201831746379136}, {
             0.1968672643667435, -1.9508676230255262`, 
             0.13457525834625023`, -0.23915791704610204`}, {1.037456351356519,
              0.07254779417753629, 0.534663792367774, 
             0.4125659241211735}, {-0.7655557198940927, -0.8332695456598758, 
             0.07839841870977955, 0.2932856963083535}, {
             0.7801959976087189, -0.14441657680838366`, 0.8127702869688004, 
             1.0879986812456308`}, {-1.1260176806763877`, \
-1.2850735344251984`, 0.42615883622901907`, 0.6879769337815665}, {
             1.0297601778629542`, 0.528629468790417, 1.1058968724482998`, 
             1.2191317653487688`}}, 
            "supportVectorCoefficients" -> {1.9380659298725704`, 
             0.1841698596730136, 3., 3., -3., -3., -2.122235789545584}, "rho" -> 
            0.1944934172949838]}, 
         "ProbabilityCoefficients" -> {{-4.308403015136719, 
          0.10435089468955994`}, {-4.269250869750977, 
          0.40219736099243164`}, {-2.3496179580688477`, 
          0.12506979703903198`}}, "MulticlassStrategy" -> "OneVersusOne", 
         "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
            "Key" -> "f1", "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "KernelType" -> 
           Association[
            "Value" -> "RadialBasisFunction", "Options" -> Association[]], 
           "GammaScalingParameter" -> 
           Association[
            "Value" -> 0.15266378302907646`, "Options" -> Association[]], 
           "SoftMarginParameter" -> 
           Association["Value" -> 3, "Options" -> Association[]], 
           "PolynomialDegree" -> 
           Association["Value" -> 3, "Options" -> Association[]], 
           "BiasParameter" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "MulticlassStrategy" -> 
           Association["Value" -> "OneVersusOne", "Options" -> Association[]],
            "Shrinking" -> 
           Association["Value" -> True, "Options" -> Association[]], 
           "KernelCacheSize" -> 
           Association["Value" -> 100, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject["deba0093-4202-442a-a801-d30ae61afd13"], 
         "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.20138`5.755561330016742, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.26030385414830637`, 0.04868768452248616], "Accuracy" -> 
            Around[0.9267399267399271, 0.038746405961700835`], 
            "EvaluationTime" -> 0.00013988060131046298`, "TestSize" -> 90, 
            "ModelMemory" -> 16160, "ModelUtility" -> 0.6160188333287849, 
            "TrainingSize" -> 15, "TrainingTime" -> 0.5011872336272722, 
            "TrainingMemory" -> 187368, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.26030385414830637`, 0.034427391886121275`]}, 
            "AccuracyHistory" -> {
              Around[0.9267399267399271, 0.02739784640212553]}, 
            "Configuration" -> {
             "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
              "GammaScalingParameter" -> 0.15266378302907646`, 
              "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
              "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
              "Shrinking" -> True, "KernelCacheSize" -> 100}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.15266378302907646`], 
                "SoftMarginParameter" -> Association["Value" -> 3], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.26030385414830637`, 0.04868768452248616], 
                 "Accuracy" -> 
                 Around[0.9267399267399271, 0.038746405961700835`], 
                 "EvaluationTime" -> 0.00013988060131046298`, "TestSize" -> 
                 90, "ModelMemory" -> 16160, "ModelUtility" -> 
                 0.6160188333287849, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.5011872336272722, "TrainingMemory" -> 187368, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.26030385414830637`, 0.034427391886121275`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9267399267399271, 0.02739784640212553]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.3077468644875871, 0.22627563044113513`], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845538], 
                 "EvaluationTime" -> 0.00023866058744155807`, "TestSize" -> 
                 21, "ModelMemory" -> 19744, "ModelUtility" -> 
                 0.3481194515860747, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.25118864315095796`, "TrainingMemory" -> 207432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3077468644875871, 0.16000103270218782`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137579]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023866058744155807`, 
                "MeanCrossEntropy" -> 
                Around[0.3077468644875871, 0.22627563044113513`], 
                "ModelMemory" -> 19744, "TrainingMemory" -> 207432, 
                "TrainingTime" -> 0.7649353089357781], "Index" -> 1], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.05664936497921197], 
                "SoftMarginParameter" -> Association["Value" -> 0.4], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.010621094822652222`], 
                "SoftMarginParameter" -> Association["Value" -> 3], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.009261606424790347], 
                "SoftMarginParameter" -> Association["Value" -> 0.4], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.6621997773583692`, 0.042537548490175714`], 
                 "Accuracy" -> 
                 Around[0.003663003663003664, 0.008983397523456633], 
                 "EvaluationTime" -> 0.00007010637160891033, "TestSize" -> 90,
                  "ModelMemory" -> 18720, 
                 "ModelUtility" -> -1.2064087864315645`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 149464, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6621997773583692`, 0.03007858899245483]}, 
                 "AccuracyHistory" -> {
                   Around[0.003663003663003664, 0.006352221306930622]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5095456821681682, 0.11141426146395203`], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845535], 
                 "EvaluationTime" -> 0.00023866058744155807`, "TestSize" -> 
                 21, "ModelMemory" -> 41248, 
                 "ModelUtility" -> -0.06173299300756674, "TrainingSize" -> 84,
                  "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 152192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5095456821681682, 0.07878177980205152]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137577]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023866058744155807`, 
                "MeanCrossEntropy" -> 
                Around[0.5095456821681682, 0.11141426146395203`], 
                "ModelMemory" -> 41248, "TrainingMemory" -> 152192, 
                "TrainingTime" -> 0.4606911862226903], "Index" -> 4], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.22028395224966857`], 
                "SoftMarginParameter" -> Association["Value" -> 1.], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.3143348099095531], 
                "SoftMarginParameter" -> Association["Value" -> 0.4], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.065638565519553], 
                "SoftMarginParameter" -> Association["Value" -> 1.], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.05049025193862128], 
                "SoftMarginParameter" -> Association["Value" -> 0.1], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.2020637174044071], 
                "SoftMarginParameter" -> Association["Value" -> 0.1], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.3482788999740516], 
                "SoftMarginParameter" -> Association["Value" -> 0.1], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.9887271489050087`, 0.047212754311699336`], 
                 "Accuracy" -> 
                 Around[0.014652014652014654`, 0.017867438736566117`], 
                 "EvaluationTime" -> 0.00005568747040303022, "TestSize" -> 90,
                  "ModelMemory" -> 18720, 
                 "ModelUtility" -> -1.3853933215000969`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 119544, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9887271489050087`, 0.03338445873229701]}, 
                 "AccuracyHistory" -> {
                   Around[0.014652014652014654`, 0.012634187093061099`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.2681428156805944, 0.14957878652310888`], "Accuracy" -> 
                 Around[0.9242424242424244, 0.08079245573845535], 
                 "EvaluationTime" -> 0.00023866058744155807`, "TestSize" -> 
                 21, "ModelMemory" -> 37152, "ModelUtility" -> 
                 0.5172990735796635, "TrainingSize" -> 84, "TrainingTime" -> 
                 0.19952623149688792`, "TrainingMemory" -> 149176, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2681428156805944, 0.10576817427214526`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9242424242424244, 0.05712889332137577]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023866058744155807`, 
                "MeanCrossEntropy" -> 
                Around[0.2681428156805944, 0.14957878652310888`], 
                "ModelMemory" -> 37152, "TrainingMemory" -> 149176, 
                "TrainingTime" -> 0.36799186231784364`], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["SupportVectorMachine"]], 
              
              TypeSystem`Struct[{
               "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
                "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
                "Shrinking", "KernelCacheSize"}, {
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["RadialBasisFunction"]]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[TypeSystem`Boolean]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}]}]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association[]], "MaxTrainingSize" -> 105, 
         "PreprocessorEvaluationTime" -> 0.000010375, "PreprocessorMemory" -> 
         43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.0986122886681096`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.831546860768236`16.33594913061435*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.7803374801594519, 
             "ElapsedTimes" -> 1.103231, "ExperimentCounts" -> 3], 
            Association[
            "TrainingSizes" -> 84, "TimeBudgets" -> 1.1147678287992169`, 
             "ElapsedTimes" -> 1.2137710000000002`, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{5.8, 2.7, 4.1, 1.}}, "ID" -> 
              1494182311108529365]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 2.940973, 
         "MaxTrainingMemory" -> 784128, "DataMemory" -> 24976, 
         "FunctionMemory" -> 186352, "LanguageVersion" -> {12.3, 0}, "Date" -> 
         DateObject[{2021, 6, 1, 14, 34, 21.253434`8.080004094136653}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.720295954402911*^9, 3.720296021846931*^9, 
  3.721744084619018*^9, 3.721744457361312*^9, 3.7217452537077417`*^9, 
  3.72175019736534*^9, 3.721750256661302*^9, 3.831561261544002*^9},
 CellLabel->
  "Out[305]=",ExpressionUUID->"79cddfb5-198c-4996-a823-7678c6214bff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testIris", "[", 
  RowBox[{"[", "4", "]"}], "]"}]], "Input",
 CellChangeTimes->{3.720296808598095*^9},
 CellLabel->
  "In[306]:=",ExpressionUUID->"8a665d84-e099-4111-b846-166d316d9ab9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"6.1`", ",", "2.9`", ",", "4.7`", ",", "1.4`"}], "}"}], 
  "\[Rule]", "\<\"versicolor\"\>"}]], "Output",
 CellChangeTimes->{3.720296580556226*^9, 3.720296809152946*^9, 
  3.721744457513925*^9, 3.721745253926099*^9, 3.721750256828*^9, 
  3.8315612721226397`*^9},
 CellLabel->
  "Out[306]=",ExpressionUUID->"7eb3f1a3-dc11-499b-a814-ae599dfa0657"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Query", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"{", 
       RowBox[{"6.1`", ",", "2.9`", ",", "4.7`", ",", "1.4`"}], "}"}], "]"}], 
     "&"}]}], "]"}], "@", "trainIrisClassifiers"}]], "Input",
 CellChangeTimes->{{3.720296313690132*^9, 3.720296375591423*^9}, {
  3.72029640866992*^9, 3.720296451601668*^9}, {3.720296561164914*^9, 
  3.720296594420487*^9}, {3.720296819357078*^9, 3.720296853024103*^9}},
 CellLabel->
  "In[307]:=",ExpressionUUID->"a30c1b53-3e3f-412e-b60a-2261d3b8b65f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"DecisionTree\"\>", "\[Rule]", "\<\"versicolor\"\>"}], ",", 
   RowBox[{"\<\"GradientBoostedTrees\"\>", "\[Rule]", "\<\"versicolor\"\>"}], 
   ",", 
   RowBox[{"\<\"LogisticRegression\"\>", "\[Rule]", "\<\"versicolor\"\>"}], 
   ",", 
   RowBox[{"\<\"Markov\"\>", "\[Rule]", "\<\"versicolor\"\>"}], ",", 
   RowBox[{"\<\"NaiveBayes\"\>", "\[Rule]", "\<\"versicolor\"\>"}], ",", 
   RowBox[{"\<\"NearestNeighbors\"\>", "\[Rule]", "\<\"versicolor\"\>"}], ",", 
   RowBox[{"\<\"NeuralNetwork\"\>", "\[Rule]", "\<\"versicolor\"\>"}], ",", 
   RowBox[{"\<\"RandomForest\"\>", "\[Rule]", "\<\"versicolor\"\>"}], ",", 
   RowBox[{"\<\"SupportVectorMachine\"\>", 
    "\[Rule]", "\<\"versicolor\"\>"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7202963215820436`*^9, 3.72029637620389*^9}, {
   3.720296432525725*^9, 3.7202964531254787`*^9}, {3.720296564731228*^9, 
   3.720296590694228*^9}, {3.720296840318905*^9, 3.720296853480208*^9}, 
   3.721744457709455*^9, 3.7217452542643843`*^9, 3.721750257008647*^9, 
   3.831561274281624*^9},
 CellLabel->
  "Out[307]=",ExpressionUUID->"c9f3b538-2e00-427a-8f14-ea317e7d145c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Query", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"#", ",", "testIris", ",", "\"\<Accuracy\>\""}], "]"}], "&"}]}],
    "]"}], "@", "trainIrisClassifiers"}]], "Input",
 CellChangeTimes->{{3.720296934234393*^9, 3.720296985515051*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"a042759d-b435-4ae8-9f1a-02355397c926"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"DecisionTree\"\>", "\[Rule]", "0.8666666666666667`"}], ",", 
   RowBox[{"\<\"GradientBoostedTrees\"\>", "\[Rule]", "0.9333333333333333`"}],
    ",", 
   RowBox[{"\<\"LogisticRegression\"\>", "\[Rule]", "0.9777777777777777`"}], 
   ",", 
   RowBox[{"\<\"Markov\"\>", "\[Rule]", "0.8666666666666667`"}], ",", 
   RowBox[{"\<\"NaiveBayes\"\>", "\[Rule]", "0.9333333333333333`"}], ",", 
   RowBox[{"\<\"NearestNeighbors\"\>", "\[Rule]", "0.9555555555555556`"}], 
   ",", 
   RowBox[{"\<\"NeuralNetwork\"\>", "\[Rule]", "0.9777777777777777`"}], ",", 
   RowBox[{"\<\"RandomForest\"\>", "\[Rule]", "0.9333333333333333`"}], ",", 
   RowBox[{"\<\"SupportVectorMachine\"\>", "\[Rule]", 
    "0.9555555555555556`"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7202969754415607`*^9, 3.7202969862200003`*^9}, 
   3.7217444580909777`*^9, 3.721745254695064*^9, 3.7217502574047823`*^9, 
   3.831561294709601*^9},
 CellLabel->
  "Out[308]=",ExpressionUUID->"8389de7d-ded1-4d3d-aa85-b1b2cc638b7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Query", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"#", ",", "testIris", ",", "\"\<ConfusionMatrix\>\""}], "]"}], 
     "&"}]}], "]"}], "@", "trainIrisClassifiers"}]], "Input",
 CellChangeTimes->{{3.720296934234393*^9, 3.720296985515051*^9}, {
  3.7202970507337*^9, 3.7202970536291*^9}, {3.720297374818345*^9, 
  3.72029738954698*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"b56f4ab8-f150-48a4-9be8-5745659dc7c9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"DecisionTree\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"11", ",", "4", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "13", ",", "2", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "15", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"GradientBoostedTrees\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "13", ",", "2", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "14", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"LogisticRegression\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "15", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "14", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Markov\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "10", ",", "5", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "14", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"NaiveBayes\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "12", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "15", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"NearestNeighbors\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "14", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "14", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"NeuralNetwork\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "14", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "15", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"RandomForest\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"14", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "13", ",", "2", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "15", ",", "0"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"SupportVectorMachine\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "15", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2", ",", "13", ",", "0"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.720297054234769*^9, {3.720297377492043*^9, 3.72029739021903*^9}, 
   3.721744458459549*^9, 3.72174525503332*^9, 3.721750257771934*^9, 
   3.721755912818157*^9, 3.831561313941065*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"97c51245-835f-4bc4-a2af-a0ba79a5ac4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Query", "[", 
   RowBox[{
    RowBox[{"1", ";;", "2"}], ",", 
    RowBox[{
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"#", ",", "testIris", ",", "\"\<ConfusionMatrixPlot\>\""}], 
      "]"}], "&"}]}], "]"}], "@", "trainIrisClassifiers"}]], "Input",
 CellChangeTimes->{{3.720296934234393*^9, 3.720296985515051*^9}, {
  3.7202970507337*^9, 3.720297065367021*^9}, {3.720297183273781*^9, 
  3.72029730595408*^9}, {3.720297397194706*^9, 3.720297398135745*^9}, {
  3.721757007085153*^9, 3.721757007264152*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"837f017c-28a8-42c0-9b2d-ea5b4ff31054"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"DecisionTree\"\>", "\[Rule]", 
    GraphicsBox[
     RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {1., 0.42, 0.}}, {{1., 1., 1.}, {
      0.9301216397567206, 0.4894153611692776, 0.0034790480419039133`}, {
      0.9353011763927056, 0.8739641665426662, 0.6795547337349349}}, {{
      0.8602432795134409, 0.5588307223385554, 0.006958096083807835}, {
      0.9132520881963527, 0.7906463332713329, 0.4628378668674673}, {1., 1., 
      1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
     Epilog->{{
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "11", "\" examples of \"", "\"setosa\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.7333333333333333`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"FScore = \"", "0.846153846153846`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{11, " examples of ", "setosa", " correctly classified"}], 
            Row[{"Precision = ", 1.}], 
            Row[{"Recall = ", 0.7333333333333333}], 
            Row[{"FScore = ", 0.846153846153846}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"versicolor\"", 
                "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "versicolor", " misclassified as ", 
              "setosa"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"virginica\"", 
                "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "virginica", " misclassified as ", 
              "setosa"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "4", "\" examples of \"", "\"setosa\"", 
                "\" misclassified as \"", "\"versicolor\""}, "RowDefault"]}, {
             
              
              TemplateBox[{"\"Column fraction = \"", "0.23529411764705882`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Row fraction = \"", "0.26666666666666666`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{4, " examples of ", "setosa", " misclassified as ", 
              "versicolor"}], 
            Row[{"Column fraction = ", 0.23529411764705882`}], 
            Row[{"Row fraction = ", 0.26666666666666666`}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "13", "\" examples of \"", "\"versicolor\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.7647058823529411`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
               "RowDefault"]}, {
              TemplateBox[{"\"FScore = \"", "0.8125`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{13, " examples of ", "versicolor", " correctly classified"}], 
            Row[{"Precision = ", 0.7647058823529411}], 
            Row[{"Recall = ", 0.8666666666666667}], 
            Row[{"FScore = ", 0.8125}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"virginica\"", 
                "\" misclassified as \"", "\"versicolor\""}, "RowDefault"]}, {
             
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "virginica", " misclassified as ", 
              "versicolor"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"setosa\"", 
                "\" misclassified as \"", "\"virginica\""}, "RowDefault"]}, {
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "setosa", " misclassified as ", 
              "virginica"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "2", "\" examples of \"", "\"versicolor\"", 
                "\" misclassified as \"", "\"virginica\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Column fraction = \"", "0.11764705882352941`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Row fraction = \"", "0.13333333333333333`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{2, " examples of ", "versicolor", " misclassified as ", 
              "virginica"}], 
            Row[{"Column fraction = ", 0.11764705882352941`}], 
            Row[{"Row fraction = ", 0.13333333333333333`}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "15", "\" examples of \"", "\"virginica\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.8823529411764706`"}, 
               "RowDefault"]}, {
              TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
              TemplateBox[{"\"FScore = \"", "0.9375`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{15, " examples of ", "virginica", " correctly classified"}], 
            
            Row[{"Precision = ", 0.8823529411764706}], 
            Row[{"Recall = ", 1.}], 
            Row[{"FScore = ", 0.9375}]}], "Tooltip"]& ]}, 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" of class \"", "\"setosa\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.7333333333333333`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " of class ", "setosa"}], 
           Row[{"Recall = ", 0.7333333333333333}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" of class \"", 
               "\"versicolor\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " of class ", "versicolor"}], 
           Row[{"Recall = ", 0.8666666666666667}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" of class \"", 
               "\"virginica\""}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " of class ", "virginica"}], 
           Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"setosa\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{11, " example", "s", " classified as ", "setosa"}], 
           Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "17", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"versicolor\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.7647058823529411`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{17, " example", "s", " classified as ", "versicolor"}], 
           Row[{"Precision = ", 0.7647058823529411}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "17", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"virginica\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.8823529411764706`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{17, " example", "s", " classified as ", "virginica"}], 
           Row[{"Precision = ", 0.8823529411764706}]}], "Tooltip"]& ]},
     Frame->True,
     FrameLabel->{
       FormBox["\"predicted class\"", TraditionalForm], 
       FormBox["\"actual class\"", TraditionalForm]},
     FrameTicks->{{{{2.5, 
          FormBox[
           RotationBox["\"setosa\"", BoxRotation -> 0.], TraditionalForm]}, {
         1.5, 
          FormBox[
           RotationBox["\"versicolor\"", BoxRotation -> 0.], 
           TraditionalForm]}, {0.5, 
          FormBox[
           RotationBox["\"virginica\"", BoxRotation -> 0.], 
           TraditionalForm]}}, {{2.5, 
          FormBox["15", TraditionalForm]}, {1.5, 
          FormBox["15", TraditionalForm]}, {0.5, 
          FormBox["15", TraditionalForm]}}}, {{{0.5, 
          FormBox[
           RotationBox["11", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["17", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {2.5, 
          FormBox[
           RotationBox["17", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}, {{0.5, 
          FormBox[
           RotationBox["\"setosa\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["\"versicolor\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {2.5, 
          FormBox[
           RotationBox["\"virginica\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}}},
     FrameTicksStyle->13,
     GridLinesStyle->Directive[
       GrayLevel[0.5, 0.4]],
     ImageSize->196.8,
     Method->{
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05]},
     PlotRangePadding->None]}], ",", 
   RowBox[{"\<\"GradientBoostedTrees\"\>", "\[Rule]", 
    GraphicsBox[
     RasterBox[{{{1., 1., 1.}, {0.9397109940319761, 0.8906277331969328, 
      0.7228981071084285}, {0.9440973118053764, 0.4755322889354221, 
      0.0027832384335231327`}}, {{1., 1., 1.}, {0.8881946236107527, 
      0.5310645778708442, 0.0055664768670462645`}, {0.9220717234748939, 
      0.8239734665798664, 0.5495246136144545}}, {{1., 0.42, 0.}, {1., 1., 
      1.}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
     Epilog->{{
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "15", "\" examples of \"", "\"setosa\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
              TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
              TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{15, " examples of ", "setosa", " correctly classified"}], 
            Row[{"Precision = ", 1.}], 
            Row[{"Recall = ", 1.}], 
            Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"versicolor\"", 
                "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "versicolor", " misclassified as ", 
              "setosa"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"virginica\"", 
                "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "virginica", " misclassified as ", 
              "setosa"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"setosa\"", 
                "\" misclassified as \"", "\"versicolor\""}, "RowDefault"]}, {
             
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "setosa", " misclassified as ", 
              "versicolor"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "13", "\" examples of \"", "\"versicolor\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9285714285714286`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"FScore = \"", "0.896551724137931`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{13, " examples of ", "versicolor", " correctly classified"}], 
            Row[{"Precision = ", 0.9285714285714286}], 
            Row[{"Recall = ", 0.8666666666666667}], 
            Row[{"FScore = ", 0.896551724137931}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "1", "\" example of \"", "\"virginica\"", 
                "\" misclassified as \"", "\"versicolor\""}, "RowDefault"]}, {
             
              
              TemplateBox[{"\"Column fraction = \"", "0.07142857142857142`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Row fraction = \"", "0.06666666666666667`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{1, " example of ", "virginica", " misclassified as ", 
              "versicolor"}], 
            Row[{"Column fraction = ", 0.07142857142857142}], 
            Row[{"Row fraction = ", 0.06666666666666667}]}], "Tooltip"]& ]}, {
       
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "0", "\" example of \"", "\"setosa\"", 
                "\" misclassified as \"", "\"virginica\""}, "RowDefault"]}, {
              TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             
              TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{0, " example of ", "setosa", " misclassified as ", 
              "virginica"}], 
            Row[{"Column fraction = ", 0.}], 
            Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "2", "\" examples of \"", "\"versicolor\"", 
                "\" misclassified as \"", "\"virginica\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Column fraction = \"", "0.125`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Row fraction = \"", "0.13333333333333333`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{2, " examples of ", "versicolor", " misclassified as ", 
              "virginica"}], 
            Row[{"Column fraction = ", 0.125}], 
            Row[{"Row fraction = ", 0.13333333333333333`}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["14", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "14", "\" examples of \"", "\"virginica\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              TemplateBox[{"\"Precision = \"", "0.875`"}, "RowDefault"]}, {
              TemplateBox[{"\"Recall = \"", "0.9333333333333333`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"FScore = \"", "0.903225806451613`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{14, " examples of ", "virginica", " correctly classified"}], 
            
            Row[{"Precision = ", 0.875}], 
            Row[{"Recall = ", 0.9333333333333333}], 
            Row[{"FScore = ", 0.903225806451613}]}], "Tooltip"]& ]}, 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" of class \"", "\"setosa\""}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " of class ", "setosa"}], 
           Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" of class \"", 
               "\"versicolor\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " of class ", "versicolor"}], 
           Row[{"Recall = ", 0.8666666666666667}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" of class \"", 
               "\"virginica\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9333333333333333`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " of class ", "virginica"}], 
           Row[{"Recall = ", 0.9333333333333333}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"setosa\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " example", "s", " classified as ", "setosa"}], 
           Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "14", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"versicolor\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9285714285714286`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{14, " example", "s", " classified as ", "versicolor"}], 
           Row[{"Precision = ", 0.9285714285714286}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "16", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"virginica\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "0.875`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{16, " example", "s", " classified as ", "virginica"}], 
           Row[{"Precision = ", 0.875}]}], "Tooltip"]& ]},
     Frame->True,
     FrameLabel->{
       FormBox["\"predicted class\"", TraditionalForm], 
       FormBox["\"actual class\"", TraditionalForm]},
     FrameTicks->{{{{2.5, 
          FormBox[
           RotationBox["\"setosa\"", BoxRotation -> 0.], TraditionalForm]}, {
         1.5, 
          FormBox[
           RotationBox["\"versicolor\"", BoxRotation -> 0.], 
           TraditionalForm]}, {0.5, 
          FormBox[
           RotationBox["\"virginica\"", BoxRotation -> 0.], 
           TraditionalForm]}}, {{2.5, 
          FormBox["15", TraditionalForm]}, {1.5, 
          FormBox["15", TraditionalForm]}, {0.5, 
          FormBox["15", TraditionalForm]}}}, {{{0.5, 
          FormBox[
           RotationBox["15", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["14", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {2.5, 
          FormBox[
           RotationBox["16", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}, {{0.5, 
          FormBox[
           RotationBox["\"setosa\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["\"versicolor\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {2.5, 
          FormBox[
           RotationBox["\"virginica\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}}},
     FrameTicksStyle->13,
     GridLinesStyle->Directive[
       GrayLevel[0.5, 0.4]],
     ImageSize->196.8,
     Method->{
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05]},
     PlotRangePadding->None]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.720297218256145*^9, 3.720297307222332*^9}, 
   3.720297398694873*^9, 3.7217444589242887`*^9, 3.721745255455949*^9, 
   3.721750258167268*^9, 3.7217570109478493`*^9, 3.831561320431065*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"7616e72a-9286-4c37-9766-f2406044aa8d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->"RulerBar",
WindowSize->{551, 692},
WindowMargins->{{Automatic, -230}, {1079, Automatic}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
TaggingRules->{"Openers" -> {"ExampleSubsection" -> {"18" -> Closed}}},
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"923232c9-e3ea-4499-97a0-282be1396e1a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 414, 6, 160, "Title",ExpressionUUID->"3414ea2f-4509-4c5a-a02d-dd9b81320855"],
Cell[997, 30, 697, 15, 105, "Text",ExpressionUUID->"50c8a2f2-ad95-43e1-a8cf-800daf0992cd"],
Cell[1697, 47, 275, 6, 81, "Text",ExpressionUUID->"bd483a19-90ff-4f12-9212-b4d732c3b75e"],
Cell[CellGroupData[{
Cell[1997, 57, 463, 7, 69, "Chapter",ExpressionUUID->"2e5798e6-0771-4291-bfad-92143ba4a306"],
Cell[CellGroupData[{
Cell[2485, 68, 168, 3, 67, "Section",ExpressionUUID->"c99be4af-e9ce-49ed-b93c-760a3d79a93b"],
Cell[2656, 73, 300, 7, 30, "Input",ExpressionUUID->"bcc29e56-62f9-410e-9d03-0887477854de"],
Cell[2959, 82, 470, 9, 30, "Input",ExpressionUUID->"24769630-b8d7-46e1-9eec-5dba21b7a066"],
Cell[3432, 93, 358, 7, 30, "Input",ExpressionUUID->"f1c582a7-65af-480f-ac4c-b7bfcfb81599"],
Cell[CellGroupData[{
Cell[3815, 104, 503, 11, 52, "Input",ExpressionUUID->"563b6c8e-be78-470a-b05c-6bdcb1929298"],
Cell[4321, 117, 3753, 70, 350, "Output",ExpressionUUID->"5d662d6a-528e-4f84-b80a-6b5b424b1aa8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8111, 192, 396, 10, 30, "Input",ExpressionUUID->"28270b7d-94f8-4ffc-9056-45e0b6c6df14"],
Cell[8510, 204, 1725, 34, 119, "Output",ExpressionUUID->"9a317586-f4e3-4310-a5ef-ab96d9d7f305"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10272, 243, 422, 11, 30, "Input",ExpressionUUID->"eb3b2857-2ee9-47ad-8501-8cd42b96d802"],
Cell[10697, 256, 2848, 56, 203, "Output",ExpressionUUID->"68ae34b3-4941-48e1-8cc6-5691ae5b6423"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13582, 317, 204, 4, 30, "Input",ExpressionUUID->"fe947f65-1070-4c2f-a29d-d5424a600a3c"],
Cell[13789, 323, 20307, 410, 262, "Output",ExpressionUUID->"f24249be-098c-496d-a25a-22af4cf4b27f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34133, 738, 524, 13, 73, "Input",ExpressionUUID->"5ee5a5d3-a855-4f40-926b-fbf8e2b0e6c3"],
Cell[34660, 753, 702, 16, 45, "Output",ExpressionUUID->"ba442ed0-879e-41ca-b0e8-8d63b82bf46e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35399, 774, 768, 15, 52, "Input",ExpressionUUID->"c09aa857-247b-4e5d-8784-803ddc9674d6"],
Cell[36170, 791, 4622, 91, 308, "Output",ExpressionUUID->"f56f74ef-dae3-4ca3-8e4d-3455af7e8a0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40829, 887, 385, 9, 30, "Input",ExpressionUUID->"6241b91f-ce7c-49c4-9ec8-1a9b7940756e"],
Cell[41217, 898, 992, 21, 56, "Output",ExpressionUUID->"22c48852-e2be-4ec6-aa91-b869a277c1d8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42258, 925, 412, 6, 67, "Section",ExpressionUUID->"5f1de410-1edd-46bf-bd2b-9604d41f545a"],
Cell[42673, 933, 541, 10, 30, "Input",ExpressionUUID->"ccd5d70e-aa8a-4c04-abff-346993ae793f"],
Cell[43217, 945, 325, 7, 30, "Input",ExpressionUUID->"dca8e5f0-e27d-4338-8174-fe5d5a9c9e3a"],
Cell[CellGroupData[{
Cell[43567, 956, 222, 4, 30, "Input",ExpressionUUID->"f8358b46-c6d6-4eb9-9ed6-7ea9de75bf67"],
Cell[43792, 962, 987, 22, 71, "Output",ExpressionUUID->"a4c7fc80-e7b0-462e-a51a-912f3d0b6947"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44816, 989, 480, 12, 73, "Input",ExpressionUUID->"9c311f28-9300-4fde-8333-77d19ebd6398"],
Cell[45299, 1003, 774, 16, 45, "Output",ExpressionUUID->"809b481b-c208-4443-b1e6-0529c3cf6885"]
}, Open  ]],
Cell[46088, 1022, 938, 23, 73, "Input",ExpressionUUID->"3678d35b-12c7-407e-81ec-d6d38d4b101e"],
Cell[CellGroupData[{
Cell[47051, 1049, 438, 11, 30, "Input",ExpressionUUID->"65f41110-8c9a-40ca-9b99-598b76245d4d"],
Cell[47492, 1062, 805, 18, 67, "Output",ExpressionUUID->"ee8d2231-63e6-4d58-aeaf-fb89ce630d51"]
}, Open  ]],
Cell[48312, 1083, 618, 13, 73, "Input",ExpressionUUID->"0ec78ae9-45b2-4233-90c5-3301f50e1deb",
 CellID->1529498239],
Cell[CellGroupData[{
Cell[48955, 1100, 338, 8, 30, "Input",ExpressionUUID->"b823e353-9194-4f6d-8251-b16bcdedcc50"],
Cell[49296, 1110, 971, 23, 67, "Output",ExpressionUUID->"6fe2acc3-72ba-4614-9cd4-dbda83181bda"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50304, 1138, 1369, 29, 178, "Input",ExpressionUUID->"91a801f7-737f-4d5a-a80c-fb9cc30d2090",
 CellID->201935119],
Cell[51676, 1169, 14563, 307, 271, "Output",ExpressionUUID->"9c1fce81-2171-4df6-a4ab-6a5ff7fb8b7f"]
}, Open  ]],
Cell[66254, 1479, 548, 12, 73, "Input",ExpressionUUID->"9f0b704d-1513-4118-b091-37c6f16dc55c"],
Cell[CellGroupData[{
Cell[66827, 1495, 1230, 28, 241, "Input",ExpressionUUID->"9f4f8c18-18fa-46cd-a7cc-743a2ee60557"],
Cell[68060, 1525, 14047, 296, 274, "Output",ExpressionUUID->"b4290c9b-77d9-43db-8fb5-ba2592848722"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82156, 1827, 159, 3, 67, "Section",ExpressionUUID->"babb5ab9-f3ba-4d7e-8a88-882238d5bf1f"],
Cell[82318, 1832, 690, 13, 52, "Input",ExpressionUUID->"f9c6ac91-8848-477d-a459-ec712eaeff9b"],
Cell[83011, 1847, 584, 16, 52, "Input",ExpressionUUID->"b72fc511-007a-4fc4-851d-e78315f5214a"],
Cell[83598, 1865, 656, 13, 52, "Input",ExpressionUUID->"fc0a81d6-f16f-4a10-a9e2-195b8ed9aef1"],
Cell[CellGroupData[{
Cell[84279, 1882, 241, 5, 30, "Input",ExpressionUUID->"d7132f79-2685-4415-aa4e-63d3a9105797"],
Cell[84523, 1889, 428, 7, 34, "Output",ExpressionUUID->"583da4eb-3af4-4ca7-95cd-f07b9079a776"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84988, 1901, 458, 12, 30, "Input",ExpressionUUID->"735ce9d8-c6dc-4da3-aa44-6e21eeaa85f6"],
Cell[85449, 1915, 1044, 22, 67, "Output",ExpressionUUID->"b2926aba-a6c0-4646-97fd-55b63f01964d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86530, 1942, 328, 8, 30, "Input",ExpressionUUID->"3feb4dcd-9b15-42ec-82a2-f0395f251575"],
Cell[86861, 1952, 444, 7, 34, "Output",ExpressionUUID->"db779aef-631c-4cda-abeb-4b302f75f893"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87342, 1964, 466, 12, 30, "Input",ExpressionUUID->"01f2ed6a-f712-4da5-b482-96b5189112d3"],
Cell[87811, 1978, 825, 14, 77, "Output",ExpressionUUID->"400a1d0e-5069-4b84-ab1d-63e7a7204ba6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88673, 1997, 428, 10, 30, "Input",ExpressionUUID->"466f1684-5252-4af4-af69-2891c1ed5531"],
Cell[89104, 2009, 691, 13, 37, "Output",ExpressionUUID->"2c186d46-e88f-4b1a-9cbc-a93daeae12c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89832, 2027, 399, 8, 52, "Input",ExpressionUUID->"40fec9c0-5b24-433b-892e-766be1a17346"],
Cell[90234, 2037, 463, 7, 34, "Output",ExpressionUUID->"bf05fdf8-2b46-4d3e-a76f-92e02ad381f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90734, 2049, 446, 9, 52, "Input",ExpressionUUID->"738e0ec5-190d-4aab-b1c8-510087ac1d21"],
Cell[91183, 2060, 608, 14, 34, "Output",ExpressionUUID->"b2a727de-cbbd-4f03-b4f6-a67342ea5507"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91828, 2079, 503, 10, 52, "Input",ExpressionUUID->"0e2cbd80-14f3-4e97-9a54-ae7cd05d6bf7"],
Cell[92334, 2091, 9950, 255, 202, "Output",ExpressionUUID->"62388e88-9b6e-48d3-82f3-f164bf26c867"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[102333, 2352, 237, 4, 67, "Section",ExpressionUUID->"c3e63878-b2fc-42b6-9425-eb411103f028"],
Cell[CellGroupData[{
Cell[102595, 2360, 169, 3, 30, "Input",ExpressionUUID->"37f7f79b-6197-45ee-95d5-f132effdb422"],
Cell[102767, 2365, 1235, 30, 203, "Output",ExpressionUUID->"f1e3bbe8-f065-4605-8a84-d4f5e718c752"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104039, 2400, 398, 9, 52, "Input",ExpressionUUID->"208298d0-a7ed-4c21-bb85-3f926bd60b01"],
Cell[104440, 2411, 692, 12, 77, "Output",ExpressionUUID->"fec2aa2e-5688-45eb-9608-7874a03cf20b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105169, 2428, 367, 9, 52, "Input",ExpressionUUID->"9ac6749b-a5a0-488f-93b5-ad4c680b7dd0"],
Cell[105539, 2439, 562, 9, 119, "Output",ExpressionUUID->"a87e18e7-29e7-4172-a5a3-05ed75c1d1ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106138, 2453, 352, 8, 52, "Input",ExpressionUUID->"e2da36e1-f709-48ef-941f-fee7aa2c3725"],
Cell[106493, 2463, 709, 10, 203, "Output",ExpressionUUID->"8e674596-b604-491f-8006-1d2da55b5ca8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107239, 2478, 420, 9, 52, "Input",ExpressionUUID->"ea260498-47f1-4bba-b708-3745f1a129d9"],
Cell[107662, 2489, 617, 13, 60, "Output",ExpressionUUID->"451d8b40-c13c-4ea2-b3bf-7e579a004647"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108316, 2507, 181, 3, 41, "WolframAlphaLong",ExpressionUUID->"f42f8e14-039c-406d-b1c2-6294d4ade54a"],
Cell[108500, 2512, 306199, 5672, 1504, "Print",ExpressionUUID->"3a8b10dd-b53c-4cdf-9550-8c8fed69cbbe"]
}, Open  ]],
Cell[414714, 8187, 447, 11, 73, "Input",ExpressionUUID->"44c4d1eb-cf7e-4829-9536-ef083e914bf8"],
Cell[CellGroupData[{
Cell[415186, 8202, 258, 6, 30, "Input",ExpressionUUID->"fccf31b7-92aa-4ff6-a726-dfa85ea34c93"],
Cell[415447, 8210, 737, 19, 77, "Output",ExpressionUUID->"f071433b-4552-439b-9dac-1f4986f37dbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[416221, 8234, 406, 9, 52, "Input",ExpressionUUID->"ae4f636a-8cd7-4ebe-8e74-86806d602923"],
Cell[416630, 8245, 633, 12, 77, "Output",ExpressionUUID->"225bac20-2ed5-41fc-9c7d-045dc2ed89c4"]
}, Open  ]],
Cell[417278, 8260, 431, 9, 52, "Input",ExpressionUUID->"125c55c0-f107-4d31-b55d-0e365f42ea06"],
Cell[CellGroupData[{
Cell[417734, 8273, 284, 7, 30, "Input",ExpressionUUID->"199e3820-d793-44e9-b6e7-7bb5827973a9"],
Cell[418021, 8282, 1256, 32, 130, "Output",ExpressionUUID->"62a3ca9e-6cd2-4385-b2ef-1426968d29f8"]
}, Open  ]],
Cell[419292, 8317, 530, 14, 52, "Input",ExpressionUUID->"b767ce10-8ad7-46aa-ba62-95ab2ec3d0b8"],
Cell[419825, 8333, 596, 13, 115, "Input",ExpressionUUID->"d9c468e6-8f8b-472a-9e87-671d2966a1a7"],
Cell[CellGroupData[{
Cell[420446, 8350, 577, 15, 94, "Input",ExpressionUUID->"8b263840-d205-4d02-8c21-810cd890449b"],
Cell[421026, 8367, 559015, 10389, 779, "Output",ExpressionUUID->"79cddfb5-198c-4996-a823-7678c6214bff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[980078, 18761, 209, 5, 30, "Input",ExpressionUUID->"8a665d84-e099-4111-b846-166d316d9ab9"],
Cell[980290, 18768, 395, 9, 34, "Output",ExpressionUUID->"7eb3f1a3-dc11-499b-a814-ae599dfa0657"]
}, Open  ]],
Cell[CellGroupData[{
Cell[980722, 18782, 562, 13, 52, "Input",ExpressionUUID->"a30c1b53-3e3f-412e-b60a-2261d3b8b65f"],
Cell[981287, 18797, 1200, 21, 164, "Output",ExpressionUUID->"c9f3b538-2e00-427a-8f14-ea317e7d145c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[982524, 18823, 410, 10, 73, "Input",ExpressionUUID->"a042759d-b435-4ae8-9f1a-02355397c926"],
Cell[982937, 18835, 1070, 20, 143, "Output",ExpressionUUID->"8389de7d-ded1-4d3d-aa85-b1b2cc638b7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[984044, 18860, 512, 12, 73, "Input",ExpressionUUID->"b56f4ab8-f150-48a4-9be8-5745659dc7c9"],
Cell[984559, 18874, 3532, 90, 311, "Output",ExpressionUUID->"97c51245-835f-4bc4-a2af-a0ba79a5ac4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[988128, 18969, 638, 14, 73, "Input",ExpressionUUID->"837f017c-28a8-42c0-9b2d-ea5b4ff31054"],
Cell[988769, 18985, 38471, 939, 477, "Output",ExpressionUUID->"7616e72a-9286-4c37-9766-f2406044aa8d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

