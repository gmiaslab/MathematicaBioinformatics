(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    279167,       5346]
NotebookOptionsPosition[    274094,       5250]
NotebookOutlinePosition[    274571,       5269]
CellTagsIndexPosition[    274528,       5266]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Mathematica for Bioinformatics", "Title",
 CellChangeTimes->{{3.716505231034802*^9, 3.7165052399525843`*^9}, {
  3.7189700660987*^9, 3.718970066321953*^9}, {3.719671162174827*^9, 
  3.719671169138997*^9}, {3.719918559461687*^9, 3.719918616051854*^9}, {
  3.719918720054628*^9, 3.719918725308221*^9}, {3.7199190461734447`*^9, 
  3.719919048693425*^9}},ExpressionUUID->"8fce1eb3-3baf-4d7c-8a22-\
51601254c34a"],

Cell[TextData[{
 StyleBox["by George I. Mias, PhD\n",
  FontColor->RGBColor[
   0.1573052567330434, 0.15793087663080796`, 0.4541237506675822]],
 Cell[BoxData[
  TemplateBox[{"\"http://georgemias.org\"", "http://georgemias.org"},
   "HyperlinkURL"]], "Output",
  CellChangeTimes->{3.719919204810491*^9, 3.719919290636554*^9},
  FontFamily->"Source Code Pro",
  FontSize->18,ExpressionUUID->"b2a0e3ab-fbc5-403c-a77f-f9452b886e7e"]
}], "Text",
 CellChangeTimes->{{3.7199190500652037`*^9, 3.719919115146494*^9}, 
   3.7199191833934107`*^9, {3.7199192683634*^9, 3.719919303306136*^9}, 
   3.719919352773055*^9},
 FontSize->24,
 FontWeight->"Bold",ExpressionUUID->"8bf39aff-c1cd-4703-a4e0-7331c05c1135"],

Cell["\<\
Cite this chapter as:
Mias G. (2018) Prolog: Bioinformatics with the Wolfram Language. In: \
Mathematica for Bioinformatics. Springer, Cham. \
https://doi.org/10.1007/978-3-319-72377-8_1\
\>", "Text",
 CellChangeTimes->{
  3.831464355786683*^9},ExpressionUUID->"b722e1c1-0694-4892-a111-\
ea6d398f7050"],

Cell[CellGroupData[{

Cell["Chapter 1:  Prolog: Bioinformatics with the Wolfram Language", "Chapter",
 CellChangeTimes->{{3.716505231034802*^9, 3.7165052399525843`*^9}, {
   3.7189700660987*^9, 3.718970066321953*^9}, {3.719671162174827*^9, 
   3.719671169138997*^9}, {3.719918559461687*^9, 3.7199185831615763`*^9}, {
   3.719940867380904*^9, 3.719940871753984*^9}, {3.7221794702312393`*^9, 
   3.7221794724783154`*^9}, 
   3.722949928609507*^9},ExpressionUUID->"ee101586-1e20-47e9-8e2d-\
aa6489d0781f"],

Cell[CellGroupData[{

Cell["Wolfram Language", "Section",
 CellChangeTimes->{{3.720024290915996*^9, 3.720024294601527*^9}, {
  3.722179484472821*^9, 
  3.722179495102632*^9}},ExpressionUUID->"4fe8dba8-d822-42dc-9733-\
6a2e5c0a7c4a"],

Cell[TextData[{
 StyleBox["Wolfram Language Evaluations.",
  FontWeight->"Bold"],
 " We will be using Mathematica throughout this book.The code for each \
chapter is available in the ",
 StyleBox["notebook",
  FontSlant->"Italic"],
 "s accompanying this monograph. A basic introduction to the language is \
presented in the next chapter.Here, we provide just enough information to get \
you started and also to be able to evaluate the code in this chapter.\n\nA \
notebook is the main working/coding document for Mathematica (extension ",
 StyleBox[".nb",
  FontSlant->"Italic"],
 "). After you start Mathematica on your computer you can open a working \
document for coding  notebook is displayed. Alternatively a new notebook can \
be started using the application menus by selecting File \[Rule]  New \[Rule] \
Notebook. In notebooks (extension .nb), code is put in input chunks in cells, \
outlined in light brackets  (visible by hovering the mouse at the right edge \
of a notebook). Output is produced directly below the input, also outlined \
with a cell bracket, and output and input pairs are outlined with an overall \
external cell bracket. To create a new cell in a notebook move the cursor \
within the notebook until it appears as horizontal and click. A horizontal \
bar with then appear and a new cell will be created in that location where we \
can now type new code."
}], "Text",
 CellChangeTimes->{{3.720024495842773*^9, 
  3.7200246148791513`*^9}},ExpressionUUID->"8bba13dc-b1f3-43bd-bc90-\
7e31a32f6998"],

Cell["\<\
To evaluate a cell with input code, as long as your cursor is within the cell \
containing the code, or the cell is selected, you can type Shift+Enter and \
the code will be evaluated. Evaluated code will be prepended with  In[i]:= \
input code, where i denotes the ith evaluation. The corresponding ith output \
will begin with Out[n]= evaluation results. The tag i will be incremented \
automatically for the same coding session.
\
\>", "Text",
 CellChangeTimes->{{3.720024629008275*^9, 3.720024633511608*^9}, {
  3.720024715975473*^9, 
  3.720024738180674*^9}},ExpressionUUID->"1c4f6601-265a-4b80-9283-\
0636c2c4d8cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "+", "1"}]], "Input",
 CellChangeTimes->{{3.717855796047386*^9, 3.717855797502882*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"272ee073-15b9-4b5e-9b0d-873dc59de1bf"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.7178558095416393`*^9, 3.717855844253154*^9, 
  3.718365008634171*^9, 3.718365420379774*^9, 3.718562400487453*^9, 
  3.720024772203045*^9, 3.831203802355653*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"0c39affb-2f39-492e-a8a2-8a27e1326c9d"]
}, Open  ]],

Cell["\<\
In addition to entering standard Wolfram Language commands to be evaluated in \
the system, other forms of input allow Mathematica to interface with Wolfram \
| Alpha technology by prepending code input with equal signs : \
\>", "Text",
 CellChangeTimes->{{3.720024751056923*^9, 3.720024753696896*^9}, {
  3.720024790001886*^9, 3.72002481476188*^9}, {3.720024849485052*^9, 
  3.720024883111446*^9}},ExpressionUUID->"2e41a1c2-6a0b-407b-a736-\
477d5f7d1a29"],

Cell["\<\
A single equal sign followed by code, =code. The equal sign becomes an orange \
square equal sign and evaluation returns the result and Mathematica syntax.\
\>", "Item",
 CellChangeTimes->{{3.7200248954778357`*^9, 
  3.720024911469486*^9}},ExpressionUUID->"43798866-8917-468e-a728-\
b5b368d5f597"],

Cell["\<\
a double equal sign followed by code, ==code. : returns the Wolfram|Alpha \
results.\
\>", "Item",
 CellChangeTimes->{{3.7200248954778357`*^9, 
  3.720024931570538*^9}},ExpressionUUID->"adc15831-829f-4080-9bb6-\
b385e1d1fbb9"],

Cell[CellGroupData[{

Cell["\<\
control and an equal sign followed by code, Ctrl+=code : inserts a free-form \
input Mathematica expression that can be used further.\
\>", "Item",
 CellChangeTimes->{{3.7200248954778357`*^9, 
  3.720024951506386*^9}},ExpressionUUID->"3fa9b1fc-c73f-45e4-b82c-\
fc18b1feacba"],

Cell[CellGroupData[{

Cell["Wolfram Language", "WolframAlphaLong",
 CellChangeTimes->{{3.718365065688506*^9, 3.7183651231147127`*^9}, {
  3.718365153841427*^9, 3.718365180962597*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"acb82f59-2055-446a-b438-57c131615126"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Wolfram Language", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox["\"Wolfram Language\"", Identity], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             Cell[
             "Designed for the new generation of programmers, the Wolfram \
Language has a vast depth of built\[Hyphen]in algorithms and knowledge, all \
automatically accessible through its elegant unified symbolic language. \
Scalable for programs from tiny to huge, with immediate deployment locally \
and in the cloud, the Wolfram Language builds on clear principles \[LongDash] \
and 25+ years of development \[LongDash] to create what promises to be the \
world's most productive programming language."], 
             TextCell[
             "Designed for the new generation of programmers, the Wolfram \
Language has a vast depth of built\[Hyphen]in algorithms and knowledge, all \
automatically accessible through its elegant unified symbolic language. \
Scalable for programs from tiny to huge, with immediate deployment locally \
and in the cloud, the Wolfram Language builds on clear principles \[LongDash] \
and 25+ years of development \[LongDash] to create what promises to be the \
world's most productive programming language."]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "word" -> "", "template" -> 
        "Assuming the input is a phrase${separator}Use as ${desc} or ${desc} \
or ${desc} instead${separator}Use \"Wolfram\" as ${desc}", "count" -> "5", 
        "pulldown" -> "false", "type" -> "MultiClash", "default" -> 
        "{\"MC\", \"\"} -> {\"Miscellaneous\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Miscellaneous", "desc" -> "a phrase", "input" -> 
          "{\"MC\", \"\"} -> {{\"Miscellaneous\", \"a phrase\"}}", "word" -> 
          "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"MC\", \"\"} -> {\"ExamplePage\"}", "word" -> "the input"}, {}], 
        
        XMLElement[
        "value", {
         "name" -> "ProgrammingLanguage", "desc" -> "a programming language", 
          "input" -> "{\"MC\", \"\"} -> {\"ProgrammingLanguage\"}", "word" -> 
          "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "WordData", "desc" -> " referring to English words", 
          "input" -> "{\"MC\", \"\"} -> {\"WordData\"}", "word" -> 
          "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "GivenName", "desc" -> "a given name", "input" -> 
          "{\"MC\", \"\"} -> {\"GivenName\"}", "word" -> "Wolfram"}, {}]}]}]},
    Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.41200000000000003", "parsetiming" -> "0.233", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP190021a6g1b5c9gdced800004gf6eeced2211hdf", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa190121a6g1b5c9gdced800006401ei6egib9954b580838109077799597", "version" -> 
    "2.6", "inputstring" -> "Wolfram Language"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 16, 50.581711`8.45656849142216}, "Line" -> 2, 
    "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Wolfram Language"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1036., {145., 151.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203810694956*^9},ExpressionUUID->"f9b0eb6d-4222-49e5-9271-\
30e9f45c4083"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Type = in an input cell:", "Item",
 CellChangeTimes->{{3.718532043180109*^9, 3.7185320565865927`*^9}, {
  3.718534153860026*^9, 3.7185341568073997`*^9}, {3.7185342284362288`*^9, 
  3.718534242701015*^9}},ExpressionUUID->"09adf76a-987d-40d1-9ac8-\
e105be0f1afa"],

Cell["", "WolframAlphaShort",
 CellChangeTimes->{
  3.7185320577907867`*^9},ExpressionUUID->"bb6e1655-3b73-4887-9456-\
1199e34faeb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Type == in an input cell:", "Item",
 CellChangeTimes->{{3.7185320635057*^9, 3.718532063730674*^9}, {
  3.718534150789071*^9, 3.718534160689251*^9}, {3.718534245221352*^9, 
  3.718534250924789*^9}},ExpressionUUID->"1a18b631-8a27-4ee6-b9fb-\
e65d2ccf3513"],

Cell["", "WolframAlphaLong",
 CellChangeTimes->{
  3.7185320598603354`*^9},ExpressionUUID->"4a03dff9-161d-46d6-95f5-\
68754ff02a80"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Type Control+ = in an input cell:", "Item",
 CellChangeTimes->{{3.718534116105916*^9, 3.7185341315298843`*^9}, {
  3.718534253388563*^9, 
  3.718534259463677*^9}},ExpressionUUID->"103c3c10-95ee-4bdf-a773-\
a55310dc4fb1"],

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = "", Typeset`boxes$$ = "None", 
   Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
   Typeset`open$$ = {1}, Typeset`querystate$$ = {
   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
    0.416557`6.07121943043138, "Messages" -> {}}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{32., {8.5, 14.5}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{{3.718532066137385*^9, 3.718532089555407*^9}, 
   3.718534101846963*^9},ExpressionUUID->"7fbab6cd-a95e-43e8-8730-\
c7bd1df11092"]
}, Open  ]],

Cell["\<\
We can get information regarding DNA bases using Wolfram|Alpha :\
\>", "Text",
 CellChangeTimes->{{3.720024985052216*^9, 
  3.72002499215786*^9}},ExpressionUUID->"356788d9-0554-461e-8101-\
52328fb88564"],

Cell[CellGroupData[{

Cell["dna bases structure diagram", "WolframAlphaLong",
 CellChangeTimes->{{3.717856512742256*^9, 3.717856534564598*^9}, {
  3.718566700809659*^9, 3.7185667026870823`*^9}, {3.729973244833226*^9, 
  3.729973246414892*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"3973a80d-a0be-4d62-91f4-eeff513b2c44"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "dna bases structure diagram", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"deoxyribonucleic acid bases\"", 
                    $CellContext`TagBoxWrapper[
                    "EntityClass" -> {ChemicalData, "DNABases"}]], 
                    Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"structure diagram\""}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[EntityClass[\"Chemical\", \"DNABases\"], \
EntityProperty[\"Chemical\", \"ColorStructureDiagram\"], \
\"EntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"adenine\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "Adenine"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "Adenine", "SpokenName"]]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 ItemBox[
                  PaneBox[
                   GraphicsBox[{
                    CapForm["Round"], Null, {{
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    467.83000000000004`, 14.97}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    467.83000000000004`, -145.97}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    286.6, -165.5}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    200., -15.5}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {286.6, 
                    134.5}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {487.09, 
                    73.91}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {232.91, 
                    165.5}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.0978029735717737], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {340.3, 
                    165.5}]}}, {{{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{443.89160218936394`, 7.261238836503053}, {
                    420.52, -0.2649999999999997}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{420.52, -0.2649999999999997}, {
                    373.21, -15.5}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{482.5948358709076, -5.3885733812874665`}, {
                    497.01, -25.265}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{497.01, -25.265}, {
                    526.1899999999999, -65.5}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{475.6415280827566, 38.87506049832152}, {
                    477.46000000000004`, 44.44}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{477.46000000000004`, 44.44}, {
                    479.27847191724345`, 50.004939501678464`}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    LineBox[{{443.89160218936394`, -138.26123883650305`}, {
                    420.52, -130.735}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{420.52, -130.735}, {373.21, -115.5}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{{478.57133587090766`, -122.69342661871252`}, {
                    492.9865, -102.81700000000001`}}, {{
                    486.61833587090763`, -128.52942661871253`}, {
                    501.0335, -108.65299999999999`}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{492.9865, -102.81700000000001`}, {
                    522.1664999999999, -62.58200000000001}}, {{
                    501.0335, -108.65299999999999`}, {
                    530.2135, -68.41799999999999}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{308.3801364572351, -152.92631540397466`}, {
                    329.905, -140.5}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{329.905, -140.5}, {373.21, -115.5}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{{262.320492227436, -157.25522645925867`}, {
                    240.8, -144.83}}, {{
                    267.320492227436, -148.59522645925864`}, {
                    245.8, -136.17}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{240.8, -144.83}, {197.5, -119.83}}, {{
                    245.8, -136.17}, {202.5, -111.17}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{{219.27950777256405`, 1.4047735407413597`}, {
                    240.8, 13.830000000000002`}}, {{
                    224.27950777256405`, -7.255226459258644}, {245.8, 
                    5.169999999999999}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{240.8, 13.830000000000002`}, {284.1, 
                    38.83}}, {{245.8, 5.169999999999999}, {289.1, 
                    30.169999999999998`}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    LineBox[{{200., -40.6489937853606}, {200., -65.5}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{200., -65.5}, {200., -115.5}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    LineBox[{{286.6, 109.3510062146394}, {286.6, 84.5}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{286.6, 84.5}, {286.6, 34.5}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{264.82069506378826`, 147.07512484676036`}, {
                    259.755, 150.}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{259.755, 150.}, {254.68930493621173`, 
                    152.92487515323964`}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{308.3803189480004, 147.07336848022368`}, {
                    313.45000000000005`, 150.}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{313.45000000000005`, 150.}, {
                    318.51968105199967`, 152.92663151977632`}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{378.21, -15.5}, {378.21, -65.5}}, {{
                    368.21, -15.5}, {368.21, -65.5}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{378.21, -65.5}, {378.21, -115.5}}, {{
                    368.21, -65.5}, {368.21, -115.5}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{373.21, -15.5}, {329.905, 9.5}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{329.905, 9.5}, {286.6, 34.5}}]}}}, Null}, {
                    ImageSize -> 121, PlotRangeClipping -> False, 
                    ImagePadding -> 2, ImageSize -> 110.42609038951471`, 
                    PlotRange -> {{176.75116101689161`, 
                    535.9757}, {-193.68041088861622`, 186.63530816646218`}}}],
                    ImageSizeAction -> "ShrinkToFit", ImageSize -> {330.}], 
                  StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"guanine\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "Guanine"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "Guanine", "SpokenName"]]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 ItemBox[
                  PaneBox[
                   GraphicsBox[{
                    CapForm["Round"], Null, {{
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {104.61, 
                    41.32}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    33.22, -82.52000000000001}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], 
                    TraditionalForm], {-116.72, -66.64}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {-116.72, 
                    66.82000000000001}]}, {
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"O\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {33.22, 
                    165.01999999999998`}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    176.29, -82.52000000000001}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], 
                    TraditionalForm], {-142.19, -145.11}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    247.73999999999998`, -41.27}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    176.29999999999998`, -165.01999999999998`}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.08223706753582109], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {176.06, 
                    82.57}]}}, {{{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{104.61, 14.869999999999997`}, {104.61, 
                    0.08500000000000085}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{104.61, 0.08500000000000085}, {
                    104.61, -41.15}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{81.70542936602926, 54.54811944584134}, {
                    68.91499999999999, 61.935}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{68.91499999999999, 61.935}, {33.22, 
                    82.55}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{127.51660469450536`, 54.54459683202723}, {
                    140.335, 61.94499999999999}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{140.335, 61.94499999999999}, {
                    153.15339530549466`, 69.34540316797275}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{106.6785, -44.7195}, {
                    70.98349999999999, -65.40450000000001}}, {{
                    102.5415, -37.5805}, {
                    66.84649999999999, -58.26550000000001}}}], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{{70.98349999999999, -65.40450000000001}, {
                    58.17360965602482, -72.82774083947687}}, {{
                    66.84649999999999, -58.26550000000001}, {
                    54.03660965602482, -65.68874083947686}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{104.61, -41.15}, {140.45, -61.83500000000001}}], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{140.45, -61.83500000000001}, {
                    153.38162623936313`, -69.29846787838245}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{
                    10.322028761664527`, -69.28046023578004}, \
{-2.5549999999999997`, -61.83500000000001}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{-2.5549999999999997`, -61.83500000000001}, \
{-38.33, -41.15}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{-42.4535, -41.15}, {-42.4535, 
                    0.08500000000000085}}, {{-34.2065, -41.15}, {-34.2065, 
                    0.08500000000000085}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{-42.4535, 0.08500000000000085}, {-42.4535, 
                    41.32}}, {{-34.2065, 0.08500000000000085}, {-34.2065, 
                    41.32}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{-38.33, -41.15}, {-77.525, \
-53.894999999999996`}}], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-77.525, -53.894999999999996`}, \
{-91.56639894829127, -58.460828028982576`}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{-38.33, 41.32}, {-2.5549999999999997`, 
                    61.935}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{-2.5549999999999997`, 61.935}, {33.22, 
                    82.55}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{-38.33, 41.32}, {-77.525, 54.07000000000001}}], 
                    
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-77.525, 54.07000000000001}, {-91.5673427014057,
                     58.63792625189241}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{29.0965, 82.55}, {29.0965, 123.785}}, {{
                    37.3435, 82.55}, {37.3435, 123.785}}}], 
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    
                    LineBox[{{{29.0965, 123.785}, {29.0965, 
                    138.37499999999997`}}, {{37.3435, 123.785}, {37.3435, 
                    138.37499999999997`}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-132.2763788430206, -45.24837600151824}, \
{-140.98000000000002`, -33.28}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{-140.98000000000002`, -33.28}, {-165.24, 
                    0.08}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-124.88582928508768`, -91.79793576760233}, \
{-129.45499999999998`, -105.875}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{-129.45499999999998`, -105.875}, \
{-134.02417071491232`, -119.95206423239769`}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{-168.577, 2.5060000000000007`}, {-144.317, 
                    35.876000000000005`}}, {{-161.90300000000002`, \
-2.3460000000000005`}, {-137.64300000000003`, 31.024}}}], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{{-144.317, 
                    35.876000000000005`}, {-135.610329150939, 
                    47.85215854217502}}, {{-137.64300000000003`, 
                    31.024}, {-128.936329150939, 43.00015854217502}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{199.19660469450537`, -69.29540316797276}, {
                    212.015, -61.89500000000001}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{212.015, -61.89500000000001}, {
                    224.8333953054946, -54.49459683202725}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{176.2932060605825, -108.9699998056933}, {
                    176.295, -123.77}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    LineBox[{{176.295, -123.77}, {
                    176.29679393941748`, -138.5700001943067}}]}}}, Null}, {
                    ImageSize -> 144, PlotRangeClipping -> False, 
                    ImagePadding -> 2, ImageSize -> 131.32764000000003`, 
                    PlotRange -> {{-177.6294, 
                    267.53999999999996`}, {-195.01999999999998`, 
                    187.51999999999998`}}}], ImageSizeAction -> "ShrinkToFit",
                    ImageSize -> {330.}], StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"thymine\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "Thymine"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "Thymine", "SpokenName"]]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 ItemBox[
                  PaneBox[
                   GraphicsBox[{
                    CapForm["Round"], Null, {{
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"O\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    546.41, -69.}]}, {
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"O\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {200., -69.}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    373.21, -69.}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {286.6, 81.}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    373.21, -131.}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {232.91, 
                    112.00000000000001`}]}}, {{{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    
                    LineBox[{{{521.971861204623, -60.66363810890476}, {
                    500.60999999999996`, -48.33}}, {{
                    526.971861204623, -52.00363810890477}, {
                    505.60999999999996`, -39.67}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{500.60999999999996`, -48.33}, {
                    457.30999999999995`, -23.330000000000002`}}, {{
                    505.60999999999996`, -39.67}, {
                    462.30999999999995`, -14.669999999999998`}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    
                    LineBox[{{{219.43813879537694`, -52.00363810890477}, {
                    240.8, -39.67}}, {{
                    224.43813879537694`, -60.66363810890476}, {
                    245.8, -48.33}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{240.8, -39.67}, {
                    284.1, -14.669999999999998`}}, {{245.8, -48.33}, {
                    289.1, -23.330000000000002`}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{394.989507772564, -56.42522645925864}, {
                    416.51, -44.}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{416.51, -44.}, {
                    459.80999999999995`, -19.}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{351.4298635427649, -56.426315403974655`}, {
                    329.905, -44.}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{329.905, -44.}, {286.6, -19.}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    LineBox[{{373.21, -94.1489937853606}, {373.21, -100.}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{373.21, -100.}, {
                    373.21, -105.8510062146394}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{308.3801364572351, 93.57368459602536}, {329.905,
                     106.}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{329.905, 106.}, {373.21, 131.}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    LineBox[{{286.6, 55.85100621463939}, {286.6, 31.}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{286.6, 31.}, {286.6, -19.}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{264.82069506378826`, 93.57512484676035}, {
                    259.755, 96.5}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{259.755, 96.5}, {254.68930493621173`, 
                    99.42487515323964}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{459.80999999999995`, 81.}, {459.80999999999995`,
                     31.}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{459.80999999999995`, 31.}, {
                    459.80999999999995`, -19.}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{457.30999999999995`, 76.67}, {414.01, 
                    101.67}}, {{462.30999999999995`, 85.33}, {419.01, 
                    110.33}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{414.01, 101.67}, {370.71, 126.67}}, {{419.01, 
                    110.33}, {375.71, 135.32999999999998`}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{459.80999999999995`, 81.}, {503.10999999999996`,
                     106.}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{503.10999999999996`, 106.}, {546.41, 131.}}]}}},
                     Null}, {
                    ImageSize -> 129, PlotRangeClipping -> False, 
                    ImagePadding -> 2, ImageSize -> 117.27122833879571`, 
                    PlotRange -> {{176.53980793522697`, 
                    565.1781536518184}, {-159.18041088861622`, 138.86}}}], 
                   ImageSizeAction -> "ShrinkToFit", ImageSize -> {330.}], 
                  StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"cytosine\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "Cytosine"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "Cytosine", "SpokenName"]]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 ItemBox[
                  PaneBox[
                   GraphicsBox[{
                    CapForm["Round"], Null, {{
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {71.35, 
                    23.61}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], 
                    TraditionalForm], {-0.03, -100.21}]}, {
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"N\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {-0.03, 
                    141.46}]}, {
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"O\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    143.02, -100.21}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                    0.01, -182.71}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {-71.47, 
                    182.71}]}, {
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"H\"", FontSize -> Scaled[0.15828058046764876`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {71.42, 
                    182.71}]}}, {{{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{71.35, -2.8400000000000034`}, {
                    71.35, -17.615000000000002`}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{71.35, -17.615000000000002`}, {
                    71.35, -58.84}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{{46.38384227841242, 33.268102847910335`}, {
                    33.599, 40.650999999999996`}}, {{50.50584227841243, 
                    40.40610284791033}, {37.721, 47.789}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{33.599, 
                    40.650999999999996`}, {-2.0909999999999997`, 
                    61.260999999999996`}}, {{37.721, 47.789}, {2.031, 
                    68.399}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{71.35, -58.84}, {35.66, -79.525}}], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{35.66, -79.525}, {
                    22.85430365637879, -86.94685006634364}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{73.4185, -55.2565}, {109.2535, -75.9415}}, {{
                    69.2815, -62.423500000000004`}, {105.1165, -83.1085}}}], 
                    RGBColor[0.800498, 0.201504, 0.192061], 
                    
                    LineBox[{{{109.2535, -75.9415}, {
                    122.01204110264455`, -83.30609948955497}}, {{
                    105.1165, -83.1085}, {
                    117.87504110264454`, -90.47309948955497}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-22.925564616891762`, -86.96629882269558}, \
{-35.79, -79.525}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{-35.79, -79.525}, {-71.55, -58.84}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-0.017175759083106285`, -126.65999689109329`}, \
{-0.009999999999999998, -141.46}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{-0.009999999999999998, -141.46}, \
{-0.002824240916893716, -156.26000310890672`}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{-75.6725, -58.84}, {-75.6725, \
-17.615000000000002`}}, {{-67.4275, -58.84}, {-67.4275, \
-17.615000000000002`}}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    
                    LineBox[{{{-75.6725, -17.615000000000002`}, {-75.6725, 
                    23.61}}, {{-67.4275, -17.615000000000002`}, {-67.4275, 
                    23.61}}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{-71.55, 23.61}, {-35.79, 44.22}}], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{-35.79, 44.22}, {-0.03, 64.83}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.4, 0.4, 0.4], 
                    LineBox[{{-0.03, 64.83}, {-0.03, 103.14500000000001`}}], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-0.03, 103.14500000000001`}, {-0.03, 
                    115.01}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{-22.935803126446892`, 
                    154.68598514789943`}, {-35.75, 162.085}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{-35.75, 162.085}, {-48.56419687355311, 
                    169.4840148521006}}]}}, {{
                    AbsoluteThickness[0.55], 
                    RGBColor[0.291989, 0.437977, 0.888609], 
                    
                    LineBox[{{22.876604694505364`, 154.68459683202724`}, {
                    35.695, 162.085}}], 
                    RGBColor[
                    0.43333333333333335`, 0.4666666666666667, 
                    0.4666666666666667], 
                    
                    LineBox[{{35.695, 162.085}, {48.51339530549464, 
                    169.48540316797278`}}]}}}, Null}, {
                    ImageSize -> 90, PlotRangeClipping -> False, ImagePadding -> 
                    2, ImageSize -> 81.879912, 
                    PlotRange -> {{-96.22, 163.}, {-212.71, 205.21}}}], 
                   ImageSizeAction -> "ShrinkToFit", ImageSize -> {330.}], 
                  StripOnInput -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "structure diagram", "template" -> 
        "Assuming \"structure diagram\" is referring to chemical \
compounds${separator}Use as ${desc} instead", "count" -> "2", "pulldown" -> 
        "false", "default" -> 
        "{\"C\", \"structure diagram\"} -> {\"ChemicalPropertyClass\", \"dflt\
\"}"}, {
        XMLElement[
        "value", {
         "name" -> "ChemicalPropertyClass", "desc" -> 
          " referring to chemical compounds", "input" -> 
          "{\"C\", \"structure diagram\"} -> {\"ChemicalPropertyClass\"}"}, \
{}], 
        XMLElement[
        "value", {
         "name" -> "ChemicalProperty", "desc" -> 
          " referring to chemical compounds", "input" -> 
          "{\"C\", \"structure diagram\"} -> {\"ChemicalProperty\"}"}, \
{}]}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
ChemicalDataSourceInformationNotes.html", "text" -> "Chemical data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Chemical", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.156", "parsetiming" -> "0.354", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP15391i74i07g1b0e76g000003g925f3bbi4hde4c", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "40", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa15401i74i07g1b0e76g0000020a4i918e3fb7aca8360990543289014181", "version" -> 
    "2.6", "inputstring" -> "dna bases structure diagram"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 3.12447`7.247351347430893}, "Line" -> 3, 
    "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "dna bases structure diagram"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1043., {371., 376.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203823213543*^9},ExpressionUUID->"a4460f9d-820e-4960-a9cc-\
fce4f21a535b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Additional examples not in the manuscript", "Section",
 CellChangeTimes->{{3.722604783453895*^9, 
  3.722604791147781*^9}},ExpressionUUID->"d2094de9-c00e-4ffc-9474-\
3fac2b95c5be"],

Cell[CellGroupData[{

Cell["Genome Human", "WolframAlphaLong",
 CellChangeTimes->{{3.714407846706355*^9, 3.714407874342742*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"c255643c-34e1-4098-810b-25b793a730ec"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Genome Human", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"human\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {SpeciesData, "Species:HomoSapiens"}]], 
                    Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"genome information\""}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> 
     "GenomeSummary:SpeciesData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GenomeSequenceData"}], "\n    ", 
         XMLElement["microsource", {}, {"SpeciesData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"total base pairs\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox["3082436951", Identity]}, {
                    TagBox[
                    PaneBox[
                    "\"known genes\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox["3564", Identity]}, {
                    TagBox[
                    PaneBox[
                    "\"known RNA structures\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox["30870", Identity]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", 
                   "\"partial chromosome sequence coverage\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show details", "input" -> 
         "GenomeSummary:SpeciesData__Show details"}, {}]}], 
     XMLElement["definitions", {"count" -> "3"}, {
       XMLElement[
       "definition", {
        "word" -> "total base pairs", "desc" -> 
         "Number of base pairs counted in the latest total NCBI reference or \
representative sequencing."}, {}], 
       XMLElement[
       "definition", {
        "word" -> "known genes", "desc" -> 
         "The number of distinct genes found on the most complete NCBI \
genome."}, {}], 
       XMLElement[
       "definition", {
        "word" -> "known RNA structures", "desc" -> 
         "The number of noted RNA sequences not including messenger RNA \
sequences found on the most complete NCBI genome."}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "word" -> "", "template" -> 
        "Assuming \"Human\" is a species specification${separator}Use the \
input as ${desc} instead", "count" -> "2", "pulldown" -> "false", "type" -> 
        "MultiClash", "default" -> 
        "{\"MC\", \"\"} -> {\"Species\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Species", "desc" -> "a species specification", "input" -> 
          "{\"MC\", \"\"} -> {\"Species\"}", "word" -> "Human"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"MC\", \"\"} -> {\"ExamplePage\"}", "word" -> 
          "the input"}, {}]}]}], 
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
GenomeSequenceDataSourceInformationNotes.html", "text" -> 
        "Genome sequence data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
SpeciesDataSourceInformationNotes.html", "text" -> "Species data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "GenomeSequence,Species", "timedout" -> 
    "", "timedoutpods" -> "", "timing" -> "0.629", "parsetiming" -> "0.152", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP2650192818gi237ceg29000064d7bed2cd34af91", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "37", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2651192818gi237ceg2900006a1e861a33f0d4fa3116895797273570603", "version" -> 
    "2.6", "inputstring" -> "Genome Human"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 10.655491`7.780148453028639}, "Line" -> 4,
     "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Genome Human"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1043., {160., 166.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8312038306817427`*^9},ExpressionUUID->"b8c80939-1723-438e-bf3a-\
bbf4934de99a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mouse Genome", "WolframAlphaLong",
 CellChangeTimes->{{3.7178671124689198`*^9, 3.717867137606914*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"dcdcf326-1f78-4189-82a9-92363f23812a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Mouse Genome", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "word" -> "", "template" -> 
        "Assuming the input is a general topic${separator}Use \"Mouse\" as \
${desc} instead", "count" -> "2", "pulldown" -> "false", "type" -> 
        "MultiClash", "default" -> 
        "{\"MC\", \"\"} -> {\"ExamplePage\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"MC\", \"\"} -> {\"ExamplePage\"}", "word" -> "the input"}, {}], 
        
        XMLElement[
        "value", {
         "name" -> "Species", "desc" -> "a species specification", "input" -> 
          "{\"MC\", \"\"} -> {\"Species\"}", "word" -> "Mouse"}, {}]}]}], 
    XMLElement[
    "examplepage", {
     "category" -> "MouseGenome", "url" -> 
      "https://www4d.wolframalpha.com/examples/MouseGenome-content.html"}, \
{}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.28600000000000003", "parsetiming" -> "0.", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP60021d669cd743ih14c00004ha793ed99754ae3", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "44", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "Mouse Genome"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 15.713041`7.948835228779057}, "Line" -> 5,
     "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Mouse Genome"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1043., {197., 202.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203835722952*^9},ExpressionUUID->"ce7057cb-4c48-44b6-92e0-\
2f737b48b19d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Uracil", "WolframAlphaLong",
 CellChangeTimes->{{3.717782746969816*^9, 3.7177828105807323`*^9}, {
  3.717867149230013*^9, 3.717867164393306*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"adc9b8c8-1211-4085-857c-d17da5a680c6"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Uracil", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Entity[\"Chemical\", \"Uracil\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"uracil\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {ChemicalData, "Uracil"}, 
                 "SRString" :> $CellContext`GeneralData[
                  ChemicalData, "Uracil", "SpokenName"]]], Identity], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Chemical names and formulas", "scanner" -> "Data", 
     "id" -> "ChemicalNamesFormulas:ChemicalData", "position" -> "200", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"formula\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    SubscriptBox["\"C\"", "4"], 
                    SubscriptBox["\"H\"", "4"], 
                    SubscriptBox["\"N\"", "2"], 
                    SubscriptBox["\"O\"", "2"]}, "RowDefault"], 
                  ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                  False]}, {
                 TagBox[
                  PaneBox[
                  "\"name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"uracil\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                  "\"IUPAC name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"1H-pyrimidine-2,4-dione\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ChemicalNamesFormulas:ChemicalData__More"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Structure diagram", "scanner" -> "Data", "id" -> 
     "StructureDiagramPod:ChemicalData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Chemical\", \"Uracil\"][EntityProperty[\"Chemical\", \
\"ColorStructureDiagram\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[{
               CapForm["Round"], Null, {{
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {200., -69.}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  546.41, -69.}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"N\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  373.21, -69.}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"N\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {286.6, 81.}]}, {
                 RGBColor[
                 0.43333333333333335`, 0.4666666666666667, 
                  0.4666666666666667], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"H\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  373.21, -131.}]}, {
                 RGBColor[
                 0.43333333333333335`, 0.4666666666666667, 
                  0.4666666666666667], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"H\"", FontSize -> Scaled[0.09209420036770553], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {232.91, 
                  112.00000000000001`}]}}, {{{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{{219.43813879537694`, -52.00363810890477}, {
                   240.8, -39.67}}, {{
                   224.43813879537694`, -60.66363810890476}, {
                   245.8, -48.33}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{240.8, -39.67}, {
                   284.1, -14.669999999999998`}}, {{245.8, -48.33}, {
                   289.1, -23.330000000000002`}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{{521.971861204623, -60.66363810890476}, {
                   500.60999999999996`, -48.33}}, {{
                   526.971861204623, -52.00363810890477}, {
                   505.60999999999996`, -39.67}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{500.60999999999996`, -48.33}, {
                   457.30999999999995`, -23.330000000000002`}}, {{
                   505.60999999999996`, -39.67}, {
                   462.30999999999995`, -14.669999999999998`}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{351.4298635427649, -56.426315403974655`}, {
                   329.905, -44.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{329.905, -44.}, {286.6, -19.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{394.989507772564, -56.42522645925864}, {
                   416.51, -44.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{416.51, -44.}, {459.80999999999995`, -19.}}]}}, {{
                 
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  LineBox[{{373.21, -94.1489937853606}, {373.21, -100.}}], 
                  RGBColor[
                  0.43333333333333335`, 0.4666666666666667, 
                   0.4666666666666667], 
                  
                  LineBox[{{373.21, -100.}, {
                   373.21, -105.8510062146394}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  LineBox[{{286.6, 55.85100621463939}, {286.6, 31.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{286.6, 31.}, {286.6, -19.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{308.3801364572351, 93.57368459602536}, {329.905, 
                   106.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{329.905, 106.}, {373.21, 131.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{264.82069506378826`, 93.57512484676035}, {259.755,
                    96.5}}], 
                  RGBColor[
                  0.43333333333333335`, 0.4666666666666667, 
                   0.4666666666666667], 
                  
                  LineBox[{{259.755, 96.5}, {254.68930493621173`, 
                   99.42487515323964}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{459.80999999999995`, -19.}, {459.80999999999995`, 
                   31.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{459.80999999999995`, 31.}, {459.80999999999995`, 
                   81.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{375.71, 135.32999999999998`}, {419.01, 
                   110.33}}, {{370.71, 126.67}, {414.01, 101.67}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{419.01, 110.33}, {462.30999999999995`, 
                   85.33}}, {{414.01, 101.67}, {457.30999999999995`, 
                   76.67}}}]}}}, Null}, {
              ImageSize -> 129, PlotRangeClipping -> False, ImagePadding -> 2,
                ImageSize -> 117.27122833879571`, 
               PlotRange -> {{176.53980793522697`, 
                565.1781536518184}, {-159.18041088861622`, 138.86}}}], 
             ImageSizeAction -> "ShrinkToFit", ImageSize -> {440.}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "4"}, {
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Skeletal structure", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Skeletal structure", "input" -> 
           "StructureDiagramPod:ChemicalData__Skeletal structure"}, {}], 
         XMLElement[
         "state", {
          "name" -> "All atoms", "input" -> 
           "StructureDiagramPod:ChemicalData__All atoms"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Lewis structure", "input" -> 
           "StructureDiagramPod:ChemicalData__Lewis structure"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Show bond information", "input" -> 
         "StructureDiagramPod:ChemicalData__Show bond information"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show graph properties", "input" -> 
         "StructureDiagramPod:ChemicalData__Show graph properties"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step", "input" -> 
         "StructureDiagramPod:ChemicalData__Step-by-step", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "3D structure", "scanner" -> "Data", "id" -> 
     "3DStructure:ChemicalData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[
              RasterBox[CompressedData["
1:eJztvXd0VGX3/v2s9/2t9bxr/f7wq8/XBxWR0HsNECCUoQYIHUINMPTee83Q
QXrvhCIgXUS6EEARBAUUFURgLKiggiIi0rLf/bnP3GGMARsyCZy91jFtGOeU
61zXvvbe98nUqnvddv/Pv/71r97/n/6nbsv+5Xr1ajmw3v/oDzHdends361t
m6rd+rRt37ZX8Vb/r/7Sr9uHuv2ff7nhhhtuuOGGG497lH3iibCop57y1v7f
/8Q3ePrphCb/fTqh+TP/jW+W7mlf03T/8YT687nhRlqJSk894a3y5JMJdf73
P9Lov09Ls2f+K62efUbaP/esdEr/nHTVrdvzuqV/zt8x/bO+UH9eN9xIrRGl
vFRZsVT1qSfF4qnFM+mkjeJJsaM4Si+9MzwvA1/IIEMyviBxYWwZZdALGfyd
06fzhPrzu+FGagqDp6ee9EcpnlTrSWPFU0vFU0flph6KpQGKI5/iZ0zmMHkx
SyaZlDWzTNZtSmCbqL8bmCG9L9T74YYbqSGiTN70pCimpJbiqWm6/0pb5Sb0
HVganimjTFDMTM+WReZmzyaLcmaXpTlzyLJczhavPy/MkU3mZM8qIzNl9IV6
f9xwI5QBnio9+aS/SgBPsYon8qaeyk3ou7HKS2BpgWIG/KzOk1M25M0tr+bL
I68Fts26bdTfrcqdU5YovkZmzOgJ9X654UaoIurJJ31VAnqvSRCehmmuBDfN
Vu5ZkhMs5ZJNiptt+fPK6wXyyd6C+eWNQgXkTd34ys879fev6GtWKLZCvV9u
uBGKwCuv+tRTSX4EXgS509AAnuYqnpYrN61XnGxVLO0umM9g6O3wgvJukUJy
vEhhea+osx3T7w/r7/cVym94a062LL5Q758bbjzsqPTkE75aATx5n0lnPPJB
GTPIeMXTnACe0HTbFU9g5VDhggY7HxYLl48jisrZ4sXkXGA7U7yonCpWxODs
gOLuFcVVqPfPDTcedlR/6smEhgG/HM3XN8PzMjpTmMzMltXkTusDeNqvGDkS
XkjeLxoupxU7n5UsLt+WLS2Xy5eV78uVkW9Ll5SvI4vL+RIRiq+ickJfhxac
kMXNq9x4fCJCdV/dp/9XmmkO1Sbg8ZFD4Yvj663R/GlbgJ/A0weKkzPKTecj
S8glxdOPDevLreZN5XaDuvJLzWi5WiZSLpcqIRcUb+DqqGrDFbly+EK9n264
8bAi8oknPGg++iOoQfV94XlTe0Lz4THg6yUo15A7nbB4Khkh3ykn3YiuKtLa
KzIiTqR7F0mMbSx3KpaT62VLyRX9+wXlrI8jisjWvHniQ72fbrjxsKKCYgqO
avfcs4ajBmd8QSZlcThqvXLUzgJ55UDhAiY/Oq34+EJ13bfKQz8qbm7UqSnS
oZ3IzGki40aLtGstor+7rTrwhv79B33dZyWKqWbM72LKjccmohRT9El0Sv+s
6TeiR2JGtizGl7AcdUT120nwpBj5TrXdFY/iSXOoW7VriLSIFenRRaRPT5HG
DUSqRYkophI9peWavvYr5bRDhQsmhHo/3XDjYUVZxVRr1X1d0ju9EngTeOcv
q+4jj8Izf79YETmrfPMN/BNVUe5UqSRStbKI5lLSpqVIx/YiXTuJ1K8ton+X
CmUNruCqb1T/HSpU0OUpNx6roP+o+/Ppje6jh49eibVG9+UzvvnJ4sXk6zKa
I8XUldtdOkoiOPI2E+ndQ2TUcJGhgxyu0r9L5QoiFT0iymM3FVPfKqZ2FMjj
C/U+uuHGw4w2zz6T0D3QMzFRc6mFObIb/5za7uHwQvKJ4uJyeY9ca9tKEsHQ
oP4iPbuJDBssMm2yg6u+vRztV6m8YqqcwdStAKaW58jhCfU+uuHGw4zYdE97
wRTzGsafUExtCGAK//y06r7LFcrJDcVM4vgxDobgqF7dHY7ie/Kq2tUdPAUw
dUO57XyJYv5Q758bboQibF2K2Q20H56fxRS9EhcUHz/VqCaJeOctmzucxNak
oZNX1Yx2cizwVMEjiZpPXS1dUt4sUMAb6n1zw41QRKt06bz0I6H9wBS13l2a
T1GX+qhYEfmiZIR8r1rutmq7RDwKvAhyp6gKjt6rXN75WuFuLvWly1FuPObR
4/nnEsZnzmRmo1bmzmn6Zd8qXMDUev3Fi8lFzY3ok7jpKW1wYzYwxFbRk4Sn
O/r3y5ElZFs+15tww40hL2RIYE6KuQ76ZqlP0V9EvZc+PvqOqDvdVh5C3yVh
q7zjn/+if/u5Tk25oq9zPXQ33DARNjpTWMJ81X/MFm7Jn8f0UbxftLCcLV7U
1HAtrqg/3VZOul22tNF63+vvec2dmLryc+lIOV2siKv93HAjED0zpDdz8PRS
UPu1uKLfj/4karmXFEM/lCppMAaXMS91sli43NB867bmW5+XKObOebjhRiA6
PfesHw3IfMdJzadOVqpgPMDDhQuaWY9TqgWZlTqjHLVdX0Pv7bo8uQzurip3
JSpXfak52NiMGcNCvS9uuJEaouUzz8SPyZzJeH+fFCsit+vX0VyplJk3ZHZj
Xe7c3pnZMnt5bfj//b8e5oJfypXDzP1eUO6iZ+mC8tmy3Dm8od0TN9xIHdH4
6ad9rO3ymtFzReR65Qpyp2pl1X1Gz4Ulfz2zwXjwB5XH0HzSvq18F1lCMel6
f264QdR66ilvnwyq5/I6eo7ZDmq76LkpKei5DqoVp2XNIvsK5pdzikF6Ao33
F+56f264QRT497/DuifXc21bqZ4rJqtS0HOtVSuOzhxm5q3w3e/UqiHXy0Si
G13vzw03AtH1+bt6Dq+P+cPvIovL7oJ5f8M9TVUr0teO9/cR3l9gJuQL1/tz
w42k6Jz+ud/ouR+Vr94NL/QbTFmtuNZ6f9SE0YolXO/PDTdstAzoOeP9RRSV
27Wqyy+e0mYePvlrWSsGrTg3f15ZUbmSLPG2kDcnvCjT2raRLpUqeUPw8d1w
I9VFk3RPe4P13C+VK0hitSjj69VSDCV/fcWCBaRGjRrSunVr6dmzpyxfvlz6
9esnzZo1c30KN9zQqKZ6rmumMJmtum9NlShZ2bqlbBo9WoZ37iRRUVFhyV9f
pEgRf5UqVcTr9UrXrl1l2bJlMmDAAGnXrp2LKTfcCERERITUrVsXXEjfvn0N
9/Tq1UtiYmK8yV9bsGDB+PLly0tsbKzB1IsvvihDhgyRHj16uD7Fn4iIsmXD
SpQu7StdrlxCpWrV/DXr1xfd/HUaNUqoFRPjC/Xnc+PvRbFixX6l51566SWj
55SLfsM9+fLl85UuXVoaN24snTt3Fp/PJ5MnTzYYDMVnT2thsVSyTBnxVKok
UdWrS4169aRuo0bSoFkzadKypTRr00ZaduggjVu08IX687rx1yJYz3Xr1u2+
ei5btmzekiVLSoMGDaSDnveBAwfKrFmzDKZS0opu3A3wVLJ0aT94Kq1cr/wk
1VUf1NX7U2M99i07dpT23btL5z59pHv//tJDj23PQYPc2l8aDKvnmul9Ej03
fvx4GTp0qHTX85v8tenSpQtDK9apU0fatm1rtCK81rt3b/SjNwQfP01EMJ5K
eTxSOTpaaut9qVGLFoaTOuvx66PHfNDIkRKnx3/ExIlm4/uBI0a4ayemsVA9
5w3Wc3FxcTJ16lSjA3PkyBGW/PVoxeqqWdCK5FErV66U/npfbd68uetT3CNU
7yUYfipXzuCpTsOGRue11XtYT+WjwaNGychJk+RF5fypCxbIjPh4mblkicxY
vFgmzJ4tw8aNc49tGorkeg58zJkzR9q3by+FChXyZcmSJT5nzpwJefPmFcWf
FChQQMLDwwUc1qxZ03garvd374gsW9YDnspUqGD0HvwEntB5vYcMkbhx42T8
jBkybeFCmaucv3jNGlm2YYO89Morsly3+LVrDcZUD4aFel/c+OORXM+N0/MM
frJnzy65c+dOwpJizOCpaNGiAl/x79jKli1r/n2o9yM1RokyZRLKVqwolZXb
yZ/Qe227dDF48r34okxQbpqlnLRo9WpZsWmTrNm2TTbu3i2bEhJk0549smHX
Llnx6qsyed48956VhgKfAj3XtGlTqab30qxZs6L7kvCkOZcULlxY9HUGS8WL
Fxe4rVSpUlKGezC6RnkrMjLSn9HtU0oK8qhS6D38PcVTvSZNxKtaoIfy+rCx
Y43Wm7V0qeGil7dsMTja88478vapU7L/vfdkt36/6+23ZfO+fbLqtdfce1Ya
CjBVQbVJnjx5DJ6C+Qk8wU1gqUSJEgZH8FI5vVb4NxX1HlypUqWkTX/v19d7
Qr1PqSEiIiM95atUkerK4fjlTVu1kk69esnAkSNl7PTpRtMtDuDp1b17DZ7O
fv21XPnpJ/ns0iU5du6cvHnihCS8+668opxVq1atsFDvkxt/LDRXigdLbJpf
Sa5cuSR//vyGmyyW4CFwBG6ioqIMn0Vrvg2/BW/8Dm9etaIn1PsV6gBTVTTn
xJNo2KyZ8ct7DRokwydMkCnz58vCVatk5ebNBi87Dx2Sgx9+KNd++UXuiMiP
N27I6W++kXfOnJGDH30krx8+LGOnTAkL9T658fuBVgvGE/xkfQhyJXjJ4/EY
LFWtWtXgRu+XJn+qV6+e1K9fn54Ls/Ezv+fvirnHurZi/XO8ifqqqWNbtza+
xMARI2ScctRs1XzLNm40uRP67g3VekfPnpUfrl2Tm4qpKzdvyseKqRNffGF+
/8b770v/uLiwUO+XG78fiqUEq/fgJ/BE3kTOBDdRu4KXwFLt2rUNbvAIG6mW
aaL5AX1KwRu/4+/0OykGH8u8GjwVL1XKTy2qmh6zRtR0NY/q0qcPvrhMmjtX
Fr78sqzbscPovXdPn5ZTX30l51TvXVGeuqGY+v7OHTmjP5+6eFHe++wz2Xf8
+GN9j0orkSVLFk8wntB78BN4wncgX4Kb8MzBCFihjgV2WlCvbNlSWmmOQK3K
bvyOv4Et8Bep+ifU+/kwg94j3aSM3ovoO6LXiL4Icqieqvuo5U5btEiWrFsn
W994w2Dpx59/FiIxsMFTPyQmiv+HH+ST774zXKXaz639poGAo4L9CPIn9B78
ZPGEjgMb8JLFEjhqo9cKNSxqWh01T7AbP9OPC7bwEZXbHguusr18JfReVK5y
ZamtORTc1GvwYBk1ebLxI+YsWyYj9fuZ+j26b4ti6rPvv5efVOclKobusCme
flaOuqD51KcBTMFTGxMSPKHeRzfuH+RRyf09/AjlFaP3LJ7Il8ATvUv0BFos
gR96mehhop+Cr2z0DHbp0sVgC+zBV6He1386gntjK+pxwzNvo8egX1yc8ffA
0kubNsmrCQmydMMG0yOxXDGFd/72yZNyRnHzlXIVvPSlfr2g+o/vzyneTl24
IEc++cTVfWkg0H05c+b8lV9OzQk/gvyJXnXLT+AJ3qEmbLFE79JgvQfTy0R/
4CDVNdSL6f3jb2CL1/Lv9P28od7ffyqSevnKlpUqeszoL++g9xh696jnzl+x
wtSWXtu/X/YeOyYfnD8vL+vPYGvD66/LrsOH5cAHH8i7Z88ajUf+BDeBMzwK
/b1f8ecJ9X668fuhmPJRj8KTCNZ8+Hv44eRPDVW/3AtP9KTTbzt//nyZNm2a
6REEX/yeWRGwBa7QgYpNX6j395+I5F4E/eX0lQ8dO9b4EPRG0Bex7cAB49uB
l++Vg4g1W7bI2u3bzd/2Kdao8x7z+w3mPtIc68Mvv8RH92/ctcsX6v1044+F
6r4EW4PC54OjqD9ZzYcfQT6E3kuOJzAzVq8b8PSG5gS7du0yfX/MUjGjCGfR
Nwiu0IGKUb9i1xfqfX6QkaIXMWCA6Teidy9+3TpZt3OnbH/rLVNfwsO7evOm
2AA/6EH6j/DS6Zs4pLiiHsX25gcf+BesWuUL9X668cdD86gEq/ksR9ETgWeO
5sPfa968ucmfyI0sntB3YIYZ38WLF0uC5gRv6XWzUfODefPmyfDhw2XYsGHm
NWCvU6dOBqu8P7VjzdUS6IUP9f7/1UjuRdQJeBH0742aMsXxH1TXmbqT6rp3
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
BH4BE+i7gydPmnoUvRSq8/z4GXjovA5eI4+Ck8APPGV1Ic+pA1/4GaxfCHfx
PJPN+t5z1h02dUf8omrdPpWozqdNDT543oDzR1+mmfWuNMHBhXLX83kaxN/F
U9MAnjoFZg76BeZ3hhs8mrmDqGlmZoH3KVR1VmCG52DSDE/dITdM7aSNnuuJ
rztexKJjqmNWOj2dXAOxL4o/qvNnvlCfp4cd2Ur0STCYippqanb0lsPt+H3k
UrX6fiuNfNdNv9PQ1SJzDzh4wiMdsl7vT5ud49h+nh7fANd7p5njKTX6XPGG
ev8eRvQcPNg3ae7chMVr1sga5SM8C3hGucu/YvNmX9yUKWE5ChQI69y7t2/S
vHkJ1KbQc/b53nAcrwdDrMuGLoTvwBc6cU9AN3aZfCnQU/ZjYN7govFwOU94
SaxRQG2SeyL+AT1leAloQgdPtU1elEnxlFW1HtxksFRupNF14IfeziI1401e
XbT2UlN3KlbnJdOXRh3XzvDEjtNzrud75hsiq0/rdaE5VKeFDj+BpyZjxF+2
xcGwUJ+bUETGHA3DHJ6aYo6l5SmLKfzR+kOvS1PNjdrpseq+SDWe5k1t9Xh2
UBx1WeTwk5mJmuUcTzyKRqMebY66V9Rq2DCsRfv2Yfd7DesDqG70MQMCDtGO
tucW7toOdymO3gjkXeBrx5HT0nikU0+38wZOP/QVh7t+M4t6xOi00k23S+bw
ds5MnOKJ3AmvAT2Xp9wI0yNdOHqO8R3AIHN1aMlIzdfoiWCjrgJP4UdQx2XG
tMsCR6cs19xp4h4nl+b8k0s3GCH+iIbb7nsMHvXIFtHLm6/iBMNTjo/+upkP
5vxwL6R2G+Nzarnkoug67xQHP2hmuMnMcQT0M/eo6O7fe0K9X2khlLs8E2bP
jkc/4iGu3rLF+BNwl12/Go9w8bbz0mK8HvcJevyp/41w5g2YRU2alWMW1c7K
dXNm5aiXpM9V18FTeHvT92BmSyuMNdqOc540v6P4Q6OAReYOmLFjjRM0H7Pi
cFVM3CXpv9LxIpZo7jTiNUfrce7Jo+sNfbxyp/tFrjJD4x2PYnWS72dyUdXu
nK/6w25rPpooTcY6us7gaqpzHMEWeg88NR0n/mrdL3pDvT9pLeCuoWPH+ibP
m+dfGNTjbn2NLlMumzVy6IsGU/Rvgq+mo+2sXOJvZuWq97pgeh1YUyRT4bam
tg+enHm4OUbXUbNNmt/Rc04ezUw4PkhUp1Omlst1QI+E0S6d35GXPxZZfFxk
wJq72iR2gvirdr/oC/VxTG2Rp9xoHxoa7ucYm/qUamjOD/0TMcr7cFWTcQFc
TXSwxdZsoun3eyxz0gcdPNt79JQpPupSzDYuXLfTnAPTE63nof7QO6oDE6W5
3t/gLmqGfDXaMMBdrKNAn4zx9wq2Ml6E6Y+uON5oPXxC088Zu0voAbDzO/TZ
cM7J06r3/NJoyuq9vgpwn9/gq9GwU6aOa2fizIxp1HxvqI9bao0CFSZ4itdb
5XCVHmt6BTm+5KZ1h9yUesNuSoPhdwxndZkrMvY1o/Wkvur86r0vPJY51D8V
zPQovnyDJ67x4+9V6+6/27OpfESfcgPfHYkdk+hga4KDr9gxTi8zXqD19/DJ
WUuEeW08B6c/erfRd/CSnd+xPde1B1xRXP6k2zVnzq7/jwHu+8rgrmbfs0aj
NB5D7pQQFupjlRYivMYCX7G6K/2sNYGHVKrpNqdXSTHm5FhOD+28A6pB9DyS
b9EPGOrP/ahGgcDMAevMcf3bnk08QPIpw10j7iTpQrBVMGp8oJ+zl6k3Fawy
TRwd8oqDJ82V8DOc+aDzZn6H94sd9bN4x9+UNpNum/djlqF+QFvClZx/Zx71
9CPVI/OwAo8oV5khxmOlH4X7JTlWXT2PnVVLz94v0kFz1AZ6X6RHJaLWqrBQ
f+ZHPfJVmuDzePfHO/NygXkBvZ/hA9YZrNwVd0fqD/pGMod3cDRfqUEmh7rn
vIGeT/yNOgOvm/7otlOcGbuhL4sMZB5osqNF6PWsP+yO/n9+MlrQ433jseiN
eNBh1k3Sc0LdD0+V+yT3SHpSWk1MlPFbRHotdvpl6wy6IaWbbPOG+jM/LlEg
ao7piTbzoknzPN8anVY8Zr0zE1eij6n74vGRQ9HThIdXsf1x4+tGB+YN6I+m
Z8874bZZK2jxYZEl7+o98w2RPksdv5c5Hs5z/aG39d9ckUodP3R56i8EfbbU
Muh5QQdy/qjhw0lNRiXKyI0iY1515hGZ8y3X8m1fqD/z4xj0RJdqtiser6FK
lzOmHwLNZziqwjhT+6X2ZHpk2hwxnp6TJ18yfgZ1XPACJ/VYJDJ9r2LqqGLq
TZEh60RaTHJ8KXo4nfvnL2DSzZ//QoQVbBnP2rP4RfQCUqc3/RV6b0MLDFst
MmtvwKcYJqyN4eqBEAbPh4iot9bHTEb2oLV6mNuObMRM3JtGv+PhVe/9neqN
n5Sf7kijkU6dpM00p64/YafI3IMiw18R6bb4bl80uDKzcYrBqt3OuTz1FyJD
vlgvPYH0r+AXeVrsM/kptft6Q+7IgOWOT0FtnRp/rX7fuj5FKgjVfH5nznSU
6X+lR4J8GJ8JjsInN37E6F+k3dQ70n6GM6fdM155aa3IuG0i0/aJDNbvOy9w
5nioP1IzAXvMmz5KM9wPM9JlruRlrp77Hb1LaAfqgcHe34KDTm+y4/394GIq
FUSWIh3j0ex2vR56yk3PmebDaMNafb+R+kN+ke5zb8vQl1VvKHZ8Gxwszdiv
+dRRZwZq0h6RToqptrPvzhswbxoTd0sqtD/hCfV+ptXIGvD+Chvvb7upZ1jv
j3U552oe23FWwPvTe19EQ9f7C3VkLNDCy3NWeA4Zni25FOsE402g+2r3/04a
+m6ZtR9ZTyT+XZFF7zhYoocv/rgz8z5+l9Mb23b23V5Oav71ht7wh9eK94R6
P9NqZCnaxe94fzOTeX8/mTrIi1ucWUXWIagz+IaeuwRvqD+zG//6l/JUgrNm
zwLTgwSmuB/iD9bu/71ZP66X5k4zNR+er1pj9gFnxnS63iMnJyhnKZ4Gr9f7
5YK7PUjNJzs+Re1+V1zd9zeCZ7fxvCl61+nJZG2yYO9vlOaxeOp4rXU1xyrX
+rDrU6SCyBLR3WM8P+pSqv3oN7OYwmOKGXZbminn9FzkrIMweI0zw9P7JZHu
eo/sslg5Sv/Wds7dGR7yKdUj/gqtj3hCvX9pOYz3V7JfwPtbbXqWqwS8v5i4
RInTczHnTcenMN5f109cTKWSyF3Gl4D2w7N11t87ltTDSV8gep0+mLYzRNop
F7Wf48xttA2sx90maP7d6r6a/X5wz+/fDNYOMbXDgPdXNgXvb9EhkdixTt9f
LdXqof7MbtyNgpWnJjjrjGw19UVnhucb09PEPRF9ETve6Yk2MzzTnNkNu1k8
NR3P7PYttyb1AMLx/nqaGXvH+3vdWf+l90WpPeim0eSL3w7y/vpfEdYSCfXn
dsMJnoFZuPr8BPr8TE7V4YRT79XzVG/oLdMPTY5kZw3wzKlHsfF9ktfnezzn
TP+poG+M2RtmrEoFvL/ooL4/alSdZlvv76pENEybz5d6lKNozSUJ9CaVM2tc
nnbW6R7wk+nhozcCXDUNzPG0Y/2rSU4tP8Z3S6r1vOB6Eg84shTpbHqUCuL9
NdrsrO3W43Pj/fGMxgnbRPou1fMx/LI0HnBSomLjvaH+zG78NsKjF3gim2z1
kxMzC2WeKdHjfGA+60epO+S2NFeNF39EpP9yR3fQx1mh3VE3h3rAkblIpwTW
1qTPBe+vUqvXpXaXfdK0917pNmytLHr5dVm7dq15/h3PRmnWrJl7DlJx5CjZ
35szsr/pjWZWzswbmLXOf5Fm4xJNzXHYGqc+gpcR3fOcmyM/4Miav3p8wYga
UqJsbfPscJ4rxzMbeV4jz5KMj4+XnTt3mucU83wUnvsd6s/sxr0jXZZoj32G
ALqDNZeYoWLWMXZsoumLHrPZ8Z3ojUaThPozP2qRI0cOb5EiRSQyMlKqVauW
9Aw8+/zwuXPnmucK8awhMMZzW0P9md24f9DHSX2EejC96madZs2FmcsfvNJ5
vgQ+O/UROIzZklB/5kcpMmTI4A0PD5cSJUpIVFSUxMTEmOef8lxJnis8ffp0
2bt3r3kGisVUjjT0zL/HMbIV7+mnPlK83mozo2jW7+t/xcwb8DxNepboraU3
mnn6iLqrvKH+zI9a8Czx4sWLS6VKlaRu3brmWeD22cc8p2vbtm3m2eE8Bxmc
8fzhUH9mN+4dWRVT1EfMvIH3Dae3ludzDEuUjjNFlh8z65w7Ncd+V6REzEZf
qD/zoxYFCxb0FytWTMqXLy+1a9eW2NhYadeuncGPz+eTdevWyYIFC2TAgAFG
D/Js8FB/ZjfuHfSuUx9hjT/6lnhWOnV8vD+eLwamesc7a53hubuz8g8+8ufP
Hw+mPB6P1KxZU5o0aSJt2rQxOo9nIPM88Y0bNyZ5f8pj7jlIxcHzCfByqTmy
RoUzw/ONmeGhD3DJOyKDVpp1742fXqXLKbdG9YAjT5488UWLFpUyZcqk6P0t
WbJEdu/eneT9tW3b1sVUKo6M+WK9OYyfPtP0LZkZHuOnX5cW4xNl7psiw9c7
6yLAXdV7fer6Tg84gr2/qlWrSoMGDX7l/c2bN0/2798vw4YNMxgDa6H+zG7c
O/6Tsazjp1eebJ7j58zwnDfr9zQdnSijX3GeKdtsnLPOLV77v/7977BQf+5H
KdKnT+8J9v7q16+f5P3hU0ybNs1gatSoUa73l0bC8dPHmZlFs34Ps1UDrkqj
EYlmHTK4inVf8CmY7Xb99Acf1vurWLFiit7fjh07ZPLkya73l0YC74+1yngO
gVm/p9s546fTr959vsjSd50ZbrsmakTMGm+oP/OjFnh/ERER9/T+1q9fL4sW
LTLeHz6F6/2l7sharFtC7jJxZl0lnudhntnW77LReh1miKx4X6T7gsD6PYq1
yMbbfKH+zI9a/J73t2rVKtm0aZMMHjxYevXqhTZ0fYpUHFnC8dMHS5Eai8xz
clhTiTWj6w6+La0miaxUTPVdFuil1TyrXOtD7vl8wGG9v9KlSxvvr1GjRkne
H14f3p/tUeJn5TDXf03F4fjpA83aSqxVxrM9nDWxbpr+9GVHRYasdtbJrDv4
plTt+rF7Ph9w3M/7I6fC+3vllVeMR9G0aVPTc1GgQAFfqD+3GynHc7ljvKwD
WLDKDLPuM+sqsSYWfnrrcZdl0Z4rMmXtWekY97q067dCmrUf6Xq5Dzjw/sAU
3h85FfqPnto6depI5cqVpUqVKlKoUCHBy+B1cBpakS08PNwX6s/vxq8jXbp0
YblKdpOiFXtI+fqTpJ53rLToONrkx9Tuly1bZnJk6iPoDvyof7t++gONLFmy
+JSrJHv27JI1a1a8csmdO7fky5cPPjJ4wm8HS3gZeIQlS5Y0vMam3+NxeEK9
H27cDe53aPkaNWoYbdG2bVuTH/fv39/ojl27dsno0aON9qBuoufXE+rP/KgE
eAJHdgNXuXLlkrx58ybhCW7iHIElMMS5Klu2rJQrV87wWoUKFcz3ii1vqPfH
DSdUU/i570VHR5veGDynLl26GAxRFzl06JBMnDhR+vbta35fq1Ytb6g/86MQ
yfGULVs2yZkzZxKe0Hpwk8WSxRF1LDSh1YXkYGx8r6/xhHq/3DD1kXjOG+eF
ubhWrVoZzwnfduzYsQZT1PPBFPwVExPjC/VnTuuRMWPGsHvhSc+H4SZ0nsUS
XASGOEfc+9AUem9L2sjB2Pib/htPqPfvcQ/qI5w/zhlzccH9ZsOHD5eDBw+a
mVN4Cx9K9aHrp/+NCOApITmeyJ/QenATfgUaD16yWAJH1ITpteA84Q9yD2Tj
e/qa+Ju+zvVmQxyaD3vR62iKevXqSYsWLZL6zaiJvPnmm2ZtBPIr6viqDd01
yf5GZM6c2RucP1l+CsYTfepwE3qOmhVY4tyAHfQ5eW+zZs1MH5Pd6L/gb+BN
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
laZfGK5inY3gtTUsptB+PXv2dOtRaSBqPfFEWEflqJ4Z0svQsBdMHkVdFo8P
zfe25kMfFC0sn5YsJpfKlpZryjm3K5WTO9WinP7z7l1EOncQadxAJLqK8fMS
A7jCN/9Cc6tdBX47U/coRoECBTzBz/FMjin62NF+5Ef0DFr80JtLjxNeH2sX
0pdh19ZA+5F7DR482P+oPe/nUY5Ozz3rp4ePuQ16JFZqHrUlwFH45GdU730T
XdXkT7/ENnY8h9Zeh5t8Q0VGxDn+eM3oQN6kuPKUNlx1Xrmt1n/+4wn1Pj6s
UP3nC65LJceUneGn/xUOsvqOr/BS8PNxLUeBwU6dOnlDvW9u/PHokP7ZePrL
qe/OVUzhne8okNf4Eh9oPvS55kWXGtaXxG6dRfr2cvofevdwvPEXx4jMnu5w
FdxVqbxTe1KuAlNnihV9LHRfcJQpUyaBfCqlZ7gHr61hnzNo162xz8W1OLPr
P93veWlupM4o+8QTnv7KU2btsOzZTK8E3gS67yPF1JelSsoVzZ0ShwwUGekT
GTtKZNhgB0dsYC2mjjMnD6YqOJhC+x0ML+AJ9f6FIipWrJhg6730T1jfL6W1
NYJxZTd+RvPdb/0xN1J39Hz+uQQwNUd5CkzRd3RYMUX99nxkcblSpbIkNmvq
aD56i5o3NZ4EXp/UqenUntB9uiUqT91R7fdVyWKPHUcFh2pAX/CzcYP1n+Uq
+0wFuz6NfT4uvrld/9CNtBsjM4X56ZOlLpXEU8XC5QvNifD6boEXuIh+cstJ
bJUrOF/BVAWP8f6ulCrhn5Pj0axF/Zmwz9q0axZS9w3uS4KvyK/AFeuh40mA
N3otQjlD5saDie7p0oWBKWpTeBTUpeiF+LR4MflWuYq60y3WcCFfonePLcBN
Fk9ovp9KR/oTHhOv748G2CpdurSf/grrXdheJeak8CSoT7HOLjMe/E5zMW+o
P7cbfz/6Z8wYRk8S+o9eWXpiz0QUla9LRsgPmlddL1PK6Dqw8ytsWV+idEn/
4+Kd/9nImzev6bWgJsz8IrVguyY8ORTPpqPWC2+hD/Xvbj3qEYkWylcLcmTz
UaOiv5x+WGq3F8mrSoOrSLldtpTxy0U3vv6iP1+ILB7fP5U8Ey01Br0WYIre
JTxBepbss0vwKqgDMz9FjsVcR8uWLV1MPWJBPrQ6Vw4fM1L0Jp2OKCLnla++
UWx9X6oEOZN8F1nc/0WJYvFvFHg8/b0/EzzniT5bemzxBFmPAo+d3Aluoh+d
9S7xKPAG0YWh/sxu/HMBvtbkzuHdXSCfL8HZvJtTWHPYjXsHMyHMg9BrwVpk
5FTMU+FZ4Few/hrPC6DOy89476H+zG64kdrDztXTu4THjk9h/XXmO06ePGlq
vmAKrLlrX7rhxv2jcOHCftZTYhaEORD8dbsePGsH8hwO+v3w08mzVCN6Q/2Z
3XAjNYeds8JTZ16RWjB5E/Uq+Ono0aOmnxY/nd81bNjQF+rP7IYbqTnu56fT
Q8FzRnl2OD0WeH88mzXUn9kNN1Jz4Kfj/Vk/nV5AepbsvCLziaybZP10zbce
6/4uN9z4vcBPx/tjfdrkfjp9Sqwxy6wvvUrmGT29e7venxtu3Cesn856ZcxY
Bfvp1KSWqe47e/asLFu1SpavWyfrd+6U5M8+dsMNN34dFSpXlspVq0rj2Fjp
2a+fjJ0yRRauXCkbFD9nvvtOiFNff22e9cyz1OPGjg0L9Wd2w43UHLVjYvxN
WraUnoMGyfgZM2SBctLa7dtlyxtvyEdffSW37tyRs4qthKNHZfPevTJq4kRv
qD+zG26k5oiuUye+UYsW0k05aszUqTJvxQp5ecsWg6njfr9cv3VLPv/+e9l/
/LhsffNN4Xnqof7MbriRmqNK9erxjXguW69eMmLSJJm9bJms3LxZNu/bJ2+f
OiXfX78uF3/8Ud48cUJ2HDwoC1audP10N9y4T5SPivI2ZO63a1eJGz9eZsbH
y0ubNsmrmjvtf+89+ebaNbmiuDp08qTsPHSIv7nr+rnhxn0iIjLSE8MaFR07
ypDRo2XawoWybONGeWXPHtnzzjvy1dWrRv8dUx34+pEjsmbbNtdPd8ON3wkw
1bxtWxnA8wfmzZMl69bJhtdfN7z0meZSdxIT5cT588b74/ct2rcPC/VndsON
1Bx1GjTwx7ZuLX2GDpUJs2fLotWrZd2OHcaT+OTbbyVRMfXxhQuSEPDT+8TF
eUP9md1wIzVHzZgYf2OvV3oMHCjjpk83fjoaD+/vwy+/NH76Oeun79snL86c
6Q31Z3bDjdQc1k/v2revjJ4yRea+9FKSn37s3Dn56eZN+eLKFeNZbDtwQGYs
Xux6f264cZ+oFB3tw/vr2LOnjJg4UWYvXZrkpx/66CO5fP26fHP1qhz48EPj
py9as8bFlBtu3Cfw0xvwDJ0uXWTYuHEyAz/9lVdM7rTv2DG5eO2aXP3lFzn8
8cey6+23ZcXmza6f7oYb9wnrp7fs0EEGjxolUxcskGUbNsgru3fL64cPy/kf
f5Sbt2+bvordR47I6q1bXT/dDTd+J+o3aWL89P4+n0yaO1fi166VDbt2yXbV
ev7vvzfe3wdffim733lHNirW2nfvHhbqz+yGG6k58NObtmolvYcMkRdnzUry
0/EpPv7mG1OjOn3xYlJ/+qARI7yh/sxuuJGao0b9+gnGTx8wQMZOmybzV65M
8tNPfPGF3LxzRz69dEn2an6FJ9jRfU6iG27cN6rWrm389C59+sioyZNl7vLl
8vJrr8lr+/fLu2fOyDnVfa+oFsQXRCO2aNeOr65X4YYbKURE2bJhZcqXT6ha
s6Y0bNZMvO3bS5vOnaVVp07GX8cTRBe27NiRPEo69+4t3fr3N5tqRRdXbriR
LEqULu0rWaaMsJXyeKRi1apSvW5dqde4saAHwRLY6q4Yon8JH2PQyJHGI+Sr
6kVXB7rhRiDgqOR4qlm/vuEmNF6HHj3MDPDAESPMLAi6cOz06fQnmblg5hjR
g607d/aEel/ccCM1BBwVWbaslK1YMQlP9FTATeRW/eLiDJbwLfDYZyxebOYW
5730ktnouZgyf74MnzDB5So33NBQfkrwVKoklaKjpXqdOoafqP127dfPcNPI
SZNk4pw5ZlaR3tol69ebmUV6l9hW6PfUsqYr1kK9L264kRoCfoqqXt3Jn5o0
MX4evbTgadSUKYaD8ADj160zHjr9fsx8bH/rLXlt3z5Tq6KOtXTDBukfFxcW
6v1xw41QBuv7VapWzeCpTsOGxtvDi8CDIG8CT6z5wtwvtSpwdObzz+W769ed
WtXx42b2l9+v27mTdco8od4nN9wIdVStVcvgCc2Hd95r8GDxvfiiyZ2Y+Viu
eIKH4KQjH38sF69ckUQR+fnOHVO3euvDD2VfYE2lCTNmeEK9P264EeqoFRMj
MbGxEtumjVk7adCoUTJuxgyZtXSp0XNr6U/av9/wET20X1+9KrcSE+WLH380
/RXvnj0rh06dMmtXjJ0yJSzU++OGG6GO2jExpn+CNV6Y8x0+YYLRfAtfftnw
007Nn9755BMzm3hO9d5PylF3dPtKMXXq4kWzTsVRxdX+48fd2q8bbmjUqFvX
Sx5Ff0TfYcNMvWnWkiWGo8DTh59+Kjdv3ZKfVOv9Infj0s8/yyeKsVMXLsh7
n30muw4fdr10N9wIhGLKj+5j3aTxM2eauhM+OXru7Ndfm/zptm634CjVfVcV
X18rps5cvmx61lX/+aOioz2h3g833Egt0bBpU0/nPn2Mf05/BD3p+Ob4Dsz2
fnXtmnyuWu+zK1fky+vX5YuffhL/Dz/IWcXUKWc9JV+o98ENN1JbtOzY0QdP
sW5S0prp+/eb2Y4jmk+h7z5SzuJZH2DpbICj9G+u5nPDjXtEl/79vfRNzNR8
akVgfWfmeg9+9JEcPXdOPjh/3vgSYIn5xIMnT/pC/ZndcCO1B70Q42bMiLdr
/G1T/Uf9ifXS3zlzxvh/h0+f9m9MSPCE+rO64UZaCtab6Dl4sC9+7Vrf+p07
41/dsyd+3Y4d3ikLFnhC/dnccMMNN/5I/P8XFbTh
               "], {{0, 0}, {213, 
               223}}, {0, 255}, ColorFunction -> RGBColor], {
              Method -> {"ShrinkWrap" -> True}, ImageSize -> 234, 
               ImageSize -> {213, 223}, PlotRange -> {{0, 213}, {0, 223}}}], 
             ImageSizeAction -> "ShrinkToFit", ImageSize -> 400], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show bonds only", "input" -> 
         "3DStructure:ChemicalData__Show bonds only"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show space filling model", "input" -> 
         "3DStructure:ChemicalData__Show space filling model"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Basic properties", "scanner" -> "Data", "id" -> 
     "Basic:ChemicalData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"SOLV-DB"}], "\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n    ", 
         XMLElement["datasource", {}, {"CRCHandbook"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"Uracil\"], \
{EntityProperty[\"Chemical\", \"MolarMass\"], EntityProperty[\"Chemical\", \
\"Phase\"], EntityProperty[\"Chemical\", \"MeltingPoint\"], \
EntityProperty[\"Chemical\", \"BoilingPoint\"], EntityProperty[\"Chemical\", \
\"Density\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"molar mass\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["112.09", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "112.09", "SRString" -> "112.09"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"mol\""}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"phase\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"solid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Solid"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at STP\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"melting point\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["300", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "300", "SRString" -> "300"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"boiling point\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["379", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "379", "SRString" -> "379"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.99174", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.99174", "SRString" -> "0.99174"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"solubility in water\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\"soluble\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step", "input" -> 
         "Basic:ChemicalData__Step-by-step", "stepbystep" -> "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {
            "short" -> "g/cm^3", "long" -> "grams per cubic centimeter"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "g/mol", "long" -> "grams per mole"}, {}]}]}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Hydrophobicity and permeability properties", "scanner" -> 
     "Data", "id" -> "HydrophobicityPermeabilityProperties:ChemicalData", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"predicted LogP hydrophobicity\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["1.19", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.19", "SRString" -> "1.19"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-1.19"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"experimental LogS\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["1.48", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.48", "SRString" -> "1.48"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-1.48"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"predicted LogS\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["0.63", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.63", "SRString" -> "0.63"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-0.63"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                   "\"experimental Caco\[Hyphen]2 permeability\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["5.37", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5.37", "SRString" -> "5.37"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-5.37"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Basic drug properties", "scanner" -> "Data", "id" -> 
     "DrugNamesProperties:ChemicalData", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"approval status\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{"\"experimental\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"small molecule\""}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Solid properties (at STP)", "scanner" -> "Data", "id" -> 
     "SolidProperties:ChemicalData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CRCHandbook"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.99174", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.99174", "SRString" -> "0.99174"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Right}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Thermodynamic properties", "scanner" -> "Data", "id" -> 
     "Thermodynamics:ChemicalData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n    ", 
         XMLElement["microsource", {}, {"ElementData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n    ", 
         XMLElement["datasource", {}, {"WebElements"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    TemplateBox[{"\"specific heat capacity \"", 
                    SubscriptBox["c", "p"]}, "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"solid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Solid"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.075", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.075", "SRString" -> "1.075"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"J\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"\"(\"", "\[InvisibleSpace]", "\"g\"", 
                    "\[InvisibleSpace]", "\"\[ThinSpace]\"", 
                    "\[InvisibleSpace]", "\"K\"", "\[InvisibleSpace]", 
                    "\")\""}]}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    TemplateBox[{"\"specific heat of formation \"", 
                    SubscriptBox["\"\[CapitalDelta]\"", "f"], "H", 
                    "\"\[Degree]\""}, "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"gas\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Gas"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["2.702", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.702", "SRString" -> "2.702"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {"\[SpanFromAbove]", 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"solid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Solid"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["3.831", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "3.831", "SRString" -> "3.831"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at STP\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "Thermodynamics:ChemicalData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {
            "short" -> "J/(g K)", "long" -> 
             "joules per gram kelvin difference"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "kJ/g", "long" -> "kilojoules per gram"}, {}]}]}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Chemical identifiers", "scanner" -> "Data", "id" -> 
     "ChemicalIdentifiers:ChemicalData", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"Uracil\"], \
{EntityProperty[\"Chemical\", \"CASNumber\"], EntityProperty[\"Chemical\", \
\"BeilsteinNumber\"], EntityProperty[\"Chemical\", \"CIDNumber\"], \
EntityProperty[\"Chemical\", \"SMILES\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"CAS number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"66-22-8\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"Beilstein number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"507828\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"PubChem CID number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"1174\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"PubChem SID number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"3406\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"SMILES identifier\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"C1=CNC(=O)NC1=O\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ChemicalIdentifiers:ChemicalData__More"}, {}]}]}], Typeset`pod11$$ =
    XMLElement[
   "pod", {"title" -> "Toxicity properties", "scanner" -> "Data", "id" -> 
     "ToxicityProperties:ChemicalData", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"MacmillansChemicalAndPhysicalData"}], 
         "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"Uracil\"], \
{EntityProperty[\"Chemical\", \"RTECSClasses\"]}, \
\"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"RTECS classes\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{"\"tumorigen\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "\"mutagen\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"reproductive effector\""}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "Uracil", "template" -> 
        "Assuming \"Uracil\" is a chemical compound${separator}Use as ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"Uracil\"} -> {\"Chemical\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Chemical", "desc" -> "a chemical compound", "input" -> 
          "{\"C\", \"Uracil\"} -> {\"Chemical\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "{\"C\", \"Uracil\"} -> {\"Word\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "Uracil", "template" -> 
        "Assuming uracil${separator}Use ${desc} instead", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"DPClash\", \"ChemicalE\", \"Uracil\"} -> {\"Uracil\", \
\"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Uracil", "desc" -> "uracil", "input" -> 
          "{\"DPClash\", \"ChemicalE\", \"Uracil\"} -> {\"Uracil\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Uridine", "desc" -> "uridine", "input" -> 
          "{\"DPClash\", \"ChemicalE\", \"Uracil\"} -> {\"Uridine\"}"}, \
{}]}]}], 
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
ChemicalDataSourceInformationNotes.html", "text" -> "Chemical data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
ElementDataSourceInformationNotes.html", "text" -> "Element data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "11", "datatypes" -> "Chemical,Element", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "3.084", "parsetiming" -> "0.08", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP7331e1fb0g0962cgdd800003749dbd6eadb026d", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "8", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa7341e1fb0g0962cgdd800002g45hiedcf4204a25064493226649818224", "version" -> 
    "2.6", "inputstring" -> "Uracil"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 22.907461`8.112551939009808}, "Line" -> 6,
     "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Uracil"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1043., {858., 864.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203843032331*^9},ExpressionUUID->"69c0e355-2dfb-491f-8f71-\
edd0ccd28520"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GenomeData", "[", 
   RowBox[{"\"\<JUN\>\"", ",", "\"\<FullSequence\>\""}], "]"}], "//", 
  "Short"}]], "Input",
 CellChangeTimes->{{3.71778285241072*^9, 3.717782852881826*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"ffff4d8d-4bd5-4758-8dc7-4bba0ad26bca"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"GACATCATGGGCTATTTTTAGGGGTTGACTGGTAGCAGATAAGTGTTGAGCTCGGGCTGG\"\
\>", "\[Ellipsis]", \
"\<\"GCCTTTGCTTATGAATATTTATAACAGCATTCTTGTCACAATAAATGTATTCAAATACCAA\"\>"}],
  Short]], "Output",
 CellChangeTimes->{3.717782858367133*^9, 3.7178671898316193`*^9, 
  3.7299732972416983`*^9, 3.773049958872738*^9, 3.7730500833264847`*^9, 
  3.8312038570921373`*^9},
 CellLabel->
  "Out[7]//Short=",ExpressionUUID->"c1ac9b22-6649-432e-a66e-3b7dca0b9223"]
}, Open  ]],

Cell["\<\
Note: You may need to run GenomeData[\[OpenCurlyDoubleQuote]JUN\
\[CloseCurlyDoubleQuote]] first to install the necessary data from the server.\
\>", "Text",
 CellChangeTimes->{{3.773050172177844*^9, 
  3.7730502077495527`*^9}},ExpressionUUID->"8be4e3a9-e25f-4e8a-b3ea-\
fcd953af22a7"],

Cell[CellGroupData[{

Cell["Chromosome 1", "WolframAlphaLong",
 CellChangeTimes->{{3.7178673603310747`*^9, 3.717867391240594*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"b6fbaee0-319a-49c3-9c04-b9e570826a29"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Chromosome 1", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"GenomeData[\"Chromosome1\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox[
                StyleBox[
                 TemplateBox[{"\"chromosome 1\"", "\"  \"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"human\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                $CellContext`TagBoxWrapper[
                "Entity" -> {$CellContext`GenomeSequenceData, {
                   "Chromosome1", {"Species" -> "HomoSapiens"}}}]], Identity],
               TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Reference sequence length", "scanner" -> "Data", "id" -> 
     "ChromosomeLength:GenomeSequenceData", "position" -> "200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GenomeSequenceData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["249.3", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "249.3", "SRString" -> "249.3"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"Mbp\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"megabase pairs\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Helvetica", FontSize -> Smaller, 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Idiogram", "scanner" -> "Data", "id" -> 
     "ChromosomeIdiogram:GenomeSequenceData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GenomeData"}], "\n    ", 
         XMLElement["microsource", {}, {"GenomeSequenceData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                GrayLevel[1], 
                EdgeForm[{
                  GrayLevel[0], 
                  Thickness[0.0015]}], 
                
                PolygonBox[{{{0.006622516556291391, 0}, {
                   0.005555555555555555, 0}, {0.005555555555555554, 0.}, {
                   0.004590843457405942, 0.00008440137215439975}, {
                   0.00365544364819073, 0.00033504099563384186`}, {
                   0.002777777777777775, 0.0007443033123086754}, {
                   0.001984513279519225, 0.0012997530937834557`}, {
                   0.0012997530937834557`, 0.001984513279519226}, {
                   0.0007443033123086746, 0.002777777777777777}, {
                   0.00033504099563384186`, 0.003655443648190729}, {
                   0.00008440137215439888, 0.004590843457405944}, {0., 
                   0.005555555555555556}, {0., 0.005555555555555555}, {0., 
                   0.016666666666666663`}, {0., 0.016666666666666663`}, {
                   0.00008440137215439975, 0.017631378764816276`}, {
                   0.0003350409956338427, 0.018566778574031488`}, {
                   0.0007443033123086737, 0.01944444444444444}, {
                   0.0012997530937834557`, 0.020237708942702992`}, {
                   0.0019845132795192257`, 0.020922469128438762`}, {
                   0.002777777777777776, 0.021477918909913542`}, {
                   0.003655443648190729, 0.021887181226588375`}, {
                   0.004590843457405942, 0.022137820850067817`}, {
                   0.005555555555555555, 0.02222222222222222}, {
                   0.005555555555555555, 0.02222222222222222}, {
                   0.006622516556291391, 0.02222222222222222}, {
                   0.006622516556291391, 0}}, {{0.006622516556291391, 0}, {
                   0.006622516556291391, 0.02222222222222222}, {
                   0.016158940397350992`, 0.02222222222222222}, {
                   0.016158940397350992`, 0}, {0.006622516556291391, 0}}, {{
                   0.016158940397350992`, 0}, {0.016158940397350992`, 
                   0.02222222222222222}, {0.022781456953642386`, 
                   0.02222222222222222}, {0.022781456953642386`, 0}, {
                   0.016158940397350992`, 0}}, {{0.022781456953642386`, 0}, {
                   0.022781456953642386`, 0.02222222222222222}, {
                   0.030397350993377485`, 0.02222222222222222}, {
                   0.030397350993377485`, 0}, {0.022781456953642386`, 0}}, {{
                   0.030397350993377485`, 0}, {0.030397350993377485`, 
                   0.02222222222222222}, {0.04370860927152318, 
                   0.02222222222222222}, {0.04370860927152318, 0}, {
                   0.030397350993377485`, 0}}, {{0.04370860927152318, 0}, {
                   0.04370860927152318, 0.02222222222222222}, {
                   0.057019867549668875`, 0.02222222222222222}, {
                   0.057019867549668875`, 0}, {0.04370860927152318, 0}}, {{
                   0.057019867549668875`, 0}, {0.057019867549668875`, 
                   0.02222222222222222}, {0.07986754966887417, 
                   0.02222222222222222}, {0.07986754966887417, 0}, {
                   0.057019867549668875`, 0}}, {{0.07986754966887417, 0}, {
                   0.07986754966887417, 0.02222222222222222}, {
                   0.08748344370860928, 0.02222222222222222}, {
                   0.08748344370860928, 0}, {0.07986754966887417, 0}}, {{
                   0.08748344370860928, 0}, {0.08748344370860928, 
                   0.02222222222222222}, {0.10072847682119206`, 
                   0.02222222222222222}, {0.10072847682119206`, 0}, {
                   0.08748344370860928, 0}}, {{0.10072847682119206`, 0}, {
                   0.10072847682119206`, 0.02222222222222222}, {
                   0.10933774834437086`, 0.02222222222222222}, {
                   0.10933774834437086`, 0}, {0.10072847682119206`, 0}}, {{
                   0.10933774834437086`, 0}, {0.10933774834437086`, 
                   0.02222222222222222}, {0.11788079470198676`, 
                   0.02222222222222222}, {0.11788079470198676`, 0}, {
                   0.10933774834437086`, 0}}, {{0.11788079470198676`, 0}, {
                   0.11788079470198676`, 0.02222222222222222}, {
                   0.12549668874172185`, 0.02222222222222222}, {
                   0.12549668874172185`, 0}, {0.11788079470198676`, 0}}, {{
                   0.12549668874172185`, 0}, {0.12549668874172185`, 
                   0.02222222222222222}, {0.14635761589403973`, 
                   0.02222222222222222}, {0.14635761589403973`, 0}, {
                   0.12549668874172185`, 0}}, {{0.14635761589403973`, 0}, {
                   0.14635761589403973`, 0.02222222222222222}, {
                   0.15966887417218542`, 0.02222222222222222}, {
                   0.15966887417218542`, 0}, {0.14635761589403973`, 0}}, {{
                   0.15966887417218542`, 0}, {0.15966887417218542`, 
                   0.02222222222222222}, {0.18344370860927153`, 
                   0.02222222222222222}, {0.18344370860927153`, 0}, {
                   0.15966887417218542`, 0}}, {{0.18344370860927153`, 0}, {
                   0.18344370860927153`, 0.02222222222222222}, {
                   0.19774834437086092`, 0.02222222222222222}, {
                   0.19774834437086092`, 0}, {0.18344370860927153`, 0}}, {{
                   0.19774834437086092`, 0}, {0.19774834437086092`, 
                   0.02222222222222222}, {0.21675496688741722`, 
                   0.02222222222222222}, {0.21675496688741722`, 0}, {
                   0.19774834437086092`, 0}}, {{0.21675496688741722`, 0}, {
                   0.21675496688741722`, 0.02222222222222222}, {
                   0.22622516556291392`, 0.02222222222222222}, {
                   0.22622516556291392`, 0}, {0.21675496688741722`, 0}}, {{
                   0.22622516556291392`, 0}, {0.22622516556291392`, 
                   0.02222222222222222}, {0.2471523178807947, 
                   0.02222222222222222}, {0.2471523178807947, 0}, {
                   0.22622516556291392`, 0}}, {{0.2471523178807947, 0}, {
                   0.2471523178807947, 0.02222222222222222}, {
                   0.2633112582781457, 0.02222222222222222}, {
                   0.2633112582781457, 0}, {0.2471523178807947, 0}}, {{
                   0.2633112582781457, 0}, {0.2633112582781457, 
                   0.02222222222222222}, {0.2785430463576159, 
                   0.02222222222222222}, {0.2785430463576159, 0}, {
                   0.2633112582781457, 0}}, {{0.2785430463576159, 0}, {
                   0.2785430463576159, 0.02222222222222222}, {
                   0.3213245033112583, 0.02222222222222222}, {
                   0.3213245033112583, 0}, {0.2785430463576159, 0}}, {{
                   0.3213245033112583, 0}, {0.3213245033112583, 
                   0.02222222222222222}, {0.34503311258278146`, 
                   0.02222222222222222}, {0.34503311258278146`, 0}, {
                   0.3213245033112583, 0}}, {{0.34503311258278146`, 0}, {
                   0.34503311258278146`, 0.02222222222222222}, {
                   0.36026490066225164`, 0.02222222222222222}, {
                   0.36026490066225164`, 0}, {0.34503311258278146`, 0}}, {{
                   0.36026490066225164`, 0}, {0.36026490066225164`, 
                   0.02222222222222222}, {0.38019867549668873`, 
                   0.02222222222222222}, {0.38019867549668873`, 0}, {
                   0.36026490066225164`, 0}}, {{0.38019867549668873`, 0}, {
                   0.38019867549668873`, 0.02222222222222222}, {
                   0.39450331125827814`, 0.02222222222222222}, {
                   0.39450331125827814`, 0}, {0.38019867549668873`, 0}}, {{
                   0.39450331125827814`, 0}, {0.39450331125827814`, 
                   0.02222222222222222}, {0.39927152317880793`, 
                   0.02222222222222222}, {0.39927152317880793`, 0}, {
                   0.39450331125827814`, 0}}, {{0.39927152317880793`, 0}, {
                   0.39927152317880793`, 0.02222222222222222}, {
                   0.4135099337748344, 0.02222222222222222}, {
                   0.4135099337748344, 0}, {0.39927152317880793`, 0}}, {{
                   0.4135099337748344, 0}, {0.4135099337748344, 
                   0.02222222222222222}, {0.4277483443708609, 
                   0.02222222222222222}, {0.4277483443708609, 0}, {
                   0.4135099337748344, 0}}, {{0.4277483443708609, 0}, {
                   0.4277483443708609, 0.02222222222222222}, {
                   0.4410596026490066, 0.02222222222222222}, {
                   0.4410596026490066, 0}, {0.4277483443708609, 0}}, {{
                   0.4410596026490066, 0}, {0.4410596026490066, 
                   0.02222222222222222}, {0.45437086092715234`, 
                   0.02222222222222222}, {0.45437086092715234`, 0}, {
                   0.4410596026490066, 0}}, {{0.45437086092715234`, 0}, {
                   0.45437086092715234`, 0.02222222222222222}, {
                   0.46675496688741724`, 0.02222222222222222}, {
                   0.46675496688741724`, 0}, {0.45437086092715234`, 0}}, {{
                   0.46675496688741724`, 0}, {0.46675496688741724`, 
                   0.02222222222222222}, {0.4714569536423841, 
                   0.02222222222222222}, {0.4714569536423841, 0}, {
                   0.46675496688741724`, 0}}, {{0.4714569536423841, 0}, {
                   0.4714569536423841, 0.02222222222222222}, {
                   0.4746504782928624, 0.02222222222222222}, {
                   0.4746504782928624, 0.02222222222222222}, {
                   0.4765799024891616, 0.022053419477913422`}, {
                   0.47845070210759205`, 0.021552140230954534`}, {
                   0.4802060338484179, 0.020733615597604872`}, {
                   0.48179256284493505`, 0.019622716034655308`}, {
                   0.4831620832164066, 0.018253195663183768`}, {
                   0.48427298277935615`, 0.016666666666666663`}, {
                   0.4850915074127058, 0.014911334925840762`}, {
                   0.4855927866596647, 0.013040535307410336`}, {
                   0.4857615894039735, 0.01111111111111111}, {
                   0.4857615894039735, 0.01111111111111111}, {
                   0.4857615894039735, 0.01111111111111111}, {
                   0.4857615894039735, 0.01111111111111111}, {
                   0.4855927866596647, 0.009181686914811884}, {
                   0.4850915074127058, 0.007310887296381458}, {
                   0.48427298277935615`, 0.005555555555555556}, {
                   0.4831620832164066, 0.003969026559038452}, {
                   0.48179256284493505`, 0.0025995061875669113`}, {
                   0.4802060338484179, 0.0014886066246173491`}, {
                   0.47845070210759205`, 0.0006700819912676854}, {
                   0.4765799024891616, 0.0001688027443087995}, {
                   0.4746504782928624, 0.}, {0.4746504782928624, 0}, {
                   0.4714569536423841, 0}}, {{0.5019205298013245, 0}, {
                   0.49687270051508464`, 0}, {0.49687270051508464`, 0.}, {
                   0.49494327631878543`, 0.0001688027443087995}, {
                   0.493072476700355, 0.0006700819912676837}, {
                   0.4913171449595291, 0.0014886066246173509`}, {
                   0.489730615963012, 0.0025995061875669113`}, {
                   0.48836109559154045`, 0.003969026559038452}, {
                   0.4872501960285909, 0.005555555555555554}, {
                   0.48643167139524124`, 0.007310887296381458}, {
                   0.4859303921482823, 0.009181686914811887}, {
                   0.4857615894039735, 0.011111111111111112`}, {
                   0.4857615894039735, 0.01111111111111111}, {
                   0.4857615894039735, 0.01111111111111111}, {
                   0.4857615894039735, 0.011111111111111112`}, {
                   0.4859303921482823, 0.013040535307410336`}, {
                   0.48643167139524124`, 0.014911334925840763`}, {
                   0.4872501960285909, 0.016666666666666663`}, {
                   0.48836109559154045`, 0.01825319566318377}, {
                   0.489730615963012, 0.019622716034655308`}, {
                   0.4913171449595291, 0.020733615597604872`}, {
                   0.493072476700355, 0.021552140230954538`}, {
                   0.49494327631878543`, 0.022053419477913422`}, {
                   0.49687270051508464`, 0.02222222222222222}, {
                   0.49687270051508464`, 0.02222222222222222}, {
                   0.5019205298013245, 0.02222222222222222}, {
                   0.5019205298013245, 0}}, {{0.5019205298013245, 0}, {
                   0.5019205298013245, 0.02222222222222222}, {
                   0.5617880794701987, 0.02222222222222222}, {
                   0.5617880794701987, 0}, {0.5019205298013245, 0}}, {{
                   0.5617880794701987, 0}, {0.5617880794701987, 
                   0.02222222222222222}, {0.5798675496688742, 
                   0.02222222222222222}, {0.5798675496688742, 0}, {
                   0.5617880794701987, 0}}, {{0.5798675496688742, 0}, {
                   0.5798675496688742, 0.02222222222222222}, {
                   0.5931788079470198, 0.02222222222222222}, {
                   0.5931788079470198, 0}, {0.5798675496688742, 0}}, {{
                   0.5931788079470198, 0}, {0.5931788079470198, 
                   0.02222222222222222}, {0.6121854304635762, 
                   0.02222222222222222}, {0.6121854304635762, 0}, {
                   0.5931788079470198, 0}}, {{0.6121854304635762, 0}, {
                   0.6121854304635762, 0.02222222222222222}, {
                   0.6264238410596027, 0.02222222222222222}, {
                   0.6264238410596027, 0}, {0.6121854304635762, 0}}, {{
                   0.6264238410596027, 0}, {0.6264238410596027, 
                   0.02222222222222222}, {0.6511258278145695, 
                   0.02222222222222222}, {0.6511258278145695, 0}, {
                   0.6264238410596027, 0}}, {{0.6511258278145695, 0}, {
                   0.6511258278145695, 0.02222222222222222}, {
                   0.665430463576159, 0.02222222222222222}, {
                   0.665430463576159, 0}, {0.6511258278145695, 0}}, {{
                   0.665430463576159, 0}, {0.665430463576159, 
                   0.02222222222222222}, {0.685364238410596, 
                   0.02222222222222222}, {0.685364238410596, 0}, {
                   0.665430463576159, 0}}, {{0.685364238410596, 0}, {
                   0.685364238410596, 0.02222222222222222}, {
                   0.6958278145695365, 0.02222222222222222}, {
                   0.6958278145695365, 0}, {0.685364238410596, 0}}, {{
                   0.6958278145695365, 0}, {0.6958278145695365, 
                   0.02222222222222222}, {0.7072185430463576, 
                   0.02222222222222222}, {0.7072185430463576, 0}, {
                   0.6958278145695365, 0}}, {{0.7072185430463576, 0}, {
                   0.7072185430463576, 0.02222222222222222}, {
                   0.7214569536423842, 0.02222222222222222}, {
                   0.7214569536423842, 0}, {0.7072185430463576, 0}}, {{
                   0.7214569536423842, 0}, {0.7214569536423842, 
                   0.02222222222222222}, {0.7290728476821192, 
                   0.02222222222222222}, {0.7290728476821192, 0}, {
                   0.7214569536423842, 0}}, {{0.7290728476821192, 0}, {
                   0.7290728476821192, 0.02222222222222222}, {
                   0.7414569536423841, 0.02222222222222222}, {
                   0.7414569536423841, 0}, {0.7290728476821192, 0}}, {{
                   0.7414569536423841, 0}, {0.7414569536423841, 
                   0.02222222222222222}, {0.7680794701986755, 
                   0.02222222222222222}, {0.7680794701986755, 0}, {
                   0.7414569536423841, 0}}, {{0.7680794701986755, 0}, {
                   0.7680794701986755, 0.02222222222222222}, {
                   0.7832450331125828, 0.02222222222222222}, {
                   0.7832450331125828, 0}, {0.7680794701986755, 0}}, {{
                   0.7832450331125828, 0}, {0.7832450331125828, 
                   0.02222222222222222}, {0.7908609271523179, 
                   0.02222222222222222}, {0.7908609271523179, 0}, {
                   0.7832450331125828, 0}}, {{0.7908609271523179, 0}, {
                   0.7908609271523179, 0.02222222222222222}, {
                   0.806092715231788, 0.02222222222222222}, {
                   0.806092715231788, 0}, {0.7908609271523179, 0}}, {{
                   0.806092715231788, 0}, {0.806092715231788, 
                   0.02222222222222222}, {0.8355629139072848, 
                   0.02222222222222222}, {0.8355629139072848, 0}, {
                   0.806092715231788, 0}}, {{0.8355629139072848, 0}, {
                   0.8355629139072848, 0.02222222222222222}, {
                   0.8478807947019867, 0.02222222222222222}, {
                   0.8478807947019867, 0}, {0.8355629139072848, 0}}, {{
                   0.8478807947019867, 0}, {0.8478807947019867, 
                   0.02222222222222222}, {0.863112582781457, 
                   0.02222222222222222}, {0.863112582781457, 0}, {
                   0.8478807947019867, 0}}, {{0.863112582781457, 0}, {
                   0.863112582781457, 0.02222222222222222}, {
                   0.8821192052980132, 0.02222222222222222}, {
                   0.8821192052980132, 0}, {0.863112582781457, 0}}, {{
                   0.8821192052980132, 0}, {0.8821192052980132, 
                   0.02222222222222222}, {0.8878145695364238, 
                   0.02222222222222222}, {0.8878145695364238, 0}, {
                   0.8821192052980132, 0}}, {{0.8878145695364238, 0}, {
                   0.8878145695364238, 0.02222222222222222}, {
                   0.9011258278145695, 0.02222222222222222}, {
                   0.9011258278145695, 0}, {0.8878145695364238, 0}}, {{
                   0.9011258278145695, 0}, {0.9011258278145695, 
                   0.02222222222222222}, {0.9249006622516557, 
                   0.02222222222222222}, {0.9249006622516557, 0}, {
                   0.9011258278145695, 0}}, {{0.9249006622516557, 0}, {
                   0.9249006622516557, 0.02222222222222222}, {
                   0.9372847682119205, 0.02222222222222222}, {
                   0.9372847682119205, 0}, {0.9249006622516557, 0}}, {{
                   0.9372847682119205, 0}, {0.9372847682119205, 
                   0.02222222222222222}, {0.9534437086092715, 
                   0.02222222222222222}, {0.9534437086092715, 0}, {
                   0.9372847682119205, 0}}, {{0.9534437086092715, 0}, {
                   0.9534437086092715, 0.02222222222222222}, {
                   0.9772185430463576, 0.02222222222222222}, {
                   0.9772185430463576, 0}, {0.9534437086092715, 0}}, {{
                   0.9772185430463576, 0}, {0.9772185430463576, 
                   0.02222222222222222}, {0.9944444444444445, 
                   0.02222222222222222}, {0.9944444444444445, 
                   0.02222222222222222}, {0.9954091565425941, 
                   0.022137820850067817`}, {0.9963445563518093, 
                   0.021887181226588375`}, {0.9972222222222222, 
                   0.021477918909913546`}, {0.9980154867204808, 
                   0.020922469128438762`}, {0.9987002469062166, 
                   0.020237708942702992`}, {0.9992556966876913, 
                   0.01944444444444444}, {0.9996649590043661, 
                   0.018566778574031488`}, {0.9999155986278456, 
                   0.017631378764816276`}, {1., 0.016666666666666663`}, {1., 
                   0.016666666666666663`}, {1., 0.005555555555555555}, {1., 
                   0.005555555555555555}, {0.9999155986278456, 
                   0.004590843457405942}, {0.9996649590043661, 
                   0.003655443648190729}, {0.9992556966876913, 
                   0.002777777777777778}, {0.9987002469062166, 
                   0.001984513279519226}, {0.9980154867204808, 
                   0.0012997530937834557`}, {0.9972222222222222, 
                   0.0007443033123086746}, {0.9963445563518093, 
                   0.0003350409956338427}, {0.9954091565425941, 
                   0.00008440137215439975}, {0.9944444444444445, 0.}, {
                   0.9944444444444445, 0}, {0.9772185430463576, 0}}}, 
                 VertexColors -> {{1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                   1., 1.}, {0.75, 0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 
                   1.}, {0.75, 0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 
                   1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {
                   0.75, 0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 1.}, {0.75,
                    0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 1.}, {0.75, 
                   0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 1.}, {0.75, 0.75,
                    0.75, 0.75, 0.75}, {1., 1., 1., 1., 1.}, {0.25, 0.25, 
                   0.25, 0.25, 0.25}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 
                   0.5, 0.5}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 0.5, 
                   0.5}, {1., 1., 1., 1., 1.}, {0., 0., 0., 0., 0.}, {1., 1., 
                   1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 0.25}, {1., 1., 1., 
                   1., 1.}, {0.25, 0.25, 0.25, 0.25, 0.25}, {1., 1., 1., 1., 
                   1.}, {0., 0., 0., 0., 0.}, {1., 1., 1., 1., 1.}, {0.5, 0.5,
                    0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 0.5,
                    0.5}, {1., 1., 1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 0.25,
                    0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
                   0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
                    0.25, 0.25, 0.25}, {0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
                   0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
                    0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
                   0.25, 0.25}, {0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 
                   1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {0.5,
                    0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5,
                    0.5, 0.5}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 0.5, 
                   0.5}, {1., 1., 1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 
                   0.25}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {
                   1., 1., 1., 1., 1.}, {0., 0., 0., 0., 0.}, {1., 1., 1., 1.,
                    1.}, {0., 0., 0., 0., 0.}, {1., 1., 1., 1., 1.}, {0.75, 
                   0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 1.}, {0., 0., 0.,
                    0., 0.}, {1., 1., 1., 1., 1.}, {0.75, 0.75, 0.75, 0.75, 
                   0.75}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {
                   1., 1., 1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 0.25}, {1., 
                   1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}}], 
                EdgeForm[None], 
                RGBColor[1, 0, 0], 
                PolygonBox[{}]}, Frame -> {{False, False}, {True, False}}, 
               FrameTicks -> {{None, None}, {{{0., 
                    FormBox["\"0 Mb\"", TraditionalForm]}, {
                   0.12133481939366733`, 
                    FormBox["\"30 Mb\"", TraditionalForm]}, {
                   0.24266963878733466`, 
                    FormBox["\"60 Mb\"", TraditionalForm]}, {
                   0.364004458181002, 
                    FormBox["\"90 Mb\"", TraditionalForm]}, {
                   0.4853392775746693, 
                    FormBox["\"120 Mb\"", TraditionalForm]}, {
                   0.6066740969683367, 
                    FormBox["\"150 Mb\"", TraditionalForm]}, {
                   0.728008916362004, 
                    FormBox["\"180 Mb\"", TraditionalForm]}, {
                   0.8493437357556713, 
                    FormBox["\"210 Mb\"", TraditionalForm]}, {
                   0.9706785551493387, 
                    FormBox["\"240 Mb\"", TraditionalForm]}}, None}}, 
               FrameStyle -> {{None, None}, {
                  GrayLevel[0.5], None}}, ImageSize -> 450, AspectRatio -> 
               Automatic, 
               ImagePadding -> {{10, Automatic}, {Automatic, Automatic}}], 
              StyleBox["\"chromosome 1\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  
                  ItemBox[#2, Alignment -> {Left, Inherited}, 
                   DefaultBaseStyle -> "LabeledLabel"]}, {
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {2, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Top", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
GenomeDataSourceInformationNotes.html", "text" -> "Genome data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
GenomeSequenceDataSourceInformationNotes.html", "text" -> 
        "Genome sequence data"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Genome,GenomeSequence", "timedout" -> 
    "", "timedoutpods" -> "", "timing" -> "0.41000000000000003", 
    "parsetiming" -> "0.089", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP23141g3ch8g527aa207d00005aae51dh3hef338f", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "38", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa23151g3ch8g527aa207d00005h1de6bf3chadci82206861520850736438", "version" -> 
    "2.6", "inputstring" -> "Chromosome 1"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 43.348725`8.38955130568884}, "Line" -> 8, 
    "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Chromosome 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1043., {121., 127.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203863385208*^9},ExpressionUUID->"2dad4736-8b5f-4142-b296-\
6a2c47a2eee0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Chromosome X genome sequences", "WolframAlphaLong",
 CellChangeTimes->{{3.717867397082902*^9, 3.717867405519348*^9}, {
  3.729973315966069*^9, 3.729973318944635*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"8c1a17dd-1e40-42e7-b054-409899df3707"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Chromosome X genome sequences", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"GenomeData[\"ChromosomeX\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox[
                StyleBox[
                 TemplateBox[{"\"chromosome X\"", "\"  \"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"human\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                $CellContext`TagBoxWrapper[
                "Entity" -> {$CellContext`GenomeSequenceData, {
                   "ChromosomeX", {"Species" -> "HomoSapiens"}}}]], Identity],
               TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Reference sequence length", "scanner" -> "Data", "id" -> 
     "ChromosomeLength:GenomeSequenceData", "position" -> "200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GenomeSequenceData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["154.9", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "154.9", "SRString" -> "154.9"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"Mbp\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"megabase pairs\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Helvetica", FontSize -> Smaller, 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Idiogram", "scanner" -> "Data", "id" -> 
     "ChromosomeIdiogram:GenomeSequenceData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GenomeData"}], "\n    ", 
         XMLElement["microsource", {}, {"GenomeSequenceData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                GrayLevel[1], 
                EdgeForm[{
                  GrayLevel[0], 
                  Thickness[0.0015]}], 
                
                PolygonBox[{{{0.03751451800232288, 0}, {
                   0.005555555555555555, 0}, {0.005555555555555554, 0.}, {
                   0.004590843457405942, 0.00008440137215439975}, {
                   0.00365544364819073, 0.00033504099563384186`}, {
                   0.002777777777777775, 0.0007443033123086754}, {
                   0.001984513279519225, 0.0012997530937834557`}, {
                   0.0012997530937834557`, 0.001984513279519226}, {
                   0.0007443033123086746, 0.002777777777777777}, {
                   0.00033504099563384186`, 0.003655443648190729}, {
                   0.00008440137215439888, 0.004590843457405944}, {0., 
                   0.005555555555555556}, {0., 0.005555555555555555}, {0., 
                   0.016666666666666663`}, {0., 0.016666666666666663`}, {
                   0.00008440137215439975, 0.017631378764816276`}, {
                   0.0003350409956338427, 0.018566778574031488`}, {
                   0.0007443033123086737, 0.01944444444444444}, {
                   0.0012997530937834557`, 0.020237708942702992`}, {
                   0.0019845132795192257`, 0.020922469128438762`}, {
                   0.002777777777777776, 0.021477918909913542`}, {
                   0.003655443648190729, 0.021887181226588375`}, {
                   0.004590843457405942, 0.022137820850067817`}, {
                   0.005555555555555555, 0.02222222222222222}, {
                   0.005555555555555555, 0.02222222222222222}, {
                   0.03751451800232288, 0.02222222222222222}, {
                   0.03751451800232288, 0}}, {{0.03751451800232288, 0}, {
                   0.03751451800232288, 0.02222222222222222}, {
                   0.058536585365853655`, 0.02222222222222222}, {
                   0.058536585365853655`, 0}, {0.03751451800232288, 0}}, {{
                   0.058536585365853655`, 0}, {0.058536585365853655`, 
                   0.02222222222222222}, {0.10058072009291522`, 
                   0.02222222222222222}, {0.10058072009291522`, 0}, {
                   0.058536585365853655`, 0}}, {{0.10058072009291522`, 0}, {
                   0.10058072009291522`, 0.02222222222222222}, {
                   0.12009291521486644`, 0.02222222222222222}, {
                   0.12009291521486644`, 0}, {0.10058072009291522`, 0}}, {{
                   0.12009291521486644`, 0}, {0.12009291521486644`, 
                   0.02222222222222222}, {0.1562137049941928, 
                   0.02222222222222222}, {0.1562137049941928, 0}, {
                   0.12009291521486644`, 0}}, {{0.1562137049941928, 0}, {
                   0.1562137049941928, 0.02222222222222222}, {
                   0.16817653890824621`, 0.02222222222222222}, {
                   0.16817653890824621`, 0}, {0.1562137049941928, 0}}, {{
                   0.16817653890824621`, 0}, {0.16817653890824621`, 
                   0.02222222222222222}, {0.18315911730545878`, 
                   0.02222222222222222}, {0.18315911730545878`, 0}, {
                   0.16817653890824621`, 0}}, {{0.18315911730545878`, 0}, {
                   0.18315911730545878`, 0.02222222222222222}, {
                   0.20720092915214866`, 0.02222222222222222}, {
                   0.20720092915214866`, 0}, {0.18315911730545878`, 0}}, {{
                   0.20720092915214866`, 0}, {0.20720092915214866`, 
                   0.02222222222222222}, {0.216260162601626, 
                   0.02222222222222222}, {0.216260162601626, 0}, {
                   0.20720092915214866`, 0}}, {{0.216260162601626, 0}, {
                   0.216260162601626, 0.02222222222222222}, {
                   0.2462253193960511, 0.02222222222222222}, {
                   0.2462253193960511, 0}, {0.216260162601626, 0}}, {{
                   0.2462253193960511, 0}, {0.2462253193960511, 
                   0.02222222222222222}, {0.28222996515679444`, 
                   0.02222222222222222}, {0.28222996515679444`, 0}, {
                   0.2462253193960511, 0}}, {{0.28222996515679444`, 0}, {
                   0.28222996515679444`, 0.02222222222222222}, {
                   0.3047619047619048, 0.02222222222222222}, {
                   0.3047619047619048, 0}, {0.28222996515679444`, 0}}, {{
                   0.3047619047619048, 0}, {0.3047619047619048, 
                   0.02222222222222222}, {0.34239256678281066`, 
                   0.02222222222222222}, {0.34239256678281066`, 0}, {
                   0.3047619047619048, 0}}, {{0.34239256678281066`, 0}, {
                   0.34239256678281066`, 0.02222222222222222}, {
                   0.36341463414634145`, 0.02222222222222222}, {
                   0.36341463414634145`, 0}, {0.34239256678281066`, 0}}, {{
                   0.36341463414634145`, 0}, {0.36341463414634145`, 
                   0.02222222222222222}, {0.3723577235772358, 
                   0.02222222222222222}, {0.3723577235772358, 0}, {
                   0.36341463414634145`, 0}}, {{0.3723577235772358, 0}, {
                   0.3723577235772358, 0.02222222222222222}, {
                   0.37181571815718156`, 0.02222222222222222}, {
                   0.37181571815718156`, 0.02222222222222222}, {
                   0.3737451423534808, 0.022053419477913422`}, {
                   0.3756159419719112, 0.021552140230954534`}, {
                   0.3773712737127371, 0.020733615597604872`}, {
                   0.3789578027092542, 0.019622716034655308`}, {
                   0.38032732308072575`, 0.018253195663183768`}, {
                   0.38143822264367533`, 0.016666666666666663`}, {
                   0.38225674727702497`, 0.014911334925840762`}, {
                   0.3827580265239839, 0.013040535307410336`}, {
                   0.3829268292682927, 0.01111111111111111}, {
                   0.3829268292682927, 0.01111111111111111}, {
                   0.3829268292682927, 0.01111111111111111}, {
                   0.3829268292682927, 0.01111111111111111}, {
                   0.3827580265239839, 0.009181686914811884}, {
                   0.38225674727702497`, 0.007310887296381458}, {
                   0.38143822264367533`, 0.005555555555555556}, {
                   0.38032732308072575`, 0.003969026559038452}, {
                   0.3789578027092542, 0.0025995061875669113`}, {
                   0.3773712737127371, 0.0014886066246173491`}, {
                   0.3756159419719112, 0.0006700819912676854}, {
                   0.3737451423534808, 0.0001688027443087995}, {
                   0.37181571815718156`, 0.}, {0.37181571815718156`, 0}, {
                   0.3723577235772358, 0}}, {{0.40545876887340304`, 0}, {
                   0.3940379403794038, 0}, {0.3940379403794038, 0.}, {
                   0.3921085161831046, 0.0001688027443087995}, {
                   0.39023771656467415`, 0.0006700819912676837}, {
                   0.3884823848238483, 0.0014886066246173509`}, {
                   0.38689585582733116`, 0.0025995061875669113`}, {
                   0.3855263354558596, 0.003969026559038452}, {
                   0.38441543589291005`, 0.005555555555555554}, {
                   0.3835969112595604, 0.007310887296381458}, {
                   0.3830956320126015, 0.009181686914811887}, {
                   0.3829268292682927, 0.011111111111111112`}, {
                   0.3829268292682927, 0.01111111111111111}, {
                   0.3829268292682927, 0.01111111111111111}, {
                   0.3829268292682927, 0.011111111111111112`}, {
                   0.3830956320126015, 0.013040535307410336`}, {
                   0.3835969112595604, 0.014911334925840763`}, {
                   0.38441543589291005`, 0.016666666666666663`}, {
                   0.3855263354558596, 0.01825319566318377}, {
                   0.38689585582733116`, 0.019622716034655308`}, {
                   0.3884823848238483, 0.020733615597604872`}, {
                   0.39023771656467415`, 0.021552140230954538`}, {
                   0.3921085161831046, 0.022053419477913422`}, {
                   0.3940379403794038, 0.02222222222222222}, {
                   0.3940379403794038, 0.02222222222222222}, {
                   0.40545876887340304`, 0.02222222222222222}, {
                   0.40545876887340304`, 0}}, {{0.40545876887340304`, 0}, {
                   0.40545876887340304`, 0.02222222222222222}, {
                   0.42044134727061555`, 0.02222222222222222}, {
                   0.42044134727061555`, 0}, {0.40545876887340304`, 0}}, {{
                   0.42044134727061555`, 0}, {0.42044134727061555`, 
                   0.02222222222222222}, {0.44448315911730546`, 
                   0.02222222222222222}, {0.44448315911730546`, 0}, {
                   0.42044134727061555`, 0}}, {{0.44448315911730546`, 0}, {
                   0.44448315911730546`, 0.02222222222222222}, {
                   0.48048780487804876`, 0.02222222222222222}, {
                   0.48048780487804876`, 0}, {0.44448315911730546`, 0}}, {{
                   0.48048780487804876`, 0}, {0.48048780487804876`, 
                   0.02222222222222222}, {0.49849012775842044`, 
                   0.02222222222222222}, {0.49849012775842044`, 0}, {
                   0.48048780487804876`, 0}}, {{0.49849012775842044`, 0}, {
                   0.49849012775842044`, 0.02222222222222222}, {
                   0.5164924506387921, 0.02222222222222222}, {
                   0.5164924506387921, 0}, {0.49849012775842044`, 0}}, {{
                   0.5164924506387921, 0}, {0.5164924506387921, 
                   0.02222222222222222}, {0.5495934959349593, 
                   0.02222222222222222}, {0.5495934959349593, 0}, {
                   0.5164924506387921, 0}}, {{0.5495934959349593, 0}, {
                   0.5495934959349593, 0.02222222222222222}, {
                   0.5585365853658537, 0.02222222222222222}, {
                   0.5585365853658537, 0}, {0.5495934959349593, 0}}, {{
                   0.5585365853658537, 0}, {0.5585365853658537, 
                   0.02222222222222222}, {0.5931475029036004, 
                   0.02222222222222222}, {0.5931475029036004, 0}, {
                   0.5585365853658537, 0}}, {{0.5931475029036004, 0}, {
                   0.5931475029036004, 0.02222222222222222}, {
                   0.6020905923344948, 0.02222222222222222}, {
                   0.6020905923344948, 0}, {0.5931475029036004, 0}}, {{
                   0.6020905923344948, 0}, {0.6020905923344948, 
                   0.02222222222222222}, {0.6306620209059234, 
                   0.02222222222222222}, {0.6306620209059234, 0}, {
                   0.6020905923344948, 0}}, {{0.6306620209059234, 0}, {
                   0.6306620209059234, 0.02222222222222222}, {
                   0.662137049941928, 0.02222222222222222}, {
                   0.662137049941928, 0}, {0.6306620209059234, 0}}, {{
                   0.662137049941928, 0}, {0.662137049941928, 
                   0.02222222222222222}, {0.6786295005807201, 
                   0.02222222222222222}, {0.6786295005807201, 0}, {
                   0.662137049941928, 0}}, {{0.6786295005807201, 0}, {
                   0.6786295005807201, 0.02222222222222222}, {
                   0.70267131242741, 0.02222222222222222}, {
                   0.70267131242741, 0}, {0.6786295005807201, 0}}, {{
                   0.70267131242741, 0}, {0.70267131242741, 
                   0.02222222222222222}, {0.7342624854819977, 
                   0.02222222222222222}, {0.7342624854819977, 0}, {
                   0.70267131242741, 0}}, {{0.7342624854819977, 0}, {
                   0.7342624854819977, 0.02222222222222222}, {
                   0.7687572590011614, 0.02222222222222222}, {
                   0.7687572590011614, 0}, {0.7342624854819977, 0}}, {{
                   0.7687572590011614, 0}, {0.7687572590011614, 
                   0.02222222222222222}, {0.8198606271777004, 
                   0.02222222222222222}, {0.8198606271777004, 0}, {
                   0.7687572590011614, 0}}, {{0.8198606271777004, 0}, {
                   0.8198606271777004, 0.02222222222222222}, {
                   0.8423925667828107, 0.02222222222222222}, {
                   0.8423925667828107, 0}, {0.8198606271777004, 0}}, {{
                   0.8423925667828107, 0}, {0.8423925667828107, 
                   0.02222222222222222}, {0.8588850174216028, 
                   0.02222222222222222}, {0.8588850174216028, 0}, {
                   0.8423925667828107, 0}}, {{0.8588850174216028, 0}, {
                   0.8588850174216028, 0.02222222222222222}, {
                   0.8829268292682927, 0.02222222222222222}, {
                   0.8829268292682927, 0}, {0.8588850174216028, 0}}, {{
                   0.8829268292682927, 0}, {0.8829268292682927, 
                   0.02222222222222222}, {0.9068524970963996, 
                   0.02222222222222222}, {0.9068524970963996, 0}, {
                   0.8829268292682927, 0}}, {{0.9068524970963996, 0}, {
                   0.9068524970963996, 0.02222222222222222}, {
                   0.9159117305458769, 0.02222222222222222}, {
                   0.9159117305458769, 0}, {0.9068524970963996, 0}}, {{
                   0.9159117305458769, 0}, {0.9159117305458769, 
                   0.02222222222222222}, {0.945993031358885, 
                   0.02222222222222222}, {0.945993031358885, 0}, {
                   0.9159117305458769, 0}}, {{0.945993031358885, 0}, {
                   0.945993031358885, 0.02222222222222222}, {
                   0.9944444444444445, 0.02222222222222222}, {
                   0.9944444444444445, 0.02222222222222222}, {
                   0.9954091565425941, 0.022137820850067817`}, {
                   0.9963445563518093, 0.021887181226588375`}, {
                   0.9972222222222222, 0.021477918909913546`}, {
                   0.9980154867204808, 0.020922469128438762`}, {
                   0.9987002469062166, 0.020237708942702992`}, {
                   0.9992556966876913, 0.01944444444444444}, {
                   0.9996649590043661, 0.018566778574031488`}, {
                   0.9999155986278456, 0.017631378764816276`}, {1., 
                   0.016666666666666663`}, {1., 0.016666666666666663`}, {1., 
                   0.005555555555555555}, {1., 0.005555555555555555}, {
                   0.9999155986278456, 0.004590843457405942}, {
                   0.9996649590043661, 0.003655443648190729}, {
                   0.9992556966876913, 0.002777777777777778}, {
                   0.9987002469062166, 0.001984513279519226}, {
                   0.9980154867204808, 0.0012997530937834557`}, {
                   0.9972222222222222, 0.0007443033123086746}, {
                   0.9963445563518093, 0.0003350409956338427}, {
                   0.9954091565425941, 0.00008440137215439975}, {
                   0.9944444444444445, 0.}, {0.9944444444444445, 0}, {
                   0.945993031358885, 0}}}, 
                 VertexColors -> {{1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                   1., 1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {
                   0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 
                   0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {0., 0., 0., 0., 
                   0.}, {1., 1., 1., 1., 1.}, {0., 0., 0., 0., 0.}, {1., 1., 
                   1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 0.25}, {1., 1., 1., 
                   1., 1.}, {0.75, 0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 
                   1.}, {0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
                    0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
                   0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25}, {
                   0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
                    0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
                   0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25}, {1., 1., 
                   1., 1., 1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 
                   1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {1., 1., 1., 1., 1.}, {0., 
                   0., 0., 0., 0.}, {1., 1., 1., 1., 1.}, {0., 0., 0., 0., 
                   0.}, {1., 1., 1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 
                   0.25}, {1., 1., 1., 1., 1.}, {0.5, 0.5, 0.5, 0.5, 0.5}, {
                   1., 1., 1., 1., 1.}, {0.25, 0.25, 0.25, 0.25, 0.25}, {1., 
                   1., 1., 1., 1.}, {0., 0., 0., 0., 0.}, {1., 1., 1., 1., 
                   1.}, {0.75, 0.75, 0.75, 0.75, 0.75}, {1., 1., 1., 1., 
                   1.}, {0.25, 0.25, 0.25, 0.25, 0.25}, {1., 1., 1., 1., 
                   1.}, {0., 0., 0., 0., 0.}, {1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                   1., 1., 1., 1., 1.}}], 
                EdgeForm[None], 
                RGBColor[1, 0, 0], 
                PolygonBox[{}]}, Frame -> {{False, False}, {True, False}}, 
               FrameTicks -> {{None, None}, {{{0., 
                    FormBox["\"0 Mb\"", TraditionalForm]}, {
                   0.19365614237196782`, 
                    FormBox["\"30 Mb\"", TraditionalForm]}, {
                   0.38731228474393564`, 
                    FormBox["\"60 Mb\"", TraditionalForm]}, {
                   0.5809684271159035, 
                    FormBox["\"90 Mb\"", TraditionalForm]}, {
                   0.7746245694878713, 
                    FormBox["\"120 Mb\"", TraditionalForm]}, {
                   0.9682807118598391, 
                    FormBox["\"150 Mb\"", TraditionalForm]}}, None}}, 
               FrameStyle -> {{None, None}, {
                  GrayLevel[0.5], None}}, ImageSize -> 450, AspectRatio -> 
               Automatic, 
               ImagePadding -> {{10, Automatic}, {Automatic, Automatic}}], 
              StyleBox["\"chromosome X\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  
                  ItemBox[#2, Alignment -> {Left, Inherited}, 
                   DefaultBaseStyle -> "LabeledLabel"]}, {
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {2, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Top", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
GenomeDataSourceInformationNotes.html", "text" -> "Genome data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www4d.wolframalpha.com/sources/\
GenomeSequenceDataSourceInformationNotes.html", "text" -> 
        "Genome sequence data"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Genome,GenomeSequence", "timedout" -> 
    "", "timedoutpods" -> "", "timing" -> "0.494", "parsetiming" -> 
    "0.20700000000000002", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSP105515732c738hhae9f90000648823809a870ga3", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "3", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa105615732c738hhae9f900005a0efb5gg3f425ab5891218284613442489", "version" -> 
    "2.6", "inputstring" -> "Chromosome X genome sequences"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 48.578288`8.439017181364951}, "Line" -> 9,
     "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Chromosome X genome sequences"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1043., {121., 127.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203868625082*^9},ExpressionUUID->"1c762363-dbff-4be4-8844-\
a0e3ef87573c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["human proteome", "WolframAlphaLong",
 CellChangeTimes->{{3.7178674106953897`*^9, 3.71786754137344*^9}, {
  3.717867599629691*^9, 3.7178676017192574`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"57e9bfba-0964-45d0-857d-ff397c534e0e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "human proteome", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement[
    "examplepage", {
     "category" -> "Proteins", "url" -> 
      "https://www4c.wolframalpha.com/examples/Proteins-content.html"}, {}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.241", "parsetiming" -> "0.176", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP149719b61i44haa662hb00000h72f69840463ce1", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "40", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "human proteome"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2021, 5, 28, 11, 17, 50.748592`8.457998972942763}, "Line" -> 
    10, "SessionID" -> 28409462560470033437}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "human proteome"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1043., {167., 172.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.831203870796125*^9},ExpressionUUID->"b03b134e-999c-4f58-896f-\
d8f7f3e8f02e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code accompanying the Manuscript", "Section",
 CellChangeTimes->{{3.720445689190505*^9, 
  3.720445695225533*^9}},ExpressionUUID->"c3d68d01-a4ba-4317-8aff-\
dd540925d720"],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", 
  "\"\<https://github.com/gmiaslab/MathematicaBioinformatics/releases\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7204456537034483`*^9, 3.720445657129876*^9}, {
  3.720445699447613*^9, 3.720445704544548*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"d1b5268d-4e92-4e8b-87c1-8f57034412b4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->"EditBar",
WindowSize->{1131, 975},
WindowMargins->{{Automatic, -224}, {744, Automatic}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e7d60f66-6239-4376-8185-ed2d7a293a67"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 414, 6, 98, "Title",ExpressionUUID->"8fce1eb3-3baf-4d7c-8a22-51601254c34a"],
Cell[997, 30, 697, 15, 71, "Text",ExpressionUUID->"8bf39aff-c1cd-4703-a4e0-7331c05c1135"],
Cell[1697, 47, 312, 8, 58, "Text",ExpressionUUID->"b722e1c1-0694-4892-a111-ea6d398f7050"],
Cell[CellGroupData[{
Cell[2034, 59, 480, 7, 69, "Chapter",ExpressionUUID->"ee101586-1e20-47e9-8e2d-aa6489d0781f"],
Cell[CellGroupData[{
Cell[2539, 70, 210, 4, 67, "Section",ExpressionUUID->"4fe8dba8-d822-42dc-9733-6a2e5c0a7c4a"],
Cell[2752, 76, 1525, 27, 242, "Text",ExpressionUUID->"8bba13dc-b1f3-43bd-bc90-7e31a32f6998"],
Cell[4280, 105, 631, 12, 104, "Text",ExpressionUUID->"1c4f6601-265a-4b80-9283-0636c2c4d8cb"],
Cell[CellGroupData[{
Cell[4936, 121, 193, 3, 30, "Input",ExpressionUUID->"272ee073-15b9-4b5e-9b0d-873dc59de1bf"],
Cell[5132, 126, 288, 4, 34, "Output",ExpressionUUID->"0c39affb-2f39-492e-a8a2-8a27e1326c9d"]
}, Open  ]],
Cell[5435, 133, 466, 8, 58, "Text",ExpressionUUID->"2e41a1c2-6a0b-407b-a736-477d5f7d1a29"],
Cell[5904, 143, 307, 6, 32, "Item",ExpressionUUID->"43798866-8917-468e-a728-b5b368d5f597"],
Cell[6214, 151, 236, 6, 32, "Item",ExpressionUUID->"adc15831-829f-4080-9bb6-b385e1d1fbb9"],
Cell[CellGroupData[{
Cell[6475, 161, 285, 6, 32, "Item",ExpressionUUID->"3fa9b1fc-c73f-45e4-b82c-fc18b1feacba"],
Cell[CellGroupData[{
Cell[6785, 171, 239, 3, 41, "WolframAlphaLong",ExpressionUUID->"acb82f59-2055-446a-b438-57c131615126"],
Cell[7027, 176, 9163, 176, 306, "Print",ExpressionUUID->"f9b0eb6d-4222-49e5-9271-30e9f45c4083"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16239, 358, 267, 4, 32, "Item",ExpressionUUID->"09adf76a-987d-40d1-9ac8-e105be0f1afa"],
Cell[16509, 364, 133, 3, 34, "WolframAlphaShort",ExpressionUUID->"bb6e1655-3b73-4887-9456-1199e34faeb1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16679, 372, 260, 4, 32, "Item",ExpressionUUID->"1a18b631-8a27-4ee6-b9fb-e65d2ccf3513"],
Cell[16942, 378, 132, 3, 41, "WolframAlphaLong",ExpressionUUID->"4a03dff9-161d-46d6-95f5-68754ff02a80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17111, 386, 226, 4, 32, "Item",ExpressionUUID->"103c3c10-95ee-4bdf-a773-a55310dc4fb1"],
Cell[17340, 392, 1191, 27, 38, "Input",ExpressionUUID->"7fbab6cd-a95e-43e8-8730-c7bd1df11092"]
}, Open  ]],
Cell[18546, 422, 213, 5, 35, "Text",ExpressionUUID->"356788d9-0554-461e-8101-52328fb88564"],
Cell[CellGroupData[{
Cell[18784, 431, 299, 4, 41, "WolframAlphaLong",ExpressionUUID->"3973a80d-a0be-4d62-91f4-eeff513b2c44"],
Cell[19086, 437, 55496, 1098, 757, "Print",ExpressionUUID->"a4460f9d-820e-4960-a9cc-fce4f21a535b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[74631, 1541, 186, 3, 67, "Section",ExpressionUUID->"d2094de9-c00e-4ffc-9474-3fac2b95c5be"],
Cell[CellGroupData[{
Cell[74842, 1548, 184, 2, 41, "WolframAlphaLong",ExpressionUUID->"c255643c-34e1-4098-810b-25b793a730ec"],
Cell[75029, 1552, 13988, 282, 336, "Print",ExpressionUUID->"b8c80939-1723-438e-bf3a-bbf4934de99a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89054, 1839, 186, 2, 41, "WolframAlphaLong",ExpressionUUID->"dcdcf326-1f78-4189-82a9-92363f23812a"],
Cell[89243, 1843, 3620, 74, 409, "Print",ExpressionUUID->"ce7057cb-4c48-44b6-92e0-2f737b48b19d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92900, 1922, 229, 3, 41, "WolframAlphaLong",ExpressionUUID->"adc9b8c8-1211-4085-857c-d17da5a680c6"],
Cell[93132, 1927, 106984, 2026, 1732, "Print",ExpressionUUID->"69c0e355-2dfb-491f-8f71-edd0ccd28520"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200153, 3958, 290, 6, 30, "Input",ExpressionUUID->"ffff4d8d-4bd5-4758-8dc7-4bba0ad26bca"],
Cell[200446, 3966, 473, 10, 34, "Output",ExpressionUUID->"c1ac9b22-6649-432e-a66e-3b7dca0b9223"]
}, Open  ]],
Cell[200934, 3979, 295, 6, 35, "Text",ExpressionUUID->"8be4e3a9-e25f-4e8a-b3ea-fcd953af22a7"],
Cell[CellGroupData[{
Cell[201254, 3989, 186, 2, 41, "WolframAlphaLong",ExpressionUUID->"b6fbaee0-319a-49c3-9c04-b9e570826a29"],
Cell[201443, 3993, 37568, 626, 258, "Print",ExpressionUUID->"2dad4736-8b5f-4142-b296-6a2c47a2eee0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239048, 4624, 250, 3, 41, "WolframAlphaLong",ExpressionUUID->"8c1a17dd-1e40-42e7-b054-409899df3707"],
Cell[239301, 4629, 31060, 532, 258, "Print",ExpressionUUID->"1c762363-dbff-4be4-8844-a0e3ef87573c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270398, 5166, 239, 3, 41, "WolframAlphaLong",ExpressionUUID->"57e9bfba-0964-45d0-857d-ff397c534e0e"],
Cell[270640, 5171, 2851, 57, 349, "Print",ExpressionUUID->"b03b134e-999c-4f58-896f-d8f7f3e8f02e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[273540, 5234, 177, 3, 67, "Section",ExpressionUUID->"c3d68d01-a4ba-4317-8aff-dd540925d720"],
Cell[273720, 5239, 334, 6, 60, "Input",ExpressionUUID->"d1b5268d-4e92-4e8b-87c1-8f57034412b4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

